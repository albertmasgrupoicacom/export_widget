{"version":3,"sources":["../../src/util.ts","../../src/regexps-uri.ts","../../node_modules/punycode/punycode.es6.js","../../src/uri.ts","../../src/schemes/ws.ts","../../src/schemes/mailto.ts","../../src/regexps-iri.ts","../../src/schemes/http.ts","../../src/schemes/https.ts","../../src/schemes/wss.ts","../../src/schemes/urn.ts","../../src/schemes/urn-uuid.ts","../../src/index.ts"],"names":["sets","length","slice","xl","x","join","str","o","undefined","Object","prototype","toString","call","split","pop","shift","toLowerCase","toUpperCase","obj","Array","setInterval","target","source","key","isIRI","HEXDIG$$","merge","PCT_ENCODED$","subexp","SUB_DELIMS$$","RESERVED$$","UCSCHAR$$","DEC_OCTET_RELAXED$","H16$","LS32$","IPV4ADDRESS$","IPV6ADDRESS1$","IPV6ADDRESS2$","IPV6ADDRESS3$","IPV6ADDRESS4$","IPV6ADDRESS5$","IPV6ADDRESS6$","IPV6ADDRESS7$","IPV6ADDRESS8$","IPV6ADDRESS9$","ZONEID$","UNRESERVED$$","RegExp","IPRIVATE$$","IPV6ADDRESS$","buildExps","maxInt","regexPunycode","regexNonASCII","regexSeparators","errors","base","floor","Math","stringFromCharCode","String","fromCharCode","error","type","RangeError","map","array","fn","result","mapDomain","string","parts","replace","ucs2decode","output","counter","value","charCodeAt","extra","push","fromCodePoint","basicToDigit","codePoint","digitToBasic","digit","flag","adapt","delta","numPoints","firstTime","k","baseMinusTMin","decode","input","inputLength","i","n","bias","basic","lastIndexOf","j","index","oldi","w","t","baseMinusT","out","splice","encode","_step","currentValue","basicLength","handledCPCount","m","_step2","handledCPCountPlusOne","_step3","q","qMinusT","test","punycode","ucs2encode","toASCII","SCHEMES","chr","c","newStr","il","parseInt","substr","c2","c3","components","protocol","decodeUnreserved","decStr","pctDecChars","match","UNRESERVED","scheme","PCT_ENCODED","NOT_SCHEME","userinfo","NOT_USERINFO","pctEncChar","host","NOT_HOST","path","NOT_PATH","NOT_PATH_NOSCHEME","query","NOT_QUERY","fragment","NOT_FRAGMENT","matches","IPV4ADDRESS","address","_stripLeadingZeros","IPV6ADDRESS","zone","last","first","reverse","firstFields","lastFields","isLastFieldIPv4Address","fieldCount","lastFieldsStart","fields","_normalizeIPv4","allZeroFields","reduce","acc","field","lastLongest","longestZeroFields","sort","a","b","newHost","newFirst","newLast","URI_PARSE","NO_MATCH_IS_UNDEFINED","uriString","options","iri","IRI_PROTOCOL","URI_PROTOCOL","reference","port","isNaN","indexOf","_normalizeIPv6","schemeHandler","unicodeSupport","domainHost","e","parse","uriTokens","_","$1","$2","RDS1","RDS2","RDS3","RDS5","im","s","Error","serialize","toUnicode","authority","_recomposeAuthority","charAt","absolutePath","removeDotSegments","relative","skipNormalization","tolerant","baseURI","relativeURI","schemelessOptions","assign","resolveComponents","uri","typeOf","uriA","uriB","ESCAPE","wsComponents","secure","handler","isSecure","resourceName","O","VCHAR$$","NOT_LOCAL_PART","NOT_HFNAME","mailtoComponents","to","unknownHeaders","headers","hfields","hfield","toAddrs","subject","unescapeComponent","body","addr","toArray","toAddr","atIdx","localPart","domain","name","http","ws","URN_PARSE","urnComponents","nid","nss","urnScheme","uriComponents","UUID","uuidComponents","uuid","https","wss","mailto","urn"],"mappings":"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","sourcesContent":["export function merge(...sets:Array<string>):string {\n\tif (sets.length > 1) {\n\t\tsets[0] = sets[0].slice(0, -1);\n\t\tconst xl = sets.length - 1;\n\t\tfor (let x = 1; x < xl; ++x) {\n\t\t\tsets[x] = sets[x].slice(1, -1);\n\t\t}\n\t\tsets[xl] = sets[xl].slice(1);\n\t\treturn sets.join('');\n\t} else {\n\t\treturn sets[0];\n\t}\n}\n\nexport function subexp(str:string):string {\n\treturn \"(?:\" + str + \")\";\n}\n\nexport function typeOf(o:any):string {\n\treturn o === undefined ? \"undefined\" : (o === null ? \"null\" : Object.prototype.toString.call(o).split(\" \").pop().split(\"]\").shift().toLowerCase());\n}\n\nexport function toUpperCase(str:string):string {\n\treturn str.toUpperCase();\n}\n\nexport function toArray(obj:any):Array<any> {\n\treturn obj !== undefined && obj !== null ? (obj instanceof Array ? obj : (typeof obj.length !== \"number\" || obj.split || obj.setInterval || obj.call ? [obj] : Array.prototype.slice.call(obj))) : [];\n}\n\n\nexport function assign(target: object, source: any): any {\n\tconst obj = target as any;\n\tif (source) {\n\t\tfor (const key in source) {\n\t\t\tobj[key] = source[key];\n\t\t}\n\t}\n\treturn obj;\n}","import { URIRegExps } from \"./uri\";\nimport { merge, subexp } from \"./util\";\n\nexport function buildExps(isIRI:boolean):URIRegExps {\n\tconst\n\t\tALPHA$$ = \"[A-Za-z]\",\n\t\tCR$ = \"[\\\\x0D]\",\n\t\tDIGIT$$ = \"[0-9]\",\n\t\tDQUOTE$$ = \"[\\\\x22]\",\n\t\tHEXDIG$$ = merge(DIGIT$$, \"[A-Fa-f]\"),  //case-insensitive\n\t\tLF$$ = \"[\\\\x0A]\",\n\t\tSP$$ = \"[\\\\x20]\",\n\t\tPCT_ENCODED$ = subexp(subexp(\"%[EFef]\" + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$) + \"|\" + subexp(\"%[89A-Fa-f]\" + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$) + \"|\" + subexp(\"%\" + HEXDIG$$ + HEXDIG$$)),  //expanded\n\t\tGEN_DELIMS$$ = \"[\\\\:\\\\/\\\\?\\\\#\\\\[\\\\]\\\\@]\",\n\t\tSUB_DELIMS$$ = \"[\\\\!\\\\$\\\\&\\\\'\\\\(\\\\)\\\\*\\\\+\\\\,\\\\;\\\\=]\",\n\t\tRESERVED$$ = merge(GEN_DELIMS$$, SUB_DELIMS$$),\n\t\tUCSCHAR$$ = isIRI ? \"[\\\\xA0-\\\\u200D\\\\u2010-\\\\u2029\\\\u202F-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF]\" : \"[]\",  //subset, excludes bidi control characters\n\t\tIPRIVATE$$ = isIRI ? \"[\\\\uE000-\\\\uF8FF]\" : \"[]\",  //subset\n\t\tUNRESERVED$$ = merge(ALPHA$$, DIGIT$$, \"[\\\\-\\\\.\\\\_\\\\~]\", UCSCHAR$$),\n\t\tSCHEME$ = subexp(ALPHA$$ + merge(ALPHA$$, DIGIT$$, \"[\\\\+\\\\-\\\\.]\") + \"*\"),\n\t\tUSERINFO$ = subexp(subexp(PCT_ENCODED$ + \"|\" + merge(UNRESERVED$$, SUB_DELIMS$$, \"[\\\\:]\")) + \"*\"),\n\t\tDEC_OCTET$ = subexp(subexp(\"25[0-5]\") + \"|\" + subexp(\"2[0-4]\" + DIGIT$$) + \"|\" + subexp(\"1\" + DIGIT$$ + DIGIT$$) + \"|\" + subexp(\"[1-9]\" + DIGIT$$) + \"|\" + DIGIT$$),\n\t\tDEC_OCTET_RELAXED$ = subexp(subexp(\"25[0-5]\") + \"|\" + subexp(\"2[0-4]\" + DIGIT$$) + \"|\" + subexp(\"1\" + DIGIT$$ + DIGIT$$) + \"|\" + subexp(\"0?[1-9]\" + DIGIT$$) + \"|0?0?\" + DIGIT$$),  //relaxed parsing rules\n\t\tIPV4ADDRESS$ = subexp(DEC_OCTET_RELAXED$ + \"\\\\.\" + DEC_OCTET_RELAXED$ + \"\\\\.\" + DEC_OCTET_RELAXED$ + \"\\\\.\" + DEC_OCTET_RELAXED$),\n\t\tH16$ = subexp(HEXDIG$$ + \"{1,4}\"),\n\t\tLS32$ = subexp(subexp(H16$ + \"\\\\:\" + H16$) + \"|\" + IPV4ADDRESS$),\n\t\tIPV6ADDRESS1$ = subexp(                                                            subexp(H16$ + \"\\\\:\") + \"{6}\" + LS32$), //                           6( h16 \":\" ) ls32\n\t\tIPV6ADDRESS2$ = subexp(                                                 \"\\\\:\\\\:\" + subexp(H16$ + \"\\\\:\") + \"{5}\" + LS32$), //                      \"::\" 5( h16 \":\" ) ls32\n\t\tIPV6ADDRESS3$ = subexp(subexp(                                 H16$) + \"?\\\\:\\\\:\" + subexp(H16$ + \"\\\\:\") + \"{4}\" + LS32$), //[               h16 ] \"::\" 4( h16 \":\" ) ls32\n\t\tIPV6ADDRESS4$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,1}\" + H16$) + \"?\\\\:\\\\:\" + subexp(H16$ + \"\\\\:\") + \"{3}\" + LS32$), //[ *1( h16 \":\" ) h16 ] \"::\" 3( h16 \":\" ) ls32\n\t\tIPV6ADDRESS5$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,2}\" + H16$) + \"?\\\\:\\\\:\" + subexp(H16$ + \"\\\\:\") + \"{2}\" + LS32$), //[ *2( h16 \":\" ) h16 ] \"::\" 2( h16 \":\" ) ls32\n\t\tIPV6ADDRESS6$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,3}\" + H16$) + \"?\\\\:\\\\:\" +        H16$ + \"\\\\:\"          + LS32$), //[ *3( h16 \":\" ) h16 ] \"::\"    h16 \":\"   ls32\n\t\tIPV6ADDRESS7$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,4}\" + H16$) + \"?\\\\:\\\\:\"                                + LS32$), //[ *4( h16 \":\" ) h16 ] \"::\"              ls32\n\t\tIPV6ADDRESS8$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,5}\" + H16$) + \"?\\\\:\\\\:\"                                + H16$ ), //[ *5( h16 \":\" ) h16 ] \"::\"              h16\n\t\tIPV6ADDRESS9$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,6}\" + H16$) + \"?\\\\:\\\\:\"                                       ), //[ *6( h16 \":\" ) h16 ] \"::\"\n\t\tIPV6ADDRESS$ = subexp([IPV6ADDRESS1$, IPV6ADDRESS2$, IPV6ADDRESS3$, IPV6ADDRESS4$, IPV6ADDRESS5$, IPV6ADDRESS6$, IPV6ADDRESS7$, IPV6ADDRESS8$, IPV6ADDRESS9$].join(\"|\")),\n\t\tZONEID$ = subexp(subexp(UNRESERVED$$ + \"|\" + PCT_ENCODED$) + \"+\"),  //RFC 6874\n\t\tIPV6ADDRZ$ = subexp(IPV6ADDRESS$ + \"\\\\%25\" + ZONEID$),  //RFC 6874\n\t\tIPV6ADDRZ_RELAXED$ = subexp(IPV6ADDRESS$ + subexp(\"\\\\%25|\\\\%(?!\" + HEXDIG$$ + \"{2})\") + ZONEID$),  //RFC 6874, with relaxed parsing rules\n\t\tIPVFUTURE$ = subexp(\"[vV]\" + HEXDIG$$ + \"+\\\\.\" + merge(UNRESERVED$$, SUB_DELIMS$$, \"[\\\\:]\") + \"+\"),\n\t\tIP_LITERAL$ = subexp(\"\\\\[\" + subexp(IPV6ADDRZ_RELAXED$ + \"|\" + IPV6ADDRESS$ + \"|\" + IPVFUTURE$) + \"\\\\]\"),  //RFC 6874\n\t\tREG_NAME$ = subexp(subexp(PCT_ENCODED$ + \"|\" + merge(UNRESERVED$$, SUB_DELIMS$$)) + \"*\"),\n\t\tHOST$ = subexp(IP_LITERAL$ + \"|\" + IPV4ADDRESS$ + \"(?!\" + REG_NAME$ + \")\" + \"|\" + REG_NAME$),\n\t\tPORT$ = subexp(DIGIT$$ + \"*\"),\n\t\tAUTHORITY$ = subexp(subexp(USERINFO$ + \"@\") + \"?\" + HOST$ + subexp(\"\\\\:\" + PORT$) + \"?\"),\n\t\tPCHAR$ = subexp(PCT_ENCODED$ + \"|\" + merge(UNRESERVED$$, SUB_DELIMS$$, \"[\\\\:\\\\@]\")),\n\t\tSEGMENT$ = subexp(PCHAR$ + \"*\"),\n\t\tSEGMENT_NZ$ = subexp(PCHAR$ + \"+\"),\n\t\tSEGMENT_NZ_NC$ = subexp(subexp(PCT_ENCODED$ + \"|\" + merge(UNRESERVED$$, SUB_DELIMS$$, \"[\\\\@]\")) + \"+\"),\n\t\tPATH_ABEMPTY$ = subexp(subexp(\"\\\\/\" + SEGMENT$) + \"*\"),\n\t\tPATH_ABSOLUTE$ = subexp(\"\\\\/\" + subexp(SEGMENT_NZ$ + PATH_ABEMPTY$) + \"?\"),  //simplified\n\t\tPATH_NOSCHEME$ = subexp(SEGMENT_NZ_NC$ + PATH_ABEMPTY$),  //simplified\n\t\tPATH_ROOTLESS$ = subexp(SEGMENT_NZ$ + PATH_ABEMPTY$),  //simplified\n\t\tPATH_EMPTY$ = \"(?!\" + PCHAR$ + \")\",\n\t\tPATH$ = subexp(PATH_ABEMPTY$ + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_NOSCHEME$ + \"|\" + PATH_ROOTLESS$ + \"|\" + PATH_EMPTY$),\n\t\tQUERY$ = subexp(subexp(PCHAR$ + \"|\" + merge(\"[\\\\/\\\\?]\", IPRIVATE$$)) + \"*\"),\n\t\tFRAGMENT$ = subexp(subexp(PCHAR$ + \"|[\\\\/\\\\?]\") + \"*\"),\n\t\tHIER_PART$ = subexp(subexp(\"\\\\/\\\\/\" + AUTHORITY$ + PATH_ABEMPTY$) + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_ROOTLESS$ + \"|\" + PATH_EMPTY$),\n\t\tURI$ = subexp(SCHEME$ + \"\\\\:\" + HIER_PART$ + subexp(\"\\\\?\" + QUERY$) + \"?\" + subexp(\"\\\\#\" + FRAGMENT$) + \"?\"),\n\t\tRELATIVE_PART$ = subexp(subexp(\"\\\\/\\\\/\" + AUTHORITY$ + PATH_ABEMPTY$) + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_NOSCHEME$ + \"|\" + PATH_EMPTY$),\n\t\tRELATIVE$ = subexp(RELATIVE_PART$ + subexp(\"\\\\?\" + QUERY$) + \"?\" + subexp(\"\\\\#\" + FRAGMENT$) + \"?\"),\n\t\tURI_REFERENCE$ = subexp(URI$ + \"|\" + RELATIVE$),\n\t\tABSOLUTE_URI$ = subexp(SCHEME$ + \"\\\\:\" + HIER_PART$ + subexp(\"\\\\?\" + QUERY$) + \"?\"),\n\n\t\tGENERIC_REF$ = \"^(\" + SCHEME$ + \")\\\\:\" + subexp(subexp(\"\\\\/\\\\/(\" + subexp(\"(\" + USERINFO$ + \")@\") + \"?(\" + HOST$ + \")\" + subexp(\"\\\\:(\" + PORT$ + \")\") + \"?)\") + \"?(\" + PATH_ABEMPTY$ + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_ROOTLESS$ + \"|\" + PATH_EMPTY$ + \")\") + subexp(\"\\\\?(\" + QUERY$ + \")\") + \"?\" + subexp(\"\\\\#(\" + FRAGMENT$ + \")\") + \"?$\",\n\t\tRELATIVE_REF$ = \"^(){0}\" + subexp(subexp(\"\\\\/\\\\/(\" + subexp(\"(\" + USERINFO$ + \")@\") + \"?(\" + HOST$ + \")\" + subexp(\"\\\\:(\" + PORT$ + \")\") + \"?)\") + \"?(\" + PATH_ABEMPTY$ + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_NOSCHEME$ + \"|\" + PATH_EMPTY$ + \")\") + subexp(\"\\\\?(\" + QUERY$ + \")\") + \"?\" + subexp(\"\\\\#(\" + FRAGMENT$ + \")\") + \"?$\",\n\t\tABSOLUTE_REF$ = \"^(\" + SCHEME$ + \")\\\\:\" + subexp(subexp(\"\\\\/\\\\/(\" + subexp(\"(\" + USERINFO$ + \")@\") + \"?(\" + HOST$ + \")\" + subexp(\"\\\\:(\" + PORT$ + \")\") + \"?)\") + \"?(\" + PATH_ABEMPTY$ + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_ROOTLESS$ + \"|\" + PATH_EMPTY$ + \")\") + subexp(\"\\\\?(\" + QUERY$ + \")\") + \"?$\",\n\t\tSAMEDOC_REF$ = \"^\" + subexp(\"\\\\#(\" + FRAGMENT$ + \")\") + \"?$\",\n\t\tAUTHORITY_REF$ = \"^\" + subexp(\"(\" + USERINFO$ + \")@\") + \"?(\" + HOST$ + \")\" + subexp(\"\\\\:(\" + PORT$ + \")\") + \"?$\"\n\t;\n\n\treturn {\n\t\tNOT_SCHEME : new RegExp(merge(\"[^]\", ALPHA$$, DIGIT$$, \"[\\\\+\\\\-\\\\.]\"), \"g\"),\n\t\tNOT_USERINFO : new RegExp(merge(\"[^\\\\%\\\\:]\", UNRESERVED$$, SUB_DELIMS$$), \"g\"),\n\t\tNOT_HOST : new RegExp(merge(\"[^\\\\%\\\\[\\\\]\\\\:]\", UNRESERVED$$, SUB_DELIMS$$), \"g\"),\n\t\tNOT_PATH : new RegExp(merge(\"[^\\\\%\\\\/\\\\:\\\\@]\", UNRESERVED$$, SUB_DELIMS$$), \"g\"),\n\t\tNOT_PATH_NOSCHEME : new RegExp(merge(\"[^\\\\%\\\\/\\\\@]\", UNRESERVED$$, SUB_DELIMS$$), \"g\"),\n\t\tNOT_QUERY : new RegExp(merge(\"[^\\\\%]\", UNRESERVED$$, SUB_DELIMS$$, \"[\\\\:\\\\@\\\\/\\\\?]\", IPRIVATE$$), \"g\"),\n\t\tNOT_FRAGMENT : new RegExp(merge(\"[^\\\\%]\", UNRESERVED$$, SUB_DELIMS$$, \"[\\\\:\\\\@\\\\/\\\\?]\"), \"g\"),\n\t\tESCAPE : new RegExp(merge(\"[^]\", UNRESERVED$$, SUB_DELIMS$$), \"g\"),\n\t\tUNRESERVED : new RegExp(UNRESERVED$$, \"g\"),\n\t\tOTHER_CHARS : new RegExp(merge(\"[^\\\\%]\", UNRESERVED$$, RESERVED$$), \"g\"),\n\t\tPCT_ENCODED : new RegExp(PCT_ENCODED$, \"g\"),\n\t\tIPV4ADDRESS : new RegExp(\"^(\" + IPV4ADDRESS$ + \")$\"),\n\t\tIPV6ADDRESS : new RegExp(\"^\\\\[?(\" + IPV6ADDRESS$ + \")\" + subexp(subexp(\"\\\\%25|\\\\%(?!\" + HEXDIG$$ + \"{2})\") + \"(\" + ZONEID$ + \")\") + \"?\\\\]?$\")  //RFC 6874, with relaxed parsing rules\n\t};\n}\n\nexport default buildExps(false);\n","'use strict';\n\n/** Highest positive signed 32-bit float value */\nconst maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1\n\n/** Bootstring parameters */\nconst base = 36;\nconst tMin = 1;\nconst tMax = 26;\nconst skew = 38;\nconst damp = 700;\nconst initialBias = 72;\nconst initialN = 128; // 0x80\nconst delimiter = '-'; // '\\x2D'\n\n/** Regular expressions */\nconst regexPunycode = /^xn--/;\nconst regexNonASCII = /[^\\0-\\x7E]/; // non-ASCII chars\nconst regexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g; // RFC 3490 separators\n\n/** Error messages */\nconst errors = {\n\t'overflow': 'Overflow: input needs wider integers to process',\n\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t'invalid-input': 'Invalid input'\n};\n\n/** Convenience shortcuts */\nconst baseMinusTMin = base - tMin;\nconst floor = Math.floor;\nconst stringFromCharCode = String.fromCharCode;\n\n/*--------------------------------------------------------------------------*/\n\n/**\n * A generic error utility function.\n * @private\n * @param {String} type The error type.\n * @returns {Error} Throws a `RangeError` with the applicable error message.\n */\nfunction error(type) {\n\tthrow new RangeError(errors[type]);\n}\n\n/**\n * A generic `Array#map` utility function.\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} callback The function that gets called for every array\n * item.\n * @returns {Array} A new array of values returned by the callback function.\n */\nfunction map(array, fn) {\n\tconst result = [];\n\tlet length = array.length;\n\twhile (length--) {\n\t\tresult[length] = fn(array[length]);\n\t}\n\treturn result;\n}\n\n/**\n * A simple `Array#map`-like wrapper to work with domain name strings or email\n * addresses.\n * @private\n * @param {String} domain The domain name or email address.\n * @param {Function} callback The function that gets called for every\n * character.\n * @returns {Array} A new string of characters returned by the callback\n * function.\n */\nfunction mapDomain(string, fn) {\n\tconst parts = string.split('@');\n\tlet result = '';\n\tif (parts.length > 1) {\n\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t// the local part (i.e. everything up to `@`) intact.\n\t\tresult = parts[0] + '@';\n\t\tstring = parts[1];\n\t}\n\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\tstring = string.replace(regexSeparators, '\\x2E');\n\tconst labels = string.split('.');\n\tconst encoded = map(labels, fn).join('.');\n\treturn result + encoded;\n}\n\n/**\n * Creates an array containing the numeric code points of each Unicode\n * character in the string. While JavaScript uses UCS-2 internally,\n * this function will convert a pair of surrogate halves (each of which\n * UCS-2 exposes as separate characters) into a single code point,\n * matching UTF-16.\n * @see `punycode.ucs2.encode`\n * @see <https://mathiasbynens.be/notes/javascript-encoding>\n * @memberOf punycode.ucs2\n * @name decode\n * @param {String} string The Unicode input string (UCS-2).\n * @returns {Array} The new array of code points.\n */\nfunction ucs2decode(string) {\n\tconst output = [];\n\tlet counter = 0;\n\tconst length = string.length;\n\twhile (counter < length) {\n\t\tconst value = string.charCodeAt(counter++);\n\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t// It's a high surrogate, and there is a next character.\n\t\t\tconst extra = string.charCodeAt(counter++);\n\t\t\tif ((extra & 0xFC00) == 0xDC00) { // Low surrogate.\n\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t} else {\n\t\t\t\t// It's an unmatched surrogate; only append this code unit, in case the\n\t\t\t\t// next code unit is the high surrogate of a surrogate pair.\n\t\t\t\toutput.push(value);\n\t\t\t\tcounter--;\n\t\t\t}\n\t\t} else {\n\t\t\toutput.push(value);\n\t\t}\n\t}\n\treturn output;\n}\n\n/**\n * Creates a string based on an array of numeric code points.\n * @see `punycode.ucs2.decode`\n * @memberOf punycode.ucs2\n * @name encode\n * @param {Array} codePoints The array of numeric code points.\n * @returns {String} The new Unicode string (UCS-2).\n */\nconst ucs2encode = array => String.fromCodePoint(...array);\n\n/**\n * Converts a basic code point into a digit/integer.\n * @see `digitToBasic()`\n * @private\n * @param {Number} codePoint The basic numeric code point value.\n * @returns {Number} The numeric value of a basic code point (for use in\n * representing integers) in the range `0` to `base - 1`, or `base` if\n * the code point does not represent a value.\n */\nconst basicToDigit = function(codePoint) {\n\tif (codePoint - 0x30 < 0x0A) {\n\t\treturn codePoint - 0x16;\n\t}\n\tif (codePoint - 0x41 < 0x1A) {\n\t\treturn codePoint - 0x41;\n\t}\n\tif (codePoint - 0x61 < 0x1A) {\n\t\treturn codePoint - 0x61;\n\t}\n\treturn base;\n};\n\n/**\n * Converts a digit/integer into a basic code point.\n * @see `basicToDigit()`\n * @private\n * @param {Number} digit The numeric value of a basic code point.\n * @returns {Number} The basic code point whose value (when used for\n * representing integers) is `digit`, which needs to be in the range\n * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n * used; else, the lowercase form is used. The behavior is undefined\n * if `flag` is non-zero and `digit` has no uppercase form.\n */\nconst digitToBasic = function(digit, flag) {\n\t//  0..25 map to ASCII a..z or A..Z\n\t// 26..35 map to ASCII 0..9\n\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n};\n\n/**\n * Bias adaptation function as per section 3.4 of RFC 3492.\n * https://tools.ietf.org/html/rfc3492#section-3.4\n * @private\n */\nconst adapt = function(delta, numPoints, firstTime) {\n\tlet k = 0;\n\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\tdelta += floor(delta / numPoints);\n\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\tdelta = floor(delta / baseMinusTMin);\n\t}\n\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n};\n\n/**\n * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n * symbols.\n * @memberOf punycode\n * @param {String} input The Punycode string of ASCII-only symbols.\n * @returns {String} The resulting string of Unicode symbols.\n */\nconst decode = function(input) {\n\t// Don't use UCS-2.\n\tconst output = [];\n\tconst inputLength = input.length;\n\tlet i = 0;\n\tlet n = initialN;\n\tlet bias = initialBias;\n\n\t// Handle the basic code points: let `basic` be the number of input code\n\t// points before the last delimiter, or `0` if there is none, then copy\n\t// the first basic code points to the output.\n\n\tlet basic = input.lastIndexOf(delimiter);\n\tif (basic < 0) {\n\t\tbasic = 0;\n\t}\n\n\tfor (let j = 0; j < basic; ++j) {\n\t\t// if it's not a basic code point\n\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\terror('not-basic');\n\t\t}\n\t\toutput.push(input.charCodeAt(j));\n\t}\n\n\t// Main decoding loop: start just after the last delimiter if any basic code\n\t// points were copied; start at the beginning otherwise.\n\n\tfor (let index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t// `index` is the index of the next character to be consumed.\n\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t// which gets added to `i`. The overflow checking is easier\n\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t// value at the end to obtain `delta`.\n\t\tlet oldi = i;\n\t\tfor (let w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\tif (index >= inputLength) {\n\t\t\t\terror('invalid-input');\n\t\t\t}\n\n\t\t\tconst digit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\tif (digit >= base || digit > floor((maxInt - i) / w)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\ti += digit * w;\n\t\t\tconst t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\tif (digit < t) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tconst baseMinusT = base - t;\n\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tw *= baseMinusT;\n\n\t\t}\n\n\t\tconst out = output.length + 1;\n\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t// incrementing `n` each time, so we'll fix that now:\n\t\tif (floor(i / out) > maxInt - n) {\n\t\t\terror('overflow');\n\t\t}\n\n\t\tn += floor(i / out);\n\t\ti %= out;\n\n\t\t// Insert `n` at position `i` of the output.\n\t\toutput.splice(i++, 0, n);\n\n\t}\n\n\treturn String.fromCodePoint(...output);\n};\n\n/**\n * Converts a string of Unicode symbols (e.g. a domain name label) to a\n * Punycode string of ASCII-only symbols.\n * @memberOf punycode\n * @param {String} input The string of Unicode symbols.\n * @returns {String} The resulting Punycode string of ASCII-only symbols.\n */\nconst encode = function(input) {\n\tconst output = [];\n\n\t// Convert the input in UCS-2 to an array of Unicode code points.\n\tinput = ucs2decode(input);\n\n\t// Cache the length.\n\tlet inputLength = input.length;\n\n\t// Initialize the state.\n\tlet n = initialN;\n\tlet delta = 0;\n\tlet bias = initialBias;\n\n\t// Handle the basic code points.\n\tfor (const currentValue of input) {\n\t\tif (currentValue < 0x80) {\n\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t}\n\t}\n\n\tlet basicLength = output.length;\n\tlet handledCPCount = basicLength;\n\n\t// `handledCPCount` is the number of code points that have been handled;\n\t// `basicLength` is the number of basic code points.\n\n\t// Finish the basic string with a delimiter unless it's empty.\n\tif (basicLength) {\n\t\toutput.push(delimiter);\n\t}\n\n\t// Main encoding loop:\n\twhile (handledCPCount < inputLength) {\n\n\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t// larger one:\n\t\tlet m = maxInt;\n\t\tfor (const currentValue of input) {\n\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\tm = currentValue;\n\t\t\t}\n\t\t}\n\n\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t// but guard against overflow.\n\t\tconst handledCPCountPlusOne = handledCPCount + 1;\n\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\terror('overflow');\n\t\t}\n\n\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\tn = m;\n\n\t\tfor (const currentValue of input) {\n\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\t\t\tif (currentValue == n) {\n\t\t\t\t// Represent delta as a generalized variable-length integer.\n\t\t\t\tlet q = delta;\n\t\t\t\tfor (let k = base; /* no condition */; k += base) {\n\t\t\t\t\tconst t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tconst qMinusT = q - t;\n\t\t\t\t\tconst baseMinusT = base - t;\n\t\t\t\t\toutput.push(\n\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t);\n\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t}\n\n\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n\t\t\t\tdelta = 0;\n\t\t\t\t++handledCPCount;\n\t\t\t}\n\t\t}\n\n\t\t++delta;\n\t\t++n;\n\n\t}\n\treturn output.join('');\n};\n\n/**\n * Converts a Punycode string representing a domain name or an email address\n * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n * it doesn't matter if you call it on a string that has already been\n * converted to Unicode.\n * @memberOf punycode\n * @param {String} input The Punycoded domain name or email address to\n * convert to Unicode.\n * @returns {String} The Unicode representation of the given Punycode\n * string.\n */\nconst toUnicode = function(input) {\n\treturn mapDomain(input, function(string) {\n\t\treturn regexPunycode.test(string)\n\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t: string;\n\t});\n};\n\n/**\n * Converts a Unicode string representing a domain name or an email address to\n * Punycode. Only the non-ASCII parts of the domain name will be converted,\n * i.e. it doesn't matter if you call it with a domain that's already in\n * ASCII.\n * @memberOf punycode\n * @param {String} input The domain name or email address to convert, as a\n * Unicode string.\n * @returns {String} The Punycode representation of the given domain name or\n * email address.\n */\nconst toASCII = function(input) {\n\treturn mapDomain(input, function(string) {\n\t\treturn regexNonASCII.test(string)\n\t\t\t? 'xn--' + encode(string)\n\t\t\t: string;\n\t});\n};\n\n/*--------------------------------------------------------------------------*/\n\n/** Define the public API */\nconst punycode = {\n\t/**\n\t * A string representing the current Punycode.js version number.\n\t * @memberOf punycode\n\t * @type String\n\t */\n\t'version': '2.1.0',\n\t/**\n\t * An object of methods to convert from JavaScript's internal character\n\t * representation (UCS-2) to Unicode code points, and back.\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode\n\t * @type Object\n\t */\n\t'ucs2': {\n\t\t'decode': ucs2decode,\n\t\t'encode': ucs2encode\n\t},\n\t'decode': decode,\n\t'encode': encode,\n\t'toASCII': toASCII,\n\t'toUnicode': toUnicode\n};\n\nexport default punycode;\n","/**\n * URI.js\n *\n * @fileoverview An RFC 3986 compliant, scheme extendable URI parsing/validating/resolving library for JavaScript.\n * @author <a href=\"mailto:gary.court@gmail.com\">Gary Court</a>\n * @see http://github.com/garycourt/uri-js\n */\n\n/**\n * Copyright 2011 Gary Court. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are\n * permitted provided that the following conditions are met:\n *\n *    1. Redistributions of source code must retain the above copyright notice, this list of\n *       conditions and the following disclaimer.\n *\n *    2. Redistributions in binary form must reproduce the above copyright notice, this list\n *       of conditions and the following disclaimer in the documentation and/or other materials\n *       provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY GARY COURT ``AS IS'' AND ANY EXPRESS OR IMPLIED\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL GARY COURT OR\n * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\n * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * The views and conclusions contained in the software and documentation are those of the\n * authors and should not be interpreted as representing official policies, either expressed\n * or implied, of Gary Court.\n */\n\nimport URI_PROTOCOL from \"./regexps-uri\";\nimport IRI_PROTOCOL from \"./regexps-iri\";\nimport punycode from \"punycode\";\nimport { toUpperCase, typeOf, assign } from \"./util\";\n\nexport interface URIComponents {\n\tscheme?:string;\n\tuserinfo?:string;\n\thost?:string;\n\tport?:number|string;\n\tpath?:string;\n\tquery?:string;\n\tfragment?:string;\n\treference?:string;\n\terror?:string;\n}\n\nexport interface URIOptions {\n\tscheme?:string;\n\treference?:string;\n\ttolerant?:boolean;\n\tabsolutePath?:boolean;\n\tiri?:boolean;\n\tunicodeSupport?:boolean;\n\tdomainHost?:boolean;\n}\n\nexport interface URISchemeHandler<Components extends URIComponents = URIComponents, Options extends URIOptions = URIOptions, ParentComponents extends URIComponents = URIComponents> {\n\tscheme:string;\n\tparse(components:ParentComponents, options:Options):Components;\n\tserialize(components:Components, options:Options):ParentComponents;\n\tunicodeSupport?:boolean;\n\tdomainHost?:boolean;\n\tabsolutePath?:boolean;\n}\n\nexport interface URIRegExps {\n\tNOT_SCHEME : RegExp,\n\tNOT_USERINFO : RegExp,\n\tNOT_HOST : RegExp,\n\tNOT_PATH : RegExp,\n\tNOT_PATH_NOSCHEME : RegExp,\n\tNOT_QUERY : RegExp,\n\tNOT_FRAGMENT : RegExp,\n\tESCAPE : RegExp,\n\tUNRESERVED : RegExp,\n\tOTHER_CHARS : RegExp,\n\tPCT_ENCODED : RegExp,\n\tIPV4ADDRESS : RegExp,\n\tIPV6ADDRESS : RegExp,\n}\n\nexport const SCHEMES:{[scheme:string]:URISchemeHandler} = {};\n\nexport function pctEncChar(chr:string):string {\n\tconst c = chr.charCodeAt(0);\n\tlet e:string;\n\n\tif (c < 16) e = \"%0\" + c.toString(16).toUpperCase();\n\telse if (c < 128) e = \"%\" + c.toString(16).toUpperCase();\n\telse if (c < 2048) e = \"%\" + ((c >> 6) | 192).toString(16).toUpperCase() + \"%\" + ((c & 63) | 128).toString(16).toUpperCase();\n\telse e = \"%\" + ((c >> 12) | 224).toString(16).toUpperCase() + \"%\" + (((c >> 6) & 63) | 128).toString(16).toUpperCase() + \"%\" + ((c & 63) | 128).toString(16).toUpperCase();\n\n\treturn e;\n}\n\nexport function pctDecChars(str:string):string {\n\tlet newStr = \"\";\n\tlet i = 0;\n\tconst il = str.length;\n\n\twhile (i < il) {\n\t\tconst c = parseInt(str.substr(i + 1, 2), 16);\n\n\t\tif (c < 128) {\n\t\t\tnewStr += String.fromCharCode(c);\n\t\t\ti += 3;\n\t\t}\n\t\telse if (c >= 194 && c < 224) {\n\t\t\tif ((il - i) >= 6) {\n\t\t\t\tconst c2 = parseInt(str.substr(i + 4, 2), 16);\n\t\t\t\tnewStr += String.fromCharCode(((c & 31) << 6) | (c2 & 63));\n\t\t\t} else {\n\t\t\t\tnewStr += str.substr(i, 6);\n\t\t\t}\n\t\t\ti += 6;\n\t\t}\n\t\telse if (c >= 224) {\n\t\t\tif ((il - i) >= 9) {\n\t\t\t\tconst c2 = parseInt(str.substr(i + 4, 2), 16);\n\t\t\t\tconst c3 = parseInt(str.substr(i + 7, 2), 16);\n\t\t\t\tnewStr += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\n\t\t\t} else {\n\t\t\t\tnewStr += str.substr(i, 9);\n\t\t\t}\n\t\t\ti += 9;\n\t\t}\n\t\telse {\n\t\t\tnewStr += str.substr(i, 3);\n\t\t\ti += 3;\n\t\t}\n\t}\n\n\treturn newStr;\n}\n\nfunction _normalizeComponentEncoding(components:URIComponents, protocol:URIRegExps) {\n\tfunction decodeUnreserved(str:string):string {\n\t\tconst decStr = pctDecChars(str);\n\t\treturn (!decStr.match(protocol.UNRESERVED) ? str : decStr);\n\t}\n\n\tif (components.scheme) components.scheme = String(components.scheme).replace(protocol.PCT_ENCODED, decodeUnreserved).toLowerCase().replace(protocol.NOT_SCHEME, \"\");\n\tif (components.userinfo !== undefined) components.userinfo = String(components.userinfo).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_USERINFO, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);\n\tif (components.host !== undefined) components.host = String(components.host).replace(protocol.PCT_ENCODED, decodeUnreserved).toLowerCase().replace(protocol.NOT_HOST, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);\n\tif (components.path !== undefined) components.path = String(components.path).replace(protocol.PCT_ENCODED, decodeUnreserved).replace((components.scheme ? protocol.NOT_PATH : protocol.NOT_PATH_NOSCHEME), pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);\n\tif (components.query !== undefined) components.query = String(components.query).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_QUERY, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);\n\tif (components.fragment !== undefined) components.fragment = String(components.fragment).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_FRAGMENT, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);\n\n\treturn components;\n};\n\nfunction _stripLeadingZeros(str:string):string {\n\treturn str.replace(/^0*(.*)/, \"$1\") || \"0\";\n}\n\nfunction _normalizeIPv4(host:string, protocol:URIRegExps):string {\n\tconst matches = host.match(protocol.IPV4ADDRESS) || [];\n\tconst [, address] = matches;\n\t\n\tif (address) {\n\t\treturn address.split(\".\").map(_stripLeadingZeros).join(\".\");\n\t} else {\n\t\treturn host;\n\t}\n}\n\nfunction _normalizeIPv6(host:string, protocol:URIRegExps):string {\n\tconst matches = host.match(protocol.IPV6ADDRESS) || [];\n\tconst [, address, zone] = matches;\n\n\tif (address) {\n\t\tconst [last, first] = address.toLowerCase().split('::').reverse();\n\t\tconst firstFields = first ? first.split(\":\").map(_stripLeadingZeros) : [];\n\t\tconst lastFields = last.split(\":\").map(_stripLeadingZeros);\n\t\tconst isLastFieldIPv4Address = protocol.IPV4ADDRESS.test(lastFields[lastFields.length - 1]);\n\t\tconst fieldCount = isLastFieldIPv4Address ? 7 : 8;\n\t\tconst lastFieldsStart = lastFields.length - fieldCount;\n\t\tconst fields = Array<string>(fieldCount);\n\n\t\tfor (let x = 0; x < fieldCount; ++x) {\n\t\t\tfields[x] = firstFields[x] || lastFields[lastFieldsStart + x] || '';\n\t\t}\n\n\t\tif (isLastFieldIPv4Address) {\n\t\t\tfields[fieldCount - 1] = _normalizeIPv4(fields[fieldCount - 1], protocol);\n\t\t}\n\n\t\tconst allZeroFields = fields.reduce<Array<{index:number,length:number}>>((acc, field, index) => {\n\t\t\tif (!field || field === \"0\") {\n\t\t\t\tconst lastLongest = acc[acc.length - 1];\n\t\t\t\tif (lastLongest && lastLongest.index + lastLongest.length === index) {\n\t\t\t\t\tlastLongest.length++;\n\t\t\t\t} else {\n\t\t\t\t\tacc.push({ index, length : 1 });\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn acc;\n\t\t}, []);\n\n\t\tconst longestZeroFields = allZeroFields.sort((a, b) => b.length - a.length)[0];\n\n\t\tlet newHost:string;\n\t\tif (longestZeroFields && longestZeroFields.length > 1) {\n\t\t\tconst newFirst = fields.slice(0, longestZeroFields.index) ;\n\t\t\tconst newLast = fields.slice(longestZeroFields.index + longestZeroFields.length);\n\t\t\tnewHost = newFirst.join(\":\") + \"::\" + newLast.join(\":\");\n\t\t} else {\n\t\t\tnewHost = fields.join(\":\");\n\t\t}\n\n\t\tif (zone) {\n\t\t\tnewHost += \"%\" + zone;\n\t\t}\n\n\t\treturn newHost;\n\t} else {\n\t\treturn host;\n\t}\n}\n\nconst URI_PARSE = /^(?:([^:\\/?#]+):)?(?:\\/\\/((?:([^\\/?#@]*)@)?(\\[[^\\/?#\\]]+\\]|[^\\/?#:]*)(?:\\:(\\d*))?))?([^?#]*)(?:\\?([^#]*))?(?:#((?:.|\\n|\\r)*))?/i;\nconst NO_MATCH_IS_UNDEFINED = (<RegExpMatchArray>(\"\").match(/(){0}/))[1] === undefined;\n\nexport function parse(uriString:string, options:URIOptions = {}):URIComponents {\n\tconst components:URIComponents = {};\n\tconst protocol = (options.iri !== false ? IRI_PROTOCOL : URI_PROTOCOL);\n\n\tif (options.reference === \"suffix\") uriString = (options.scheme ? options.scheme + \":\" : \"\") + \"//\" + uriString;\n\n\tconst matches = uriString.match(URI_PARSE);\n\n\tif (matches) {\n\t\tif (NO_MATCH_IS_UNDEFINED) {\n\t\t\t//store each component\n\t\t\tcomponents.scheme = matches[1];\n\t\t\tcomponents.userinfo = matches[3];\n\t\t\tcomponents.host = matches[4];\n\t\t\tcomponents.port = parseInt(matches[5], 10);\n\t\t\tcomponents.path = matches[6] || \"\";\n\t\t\tcomponents.query = matches[7];\n\t\t\tcomponents.fragment = matches[8];\n\n\t\t\t//fix port number\n\t\t\tif (isNaN(components.port)) {\n\t\t\t\tcomponents.port = matches[5];\n\t\t\t}\n\t\t} else {  //IE FIX for improper RegExp matching\n\t\t\t//store each component\n\t\t\tcomponents.scheme = matches[1] || undefined;\n\t\t\tcomponents.userinfo = (uriString.indexOf(\"@\") !== -1 ? matches[3] : undefined);\n\t\t\tcomponents.host = (uriString.indexOf(\"//\") !== -1 ? matches[4] : undefined);\n\t\t\tcomponents.port = parseInt(matches[5], 10);\n\t\t\tcomponents.path = matches[6] || \"\";\n\t\t\tcomponents.query = (uriString.indexOf(\"?\") !== -1 ? matches[7] : undefined);\n\t\t\tcomponents.fragment = (uriString.indexOf(\"#\") !== -1 ? matches[8] : undefined);\n\n\t\t\t//fix port number\n\t\t\tif (isNaN(components.port)) {\n\t\t\t\tcomponents.port = (uriString.match(/\\/\\/(?:.|\\n)*\\:(?:\\/|\\?|\\#|$)/) ? matches[4] : undefined);\n\t\t\t}\n\t\t}\n\n\t\tif (components.host) {\n\t\t\t//normalize IP hosts\n\t\t\tcomponents.host = _normalizeIPv6(_normalizeIPv4(components.host, protocol), protocol);\n\t\t}\n\n\t\t//determine reference type\n\t\tif (components.scheme === undefined && components.userinfo === undefined && components.host === undefined && components.port === undefined && !components.path && components.query === undefined) {\n\t\t\tcomponents.reference = \"same-document\";\n\t\t} else if (components.scheme === undefined) {\n\t\t\tcomponents.reference = \"relative\";\n\t\t} else if (components.fragment === undefined) {\n\t\t\tcomponents.reference = \"absolute\";\n\t\t} else {\n\t\t\tcomponents.reference = \"uri\";\n\t\t}\n\n\t\t//check for reference errors\n\t\tif (options.reference && options.reference !== \"suffix\" && options.reference !== components.reference) {\n\t\t\tcomponents.error = components.error || \"URI is not a \" + options.reference + \" reference.\";\n\t\t}\n\n\t\t//find scheme handler\n\t\tconst schemeHandler = SCHEMES[(options.scheme || components.scheme || \"\").toLowerCase()];\n\n\t\t//check if scheme can't handle IRIs\n\t\tif (!options.unicodeSupport && (!schemeHandler || !schemeHandler.unicodeSupport)) {\n\t\t\t//if host component is a domain name\n\t\t\tif (components.host && (options.domainHost || (schemeHandler && schemeHandler.domainHost))) {\n\t\t\t\t//convert Unicode IDN -> ASCII IDN\n\t\t\t\ttry {\n\t\t\t\t\tcomponents.host = punycode.toASCII(components.host.replace(protocol.PCT_ENCODED, pctDecChars).toLowerCase());\n\t\t\t\t} catch (e) {\n\t\t\t\t\tcomponents.error = components.error || \"Host's domain name can not be converted to ASCII via punycode: \" + e;\n\t\t\t\t}\n\t\t\t}\n\t\t\t//convert IRI -> URI\n\t\t\t_normalizeComponentEncoding(components, URI_PROTOCOL);\n\t\t} else {\n\t\t\t//normalize encodings\n\t\t\t_normalizeComponentEncoding(components, protocol);\n\t\t}\n\n\t\t//perform scheme specific parsing\n\t\tif (schemeHandler && schemeHandler.parse) {\n\t\t\tschemeHandler.parse(components, options);\n\t\t}\n\t} else {\n\t\tcomponents.error = components.error || \"URI can not be parsed.\";\n\t}\n\n\treturn components;\n};\n\nfunction _recomposeAuthority(components:URIComponents, options:URIOptions):string|undefined {\n\tconst protocol = (options.iri !== false ? IRI_PROTOCOL : URI_PROTOCOL);\n\tconst uriTokens:Array<string> = [];\n\n\tif (components.userinfo !== undefined) {\n\t\turiTokens.push(components.userinfo);\n\t\turiTokens.push(\"@\");\n\t}\n\n\tif (components.host !== undefined) {\n\t\t//normalize IP hosts, add brackets and escape zone separator for IPv6\n\t\turiTokens.push(_normalizeIPv6(_normalizeIPv4(String(components.host), protocol), protocol).replace(protocol.IPV6ADDRESS, (_, $1, $2) => \"[\" + $1 + ($2 ? \"%25\" + $2 : \"\") + \"]\"));\n\t}\n\n\tif (typeof components.port === \"number\" || typeof components.port === \"string\") {\n\t\turiTokens.push(\":\");\n\t\turiTokens.push(String(components.port));\n\t}\n\n\treturn uriTokens.length ? uriTokens.join(\"\") : undefined;\n};\n\nconst RDS1 = /^\\.\\.?\\//;\nconst RDS2 = /^\\/\\.(\\/|$)/;\nconst RDS3 = /^\\/\\.\\.(\\/|$)/;\nconst RDS4 = /^\\.\\.?$/;\nconst RDS5 = /^\\/?(?:.|\\n)*?(?=\\/|$)/;\n\nexport function removeDotSegments(input:string):string {\n\tconst output:Array<string> = [];\n\n\twhile (input.length) {\n\t\tif (input.match(RDS1)) {\n\t\t\tinput = input.replace(RDS1, \"\");\n\t\t} else if (input.match(RDS2)) {\n\t\t\tinput = input.replace(RDS2, \"/\");\n\t\t} else if (input.match(RDS3)) {\n\t\t\tinput = input.replace(RDS3, \"/\");\n\t\t\toutput.pop();\n\t\t} else if (input === \".\" || input === \"..\") {\n\t\t\tinput = \"\";\n\t\t} else {\n\t\t\tconst im = input.match(RDS5);\n\t\t\tif (im) {\n\t\t\t\tconst s = im[0];\n\t\t\t\tinput = input.slice(s.length);\n\t\t\t\toutput.push(s);\n\t\t\t} else {\n\t\t\t\tthrow new Error(\"Unexpected dot segment condition\");\n\t\t\t}\n\t\t}\n\t}\n\n\treturn output.join(\"\");\n};\n\nexport function serialize(components:URIComponents, options:URIOptions = {}):string {\n\tconst protocol = (options.iri ? IRI_PROTOCOL : URI_PROTOCOL);\n\tconst uriTokens:Array<string> = [];\n\n\t//find scheme handler\n\tconst schemeHandler = SCHEMES[(options.scheme || components.scheme || \"\").toLowerCase()];\n\n\t//perform scheme specific serialization\n\tif (schemeHandler && schemeHandler.serialize) schemeHandler.serialize(components, options);\n\n\tif (components.host) {\n\t\t//if host component is an IPv6 address\n\t\tif (protocol.IPV6ADDRESS.test(components.host)) {\n\t\t\t//TODO: normalize IPv6 address as per RFC 5952\n\t\t}\n\n\t\t//if host component is a domain name\n\t\telse if (options.domainHost || (schemeHandler && schemeHandler.domainHost)) {\n\t\t\t//convert IDN via punycode\n\t\t\ttry {\n\t\t\t\tcomponents.host = (!options.iri ? punycode.toASCII(components.host.replace(protocol.PCT_ENCODED, pctDecChars).toLowerCase()) : punycode.toUnicode(components.host));\n\t\t\t} catch (e) {\n\t\t\t\tcomponents.error = components.error || \"Host's domain name can not be converted to \" + (!options.iri ? \"ASCII\" : \"Unicode\") + \" via punycode: \" + e;\n\t\t\t}\n\t\t}\n\t}\n\n\t//normalize encoding\n\t_normalizeComponentEncoding(components, protocol);\n\n\tif (options.reference !== \"suffix\" && components.scheme) {\n\t\turiTokens.push(components.scheme);\n\t\turiTokens.push(\":\");\n\t}\n\n\tconst authority = _recomposeAuthority(components, options);\n\tif (authority !== undefined) {\n\t\tif (options.reference !== \"suffix\") {\n\t\t\turiTokens.push(\"//\");\n\t\t}\n\n\t\turiTokens.push(authority);\n\n\t\tif (components.path && components.path.charAt(0) !== \"/\") {\n\t\t\turiTokens.push(\"/\");\n\t\t}\n\t}\n\n\tif (components.path !== undefined) {\n\t\tlet s = components.path;\n\n\t\tif (!options.absolutePath && (!schemeHandler || !schemeHandler.absolutePath)) {\n\t\t\ts = removeDotSegments(s);\n\t\t}\n\n\t\tif (authority === undefined) {\n\t\t\ts = s.replace(/^\\/\\//, \"/%2F\");  //don't allow the path to start with \"//\"\n\t\t}\n\n\t\turiTokens.push(s);\n\t}\n\n\tif (components.query !== undefined) {\n\t\turiTokens.push(\"?\");\n\t\turiTokens.push(components.query);\n\t}\n\n\tif (components.fragment !== undefined) {\n\t\turiTokens.push(\"#\");\n\t\turiTokens.push(components.fragment);\n\t}\n\n\treturn uriTokens.join(\"\");  //merge tokens into a string\n};\n\nexport function resolveComponents(base:URIComponents, relative:URIComponents, options:URIOptions = {}, skipNormalization?:boolean):URIComponents {\n\tconst target:URIComponents = {};\n\n\tif (!skipNormalization) {\n\t\tbase = parse(serialize(base, options), options);  //normalize base components\n\t\trelative = parse(serialize(relative, options), options);  //normalize relative components\n\t}\n\toptions = options || {};\n\n\tif (!options.tolerant && relative.scheme) {\n\t\ttarget.scheme = relative.scheme;\n\t\t//target.authority = relative.authority;\n\t\ttarget.userinfo = relative.userinfo;\n\t\ttarget.host = relative.host;\n\t\ttarget.port = relative.port;\n\t\ttarget.path = removeDotSegments(relative.path || \"\");\n\t\ttarget.query = relative.query;\n\t} else {\n\t\tif (relative.userinfo !== undefined || relative.host !== undefined || relative.port !== undefined) {\n\t\t\t//target.authority = relative.authority;\n\t\t\ttarget.userinfo = relative.userinfo;\n\t\t\ttarget.host = relative.host;\n\t\t\ttarget.port = relative.port;\n\t\t\ttarget.path = removeDotSegments(relative.path || \"\");\n\t\t\ttarget.query = relative.query;\n\t\t} else {\n\t\t\tif (!relative.path) {\n\t\t\t\ttarget.path = base.path;\n\t\t\t\tif (relative.query !== undefined) {\n\t\t\t\t\ttarget.query = relative.query;\n\t\t\t\t} else {\n\t\t\t\t\ttarget.query = base.query;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (relative.path.charAt(0) === \"/\") {\n\t\t\t\t\ttarget.path = removeDotSegments(relative.path);\n\t\t\t\t} else {\n\t\t\t\t\tif ((base.userinfo !== undefined || base.host !== undefined || base.port !== undefined) && !base.path) {\n\t\t\t\t\t\ttarget.path = \"/\" + relative.path;\n\t\t\t\t\t} else if (!base.path) {\n\t\t\t\t\t\ttarget.path = relative.path;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttarget.path = base.path.slice(0, base.path.lastIndexOf(\"/\") + 1) + relative.path;\n\t\t\t\t\t}\n\t\t\t\t\ttarget.path = removeDotSegments(target.path);\n\t\t\t\t}\n\t\t\t\ttarget.query = relative.query;\n\t\t\t}\n\t\t\t//target.authority = base.authority;\n\t\t\ttarget.userinfo = base.userinfo;\n\t\t\ttarget.host = base.host;\n\t\t\ttarget.port = base.port;\n\t\t}\n\t\ttarget.scheme = base.scheme;\n\t}\n\n\ttarget.fragment = relative.fragment;\n\n\treturn target;\n};\n\nexport function resolve(baseURI:string, relativeURI:string, options?:URIOptions):string {\n\tconst schemelessOptions = assign({ scheme : 'null' }, options);\n\treturn serialize(resolveComponents(parse(baseURI, schemelessOptions), parse(relativeURI, schemelessOptions), schemelessOptions, true), schemelessOptions);\n};\n\nexport function normalize(uri:string, options?:URIOptions):string;\nexport function normalize(uri:URIComponents, options?:URIOptions):URIComponents;\nexport function normalize(uri:any, options?:URIOptions):any {\n\tif (typeof uri === \"string\") {\n\t\turi = serialize(parse(uri, options), options);\n\t} else if (typeOf(uri) === \"object\") {\n\t\turi = parse(serialize(<URIComponents>uri, options), options);\n\t}\n\n\treturn uri;\n};\n\nexport function equal(uriA:string, uriB:string, options?: URIOptions):boolean;\nexport function equal(uriA:URIComponents, uriB:URIComponents, options?:URIOptions):boolean;\nexport function equal(uriA:any, uriB:any, options?:URIOptions):boolean {\n\tif (typeof uriA === \"string\") {\n\t\turiA = serialize(parse(uriA, options), options);\n\t} else if (typeOf(uriA) === \"object\") {\n\t\turiA = serialize(<URIComponents>uriA, options);\n\t}\n\n\tif (typeof uriB === \"string\") {\n\t\turiB = serialize(parse(uriB, options), options);\n\t} else if (typeOf(uriB) === \"object\") {\n\t\turiB = serialize(<URIComponents>uriB, options);\n\t}\n\n\treturn uriA === uriB;\n};\n\nexport function escapeComponent(str:string, options?:URIOptions):string {\n\treturn str && str.toString().replace((!options || !options.iri ? URI_PROTOCOL.ESCAPE : IRI_PROTOCOL.ESCAPE), pctEncChar);\n};\n\nexport function unescapeComponent(str:string, options?:URIOptions):string {\n\treturn str && str.toString().replace((!options || !options.iri ? URI_PROTOCOL.PCT_ENCODED : IRI_PROTOCOL.PCT_ENCODED), pctDecChars);\n};\n","import { URISchemeHandler, URIComponents, URIOptions } from \"../uri\";\n\nexport interface WSComponents extends URIComponents {\n\tresourceName?: string;\n\tsecure?: boolean;\n}\n\nfunction isSecure(wsComponents:WSComponents):boolean {\n\treturn typeof wsComponents.secure === 'boolean' ? wsComponents.secure : String(wsComponents.scheme).toLowerCase() === \"wss\";\n}\n\n//RFC 6455\nconst handler:URISchemeHandler = {\n\tscheme : \"ws\",\n\n\tdomainHost : true,\n\n\tparse : function (components:URIComponents, options:URIOptions):WSComponents {\n\t\tconst wsComponents = components as WSComponents;\n\n\t\t//indicate if the secure flag is set\n\t\twsComponents.secure = isSecure(wsComponents);\n\n\t\t//construct resouce name\n\t\twsComponents.resourceName = (wsComponents.path || '/') + (wsComponents.query ? '?' + wsComponents.query : '');\n\t\twsComponents.path = undefined;\n\t\twsComponents.query = undefined;\n\n\t\treturn wsComponents;\n\t},\n\n\tserialize : function (wsComponents:WSComponents, options:URIOptions):URIComponents {\n\t\t//normalize the default port\n\t\tif (wsComponents.port === (isSecure(wsComponents) ? 443 : 80) || wsComponents.port === \"\") {\n\t\t\twsComponents.port = undefined;\n\t\t}\n\n\t\t//ensure scheme matches secure flag\n\t\tif (typeof wsComponents.secure === 'boolean') {\n\t\t\twsComponents.scheme = (wsComponents.secure ? 'wss' : 'ws');\n\t\t\twsComponents.secure = undefined;\n\t\t}\n\n\t\t//reconstruct path from resource name\n\t\tif (wsComponents.resourceName) {\n\t\t\tconst [path, query] = wsComponents.resourceName.split('?');\n\t\t\twsComponents.path = (path && path !== '/' ? path : undefined);\n\t\t\twsComponents.query = query;\n\t\t\twsComponents.resourceName = undefined;\n\t\t}\n\n\t\t//forbid fragment component\n\t\twsComponents.fragment = undefined;\n\n\t\treturn wsComponents;\n\t}\n};\n\nexport default handler;","import { URISchemeHandler, URIComponents, URIOptions } from \"../uri\";\nimport { pctEncChar, pctDecChars, unescapeComponent } from \"../uri\";\nimport punycode from \"punycode\";\nimport { merge, subexp, toUpperCase, toArray } from \"../util\";\n\nexport interface MailtoHeaders {\n\t[hfname:string]:string\n}\n\nexport interface MailtoComponents extends URIComponents {\n\tto:Array<string>,\n\theaders?:MailtoHeaders,\n\tsubject?:string,\n\tbody?:string\n}\n\nconst O:MailtoHeaders = {};\nconst isIRI = true;\n\n//RFC 3986\nconst UNRESERVED$$ = \"[A-Za-z0-9\\\\-\\\\.\\\\_\\\\~\" + (isIRI ? \"\\\\xA0-\\\\u200D\\\\u2010-\\\\u2029\\\\u202F-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF\" : \"\") + \"]\";\nconst HEXDIG$$ = \"[0-9A-Fa-f]\";  //case-insensitive\nconst PCT_ENCODED$ = subexp(subexp(\"%[EFef]\" + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$) + \"|\" + subexp(\"%[89A-Fa-f]\" + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$) + \"|\" + subexp(\"%\" + HEXDIG$$ + HEXDIG$$));  //expanded\n\n//RFC 5322, except these symbols as per RFC 6068: @ : / ? # [ ] & ; =\n//const ATEXT$$ = \"[A-Za-z0-9\\\\!\\\\#\\\\$\\\\%\\\\&\\\\'\\\\*\\\\+\\\\-\\\\/\\\\=\\\\?\\\\^\\\\_\\\\`\\\\{\\\\|\\\\}\\\\~]\";\n//const WSP$$ = \"[\\\\x20\\\\x09]\";\n//const OBS_QTEXT$$ = \"[\\\\x01-\\\\x08\\\\x0B\\\\x0C\\\\x0E-\\\\x1F\\\\x7F]\";  //(%d1-8 / %d11-12 / %d14-31 / %d127)\n//const QTEXT$$ = merge(\"[\\\\x21\\\\x23-\\\\x5B\\\\x5D-\\\\x7E]\", OBS_QTEXT$$);  //%d33 / %d35-91 / %d93-126 / obs-qtext\n//const VCHAR$$ = \"[\\\\x21-\\\\x7E]\";\n//const WSP$$ = \"[\\\\x20\\\\x09]\";\n//const OBS_QP$ = subexp(\"\\\\\\\\\" + merge(\"[\\\\x00\\\\x0D\\\\x0A]\", OBS_QTEXT$$));  //%d0 / CR / LF / obs-qtext\n//const FWS$ = subexp(subexp(WSP$$ + \"*\" + \"\\\\x0D\\\\x0A\") + \"?\" + WSP$$ + \"+\");\n//const QUOTED_PAIR$ = subexp(subexp(\"\\\\\\\\\" + subexp(VCHAR$$ + \"|\" + WSP$$)) + \"|\" + OBS_QP$);\n//const QUOTED_STRING$ = subexp('\\\\\"' + subexp(FWS$ + \"?\" + QCONTENT$) + \"*\" + FWS$ + \"?\" + '\\\\\"');\nconst ATEXT$$ = \"[A-Za-z0-9\\\\!\\\\$\\\\%\\\\'\\\\*\\\\+\\\\-\\\\^\\\\_\\\\`\\\\{\\\\|\\\\}\\\\~]\";\nconst QTEXT$$ = \"[\\\\!\\\\$\\\\%\\\\'\\\\(\\\\)\\\\*\\\\+\\\\,\\\\-\\\\.0-9\\\\<\\\\>A-Z\\\\x5E-\\\\x7E]\";\nconst VCHAR$$ = merge(QTEXT$$, \"[\\\\\\\"\\\\\\\\]\");\nconst DOT_ATOM_TEXT$ = subexp(ATEXT$$ + \"+\" + subexp(\"\\\\.\" + ATEXT$$ + \"+\") + \"*\");\nconst QUOTED_PAIR$ = subexp(\"\\\\\\\\\" + VCHAR$$);\nconst QCONTENT$ = subexp(QTEXT$$ + \"|\" + QUOTED_PAIR$);\nconst QUOTED_STRING$ = subexp('\\\\\"' + QCONTENT$ + \"*\" + '\\\\\"');\n\n//RFC 6068\nconst DTEXT_NO_OBS$$ = \"[\\\\x21-\\\\x5A\\\\x5E-\\\\x7E]\";  //%d33-90 / %d94-126\nconst SOME_DELIMS$$ = \"[\\\\!\\\\$\\\\'\\\\(\\\\)\\\\*\\\\+\\\\,\\\\;\\\\:\\\\@]\";\nconst QCHAR$ = subexp(UNRESERVED$$ + \"|\" + PCT_ENCODED$ + \"|\" + SOME_DELIMS$$);\nconst DOMAIN$ = subexp(DOT_ATOM_TEXT$ + \"|\" + \"\\\\[\" + DTEXT_NO_OBS$$ + \"*\" + \"\\\\]\");\nconst LOCAL_PART$ = subexp(DOT_ATOM_TEXT$ + \"|\" + QUOTED_STRING$);\nconst ADDR_SPEC$ = subexp(LOCAL_PART$ + \"\\\\@\" + DOMAIN$);\nconst TO$ = subexp(ADDR_SPEC$ + subexp(\"\\\\,\" + ADDR_SPEC$) + \"*\");\nconst HFNAME$ = subexp(QCHAR$ + \"*\");\nconst HFVALUE$ = HFNAME$;\nconst HFIELD$ = subexp(HFNAME$ + \"\\\\=\" + HFVALUE$);\nconst HFIELDS2$ = subexp(HFIELD$ + subexp(\"\\\\&\" + HFIELD$) + \"*\");\nconst HFIELDS$ = subexp(\"\\\\?\" + HFIELDS2$);\nconst MAILTO_URI = new RegExp(\"^mailto\\\\:\" + TO$ + \"?\" + HFIELDS$ + \"?$\");\n\nconst UNRESERVED = new RegExp(UNRESERVED$$, \"g\");\nconst PCT_ENCODED = new RegExp(PCT_ENCODED$, \"g\");\nconst NOT_LOCAL_PART = new RegExp(merge(\"[^]\", ATEXT$$, \"[\\\\.]\", '[\\\\\"]', VCHAR$$), \"g\");\nconst NOT_DOMAIN = new RegExp(merge(\"[^]\", ATEXT$$, \"[\\\\.]\", \"[\\\\[]\", DTEXT_NO_OBS$$, \"[\\\\]]\"), \"g\");\nconst NOT_HFNAME = new RegExp(merge(\"[^]\", UNRESERVED$$, SOME_DELIMS$$), \"g\");\nconst NOT_HFVALUE = NOT_HFNAME;\nconst TO = new RegExp(\"^\" + TO$ + \"$\");\nconst HFIELDS = new RegExp(\"^\" + HFIELDS2$ + \"$\");\n\nfunction decodeUnreserved(str:string):string {\n\tconst decStr = pctDecChars(str);\n\treturn (!decStr.match(UNRESERVED) ? str : decStr);\n}\n\nconst handler:URISchemeHandler<MailtoComponents> =  {\n\tscheme : \"mailto\",\n\n\tparse : function (components:URIComponents, options:URIOptions):MailtoComponents {\n\t\tconst mailtoComponents = components as MailtoComponents;\n\t\tconst to = mailtoComponents.to = (mailtoComponents.path ? mailtoComponents.path.split(\",\") : []);\n\t\tmailtoComponents.path = undefined;\n\n\t\tif (mailtoComponents.query) {\n\t\t\tlet unknownHeaders = false\n\t\t\tconst headers:MailtoHeaders = {};\n\t\t\tconst hfields = mailtoComponents.query.split(\"&\");\n\n\t\t\tfor (let x = 0, xl = hfields.length; x < xl; ++x) {\n\t\t\t\tconst hfield = hfields[x].split(\"=\");\n\n\t\t\t\tswitch (hfield[0]) {\n\t\t\t\t\tcase \"to\":\n\t\t\t\t\t\tconst toAddrs = hfield[1].split(\",\");\n\t\t\t\t\t\tfor (let x = 0, xl = toAddrs.length; x < xl; ++x) {\n\t\t\t\t\t\t\tto.push(toAddrs[x]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"subject\":\n\t\t\t\t\t\tmailtoComponents.subject = unescapeComponent(hfield[1], options);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"body\":\n\t\t\t\t\t\tmailtoComponents.body = unescapeComponent(hfield[1], options);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tunknownHeaders = true;\n\t\t\t\t\t\theaders[unescapeComponent(hfield[0], options)] = unescapeComponent(hfield[1], options);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (unknownHeaders) mailtoComponents.headers = headers;\n\t\t}\n\n\t\tmailtoComponents.query = undefined;\n\n\t\tfor (let x = 0, xl = to.length; x < xl; ++x) {\n\t\t\tconst addr = to[x].split(\"@\");\n\n\t\t\taddr[0] = unescapeComponent(addr[0]);\n\n\t\t\tif (!options.unicodeSupport) {\n\t\t\t\t//convert Unicode IDN -> ASCII IDN\n\t\t\t\ttry {\n\t\t\t\t\taddr[1] = punycode.toASCII(unescapeComponent(addr[1], options).toLowerCase());\n\t\t\t\t} catch (e) {\n\t\t\t\t\tmailtoComponents.error = mailtoComponents.error || \"Email address's domain name can not be converted to ASCII via punycode: \" + e;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\taddr[1] = unescapeComponent(addr[1], options).toLowerCase();\n\t\t\t}\n\n\t\t\tto[x] = addr.join(\"@\");\n\t\t}\n\n\t\treturn mailtoComponents;\n\t},\n\n\tserialize : function (mailtoComponents:MailtoComponents, options:URIOptions):URIComponents {\n\t\tconst components = mailtoComponents as URIComponents;\n\t\tconst to = toArray(mailtoComponents.to);\n\t\tif (to) {\n\t\t\tfor (let x = 0, xl = to.length; x < xl; ++x) {\n\t\t\t\tconst toAddr = String(to[x]);\n\t\t\t\tconst atIdx = toAddr.lastIndexOf(\"@\");\n\t\t\t\tconst localPart = (toAddr.slice(0, atIdx)).replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_LOCAL_PART, pctEncChar);\n\t\t\t\tlet domain = toAddr.slice(atIdx + 1);\n\n\t\t\t\t//convert IDN via punycode\n\t\t\t\ttry {\n\t\t\t\t\tdomain = (!options.iri ? punycode.toASCII(unescapeComponent(domain, options).toLowerCase()) : punycode.toUnicode(domain));\n\t\t\t\t} catch (e) {\n\t\t\t\t\tcomponents.error = components.error || \"Email address's domain name can not be converted to \" + (!options.iri ? \"ASCII\" : \"Unicode\") + \" via punycode: \" + e;\n\t\t\t\t}\n\n\t\t\t\tto[x] = localPart + \"@\" + domain;\n\t\t\t}\n\n\t\t\tcomponents.path = to.join(\",\");\n\t\t}\n\n\t\tconst headers = mailtoComponents.headers = mailtoComponents.headers || {};\n\n\t\tif (mailtoComponents.subject) headers[\"subject\"] = mailtoComponents.subject;\n\t\tif (mailtoComponents.body) headers[\"body\"] = mailtoComponents.body;\n\n\t\tconst fields = [];\n\t\tfor (const name in headers) {\n\t\t\tif (headers[name] !== O[name]) {\n\t\t\t\tfields.push(\n\t\t\t\t\tname.replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_HFNAME, pctEncChar) +\n\t\t\t\t\t\"=\" +\n\t\t\t\t\theaders[name].replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_HFVALUE, pctEncChar)\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\tif (fields.length) {\n\t\t\tcomponents.query = fields.join(\"&\");\n\t\t}\n\n\t\treturn components;\n\t}\n}\n\nexport default handler;","import { URIRegExps } from \"./uri\";\nimport { buildExps } from \"./regexps-uri\";\n\nexport default buildExps(true);\n","import { URISchemeHandler, URIComponents, URIOptions } from \"../uri\";\n\nconst handler:URISchemeHandler = {\n\tscheme : \"http\",\n\n\tdomainHost : true,\n\n\tparse : function (components:URIComponents, options:URIOptions):URIComponents {\n\t\t//report missing host\n\t\tif (!components.host) {\n\t\t\tcomponents.error = components.error || \"HTTP URIs must have a host.\";\n\t\t}\n\n\t\treturn components;\n\t},\n\n\tserialize : function (components:URIComponents, options:URIOptions):URIComponents {\n\t\tconst secure = String(components.scheme).toLowerCase() === \"https\";\n\n\t\t//normalize the default port\n\t\tif (components.port === (secure ? 443 : 80) || components.port === \"\") {\n\t\t\tcomponents.port = undefined;\n\t\t}\n\t\t\n\t\t//normalize the empty path\n\t\tif (!components.path) {\n\t\t\tcomponents.path = \"/\";\n\t\t}\n\n\t\t//NOTE: We do not parse query strings for HTTP URIs\n\t\t//as WWW Form Url Encoded query strings are part of the HTML4+ spec,\n\t\t//and not the HTTP spec.\n\n\t\treturn components;\n\t}\n};\n\nexport default handler;","import { URISchemeHandler, URIComponents, URIOptions } from \"../uri\";\nimport http from \"./http\";\n\nconst handler:URISchemeHandler = {\n\tscheme : \"https\",\n\tdomainHost : http.domainHost,\n\tparse : http.parse,\n\tserialize : http.serialize\n}\n\nexport default handler;","import { URISchemeHandler, URIComponents, URIOptions } from \"../uri\";\nimport ws from \"./ws\";\n\nconst handler:URISchemeHandler = {\n\tscheme : \"wss\",\n\tdomainHost : ws.domainHost,\n\tparse : ws.parse,\n\tserialize : ws.serialize\n}\n\nexport default handler;","import { URISchemeHandler, URIComponents, URIOptions } from \"../uri\";\nimport { pctEncChar, SCHEMES } from \"../uri\";\n\nexport interface URNComponents extends URIComponents {\n\tnid?:string;\n\tnss?:string;\n}\n\nexport interface URNOptions extends URIOptions {\n\tnid?:string;\n}\n\nconst NID$ = \"(?:[0-9A-Za-z][0-9A-Za-z\\\\-]{1,31})\";\nconst PCT_ENCODED$ = \"(?:\\\\%[0-9A-Fa-f]{2})\";\nconst TRANS$$ = \"[0-9A-Za-z\\\\(\\\\)\\\\+\\\\,\\\\-\\\\.\\\\:\\\\=\\\\@\\\\;\\\\$\\\\_\\\\!\\\\*\\\\'\\\\/\\\\?\\\\#]\";\nconst NSS$ = \"(?:(?:\" + PCT_ENCODED$ + \"|\" + TRANS$$ + \")+)\";\nconst URN_SCHEME = new RegExp(\"^urn\\\\:(\" + NID$ + \")$\");\nconst URN_PATH = new RegExp(\"^(\" + NID$ + \")\\\\:(\" + NSS$ + \")$\");\nconst URN_PARSE = /^([^\\:]+)\\:(.*)/;\nconst URN_EXCLUDED = /[\\x00-\\x20\\\\\\\"\\&\\<\\>\\[\\]\\^\\`\\{\\|\\}\\~\\x7F-\\xFF]/g;\n\n//RFC 2141\nconst handler:URISchemeHandler<URNComponents,URNOptions> = {\n\tscheme : \"urn\",\n\n\tparse : function (components:URIComponents, options:URNOptions):URNComponents {\n\t\tconst matches = components.path && components.path.match(URN_PARSE);\n\t\tlet urnComponents = components as URNComponents;\n\n\t\tif (matches) {\n\t\t\tconst scheme = options.scheme || urnComponents.scheme || \"urn\";\n\t\t\tconst nid = matches[1].toLowerCase();\n\t\t\tconst nss = matches[2];\n\t\t\tconst urnScheme = `${scheme}:${options.nid || nid}`;\n\t\t\tconst schemeHandler = SCHEMES[urnScheme];\n\n\t\t\turnComponents.nid = nid;\n\t\t\turnComponents.nss = nss;\n\t\t\turnComponents.path = undefined;\n\n\t\t\tif (schemeHandler) {\n\t\t\t\turnComponents = schemeHandler.parse(urnComponents, options) as URNComponents;\n\t\t\t}\n\t\t} else {\n\t\t\turnComponents.error = urnComponents.error || \"URN can not be parsed.\";\n\t\t}\n\n\t\treturn urnComponents;\n\t},\n\n\tserialize : function (urnComponents:URNComponents, options:URNOptions):URIComponents {\n\t\tconst scheme = options.scheme || urnComponents.scheme || \"urn\";\n\t\tconst nid = urnComponents.nid;\n\t\tconst urnScheme = `${scheme}:${options.nid || nid}`;\n\t\tconst schemeHandler = SCHEMES[urnScheme];\n\n\t\tif (schemeHandler) {\n\t\t\turnComponents = schemeHandler.serialize(urnComponents, options) as URNComponents;\n\t\t}\n\n\t\tconst uriComponents = urnComponents as URIComponents;\n\t\tconst nss = urnComponents.nss;\n\t\turiComponents.path = `${nid || options.nid}:${nss}`;\n\n\t\treturn uriComponents;\n\t},\n};\n\nexport default handler;","import { URISchemeHandler, URIComponents, URIOptions } from \"../uri\";\nimport { URNComponents } from \"./urn\";\nimport { SCHEMES } from \"../uri\";\n\nexport interface UUIDComponents extends URNComponents {\n\tuuid?: string;\n}\n\nconst UUID = /^[0-9A-Fa-f]{8}(?:\\-[0-9A-Fa-f]{4}){3}\\-[0-9A-Fa-f]{12}$/;\nconst UUID_PARSE = /^[0-9A-Fa-f\\-]{36}/;\n\n//RFC 4122\nconst handler:URISchemeHandler<UUIDComponents, URIOptions, URNComponents> = {\n\tscheme : \"urn:uuid\",\n\n\tparse : function (urnComponents:URNComponents, options:URIOptions):UUIDComponents {\n\t\tconst uuidComponents = urnComponents as UUIDComponents;\n\t\tuuidComponents.uuid = uuidComponents.nss;\n\t\tuuidComponents.nss = undefined;\n\n\t\tif (!options.tolerant && (!uuidComponents.uuid || !uuidComponents.uuid.match(UUID))) {\n\t\t\tuuidComponents.error = uuidComponents.error || \"UUID is not valid.\";\n\t\t}\n\n\t\treturn uuidComponents;\n\t},\n\n\tserialize : function (uuidComponents:UUIDComponents, options:URIOptions):URNComponents {\n\t\tconst urnComponents = uuidComponents as URNComponents;\n\t\t//normalize UUID\n\t\turnComponents.nss = (uuidComponents.uuid || \"\").toLowerCase();\n\t\treturn urnComponents;\n\t},\n};\n\nexport default handler;","import { SCHEMES } from \"./uri\";\n\nimport http from \"./schemes/http\";\nSCHEMES[http.scheme] = http;\n\nimport https from \"./schemes/https\";\nSCHEMES[https.scheme] = https;\n\nimport ws from \"./schemes/ws\";\nSCHEMES[ws.scheme] = ws;\n\nimport wss from \"./schemes/wss\";\nSCHEMES[wss.scheme] = wss;\n\nimport mailto from \"./schemes/mailto\";\nSCHEMES[mailto.scheme] = mailto;\n\nimport urn from \"./schemes/urn\";\nSCHEMES[urn.scheme] = urn;\n\nimport uuid from \"./schemes/urn-uuid\";\nSCHEMES[uuid.scheme] = uuid;\n\nexport * from \"./uri\";\n"]}