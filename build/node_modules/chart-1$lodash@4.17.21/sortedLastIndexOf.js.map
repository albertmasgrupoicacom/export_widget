{"version":3,"sources":["sortedLastIndexOf.js"],"names":["baseSortedIndex","require","eq","sortedLastIndexOf","array","value","length","index","module","exports"],"mappings":";;;;AAAA,QAAIA,kBAAkBC,QAAQ,oBAAR,CAAtB;AAAA,QACIC,KAAKD,QAAQ,MAAR,CADT;;AAGA;;;;;;;;;;;;;;;;AAgBA,aAASE,iBAAT,CAA2BC,KAA3B,EAAkCC,KAAlC,EAAyC;AACvC,UAAIC,SAASF,SAAS,IAAT,GAAgB,CAAhB,GAAoBA,MAAME,MAAvC;AACA,UAAIA,MAAJ,EAAY;AACV,YAAIC,QAAQP,gBAAgBI,KAAhB,EAAuBC,KAAvB,EAA8B,IAA9B,IAAsC,CAAlD;AACA,YAAIH,GAAGE,MAAMG,KAAN,CAAH,EAAiBF,KAAjB,CAAJ,EAA6B;AAC3B,iBAAOE,KAAP;AACD;AACF;AACD,aAAO,CAAC,CAAR;AACD;;AAEDC,WAAOC,OAAP,GAAiBN,iBAAjB","file":"sortedLastIndexOf.js","sourcesContent":["var baseSortedIndex = require('./_baseSortedIndex'),\n    eq = require('./eq');\n\n/**\n * This method is like `_.lastIndexOf` except that it performs a binary\n * search on a sorted `array`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n * @example\n *\n * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);\n * // => 3\n */\nfunction sortedLastIndexOf(array, value) {\n  var length = array == null ? 0 : array.length;\n  if (length) {\n    var index = baseSortedIndex(array, value, true) - 1;\n    if (eq(array[index], value)) {\n      return index;\n    }\n  }\n  return -1;\n}\n\nmodule.exports = sortedLastIndexOf;\n"]}