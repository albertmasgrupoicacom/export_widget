{"version":3,"sources":["create.js"],"names":["baseAssign","require","baseCreate","create","prototype","properties","result","module","exports"],"mappings":";;;;AAAA,QAAIA,aAAaC,QAAQ,eAAR,CAAjB;AAAA,QACIC,aAAaD,QAAQ,eAAR,CADjB;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA,aAASE,MAAT,CAAgBC,SAAhB,EAA2BC,UAA3B,EAAuC;AACrC,UAAIC,SAASJ,WAAWE,SAAX,CAAb;AACA,aAAOC,cAAc,IAAd,GAAqBC,MAArB,GAA8BN,WAAWM,MAAX,EAAmBD,UAAnB,CAArC;AACD;;AAEDE,WAAOC,OAAP,GAAiBL,MAAjB","file":"create.js","sourcesContent":["var baseAssign = require('./_baseAssign'),\n    baseCreate = require('./_baseCreate');\n\n/**\n * Creates an object that inherits from the `prototype` object. If a\n * `properties` object is given, its own enumerable string keyed properties\n * are assigned to the created object.\n *\n * @static\n * @memberOf _\n * @since 2.3.0\n * @category Object\n * @param {Object} prototype The object to inherit from.\n * @param {Object} [properties] The properties to assign to the object.\n * @returns {Object} Returns the new object.\n * @example\n *\n * function Shape() {\n *   this.x = 0;\n *   this.y = 0;\n * }\n *\n * function Circle() {\n *   Shape.call(this);\n * }\n *\n * Circle.prototype = _.create(Shape.prototype, {\n *   'constructor': Circle\n * });\n *\n * var circle = new Circle;\n * circle instanceof Circle;\n * // => true\n *\n * circle instanceof Shape;\n * // => true\n */\nfunction create(prototype, properties) {\n  var result = baseCreate(prototype);\n  return properties == null ? result : baseAssign(result, properties);\n}\n\nmodule.exports = create;\n"]}