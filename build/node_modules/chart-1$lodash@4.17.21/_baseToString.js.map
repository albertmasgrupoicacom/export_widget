{"version":3,"sources":["_baseToString.js"],"names":["Symbol","require","arrayMap","isArray","isSymbol","INFINITY","symbolProto","prototype","undefined","symbolToString","toString","baseToString","value","call","result","module","exports"],"mappings":";;;;AAAA,QAAIA,SAASC,QAAQ,WAAR,CAAb;AAAA,QACIC,WAAWD,QAAQ,aAAR,CADf;AAAA,QAEIE,UAAUF,QAAQ,WAAR,CAFd;AAAA,QAGIG,WAAWH,QAAQ,YAAR,CAHf;;AAKA;AACA,QAAII,WAAW,IAAI,CAAnB;;AAEA;AACA,QAAIC,cAAcN,SAASA,OAAOO,SAAhB,GAA4BC,SAA9C;AAAA,QACIC,iBAAiBH,cAAcA,YAAYI,QAA1B,GAAqCF,SAD1D;;AAGA;;;;;;;;AAQA,aAASG,YAAT,CAAsBC,KAAtB,EAA6B;AAC3B;AACA,UAAI,OAAOA,KAAP,IAAgB,QAApB,EAA8B;AAC5B,eAAOA,KAAP;AACD;AACD,UAAIT,QAAQS,KAAR,CAAJ,EAAoB;AAClB;AACA,eAAOV,SAASU,KAAT,EAAgBD,YAAhB,IAAgC,EAAvC;AACD;AACD,UAAIP,SAASQ,KAAT,CAAJ,EAAqB;AACnB,eAAOH,iBAAiBA,eAAeI,IAAf,CAAoBD,KAApB,CAAjB,GAA8C,EAArD;AACD;AACD,UAAIE,SAAUF,QAAQ,EAAtB;AACA,aAAQE,UAAU,GAAV,IAAkB,IAAIF,KAAL,IAAe,CAACP,QAAlC,GAA8C,IAA9C,GAAqDS,MAA5D;AACD;;AAEDC,WAAOC,OAAP,GAAiBL,YAAjB","file":"_baseToString.js","sourcesContent":["var Symbol = require('./_Symbol'),\n    arrayMap = require('./_arrayMap'),\n    isArray = require('./isArray'),\n    isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nmodule.exports = baseToString;\n"]}