{"version":3,"sources":["_composeArgsRight.js"],"names":["nativeMax","Math","max","composeArgsRight","args","partials","holders","isCurried","argsIndex","argsLength","length","holdersIndex","holdersLength","rightIndex","rightLength","rangeLength","result","Array","offset","module","exports"],"mappings":";;;;AAAA;AACA,QAAIA,YAAYC,KAAKC,GAArB;;AAEA;;;;;;;;;;;AAWA,aAASC,gBAAT,CAA0BC,IAA1B,EAAgCC,QAAhC,EAA0CC,OAA1C,EAAmDC,SAAnD,EAA8D;AAC5D,UAAIC,YAAY,CAAC,CAAjB;AAAA,UACIC,aAAaL,KAAKM,MADtB;AAAA,UAEIC,eAAe,CAAC,CAFpB;AAAA,UAGIC,gBAAgBN,QAAQI,MAH5B;AAAA,UAIIG,aAAa,CAAC,CAJlB;AAAA,UAKIC,cAAcT,SAASK,MAL3B;AAAA,UAMIK,cAAcf,UAAUS,aAAaG,aAAvB,EAAsC,CAAtC,CANlB;AAAA,UAOII,SAASC,MAAMF,cAAcD,WAApB,CAPb;;AAUA,aAAO,EAAEN,SAAF,GAAcO,WAArB,EAAkC;AAChCC,eAAOR,SAAP,IAAoBJ,KAAKI,SAAL,CAApB;AACD;AACD,UAAIU,SAASV,SAAb;AACA,aAAO,EAAEK,UAAF,GAAeC,WAAtB,EAAmC;AACjCE,eAAOE,SAASL,UAAhB,IAA8BR,SAASQ,UAAT,CAA9B;AACD;AACD,aAAO,EAAEF,YAAF,GAAiBC,aAAxB,EAAuC;AACrC,YAVgB,CAACL,SAUb,IAAeC,YAAYC,UAA/B,EAA2C;AACzCO,iBAAOE,SAASZ,QAAQK,YAAR,CAAhB,IAAyCP,KAAKI,WAAL,CAAzC;AACD;AACF;AACD,aAAOQ,MAAP;AACD;;AAEDG,WAAOC,OAAP,GAAiBjB,gBAAjB","file":"_composeArgsRight.js","sourcesContent":["/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * This function is like `composeArgs` except that the arguments composition\n * is tailored for `_.partialRight`.\n *\n * @private\n * @param {Array} args The provided arguments.\n * @param {Array} partials The arguments to append to those provided.\n * @param {Array} holders The `partials` placeholder indexes.\n * @params {boolean} [isCurried] Specify composing for a curried function.\n * @returns {Array} Returns the new array of composed arguments.\n */\nfunction composeArgsRight(args, partials, holders, isCurried) {\n  var argsIndex = -1,\n      argsLength = args.length,\n      holdersIndex = -1,\n      holdersLength = holders.length,\n      rightIndex = -1,\n      rightLength = partials.length,\n      rangeLength = nativeMax(argsLength - holdersLength, 0),\n      result = Array(rangeLength + rightLength),\n      isUncurried = !isCurried;\n\n  while (++argsIndex < rangeLength) {\n    result[argsIndex] = args[argsIndex];\n  }\n  var offset = argsIndex;\n  while (++rightIndex < rightLength) {\n    result[offset + rightIndex] = partials[rightIndex];\n  }\n  while (++holdersIndex < holdersLength) {\n    if (isUncurried || argsIndex < argsLength) {\n      result[offset + holders[holdersIndex]] = args[argsIndex++];\n    }\n  }\n  return result;\n}\n\nmodule.exports = composeArgsRight;\n"]}