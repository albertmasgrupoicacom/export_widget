{"version":3,"sources":["_baseFindIndex.js"],"names":["baseFindIndex","array","predicate","fromIndex","fromRight","length","index","module","exports"],"mappings":";;;;AAAA;;;;;;;;;;;AAWA,aAASA,aAAT,CAAuBC,KAAvB,EAA8BC,SAA9B,EAAyCC,SAAzC,EAAoDC,SAApD,EAA+D;AAC7D,UAAIC,SAASJ,MAAMI,MAAnB;AAAA,UACIC,QAAQH,aAAaC,YAAY,CAAZ,GAAgB,CAAC,CAA9B,CADZ;;AAGA,aAAQA,YAAYE,OAAZ,GAAsB,EAAEA,KAAF,GAAUD,MAAxC,EAAiD;AAC/C,YAAIH,UAAUD,MAAMK,KAAN,CAAV,EAAwBA,KAAxB,EAA+BL,KAA/B,CAAJ,EAA2C;AACzC,iBAAOK,KAAP;AACD;AACF;AACD,aAAO,CAAC,CAAR;AACD;;AAEDC,WAAOC,OAAP,GAAiBR,aAAjB","file":"_baseFindIndex.js","sourcesContent":["/**\n * The base implementation of `_.findIndex` and `_.findLastIndex` without\n * support for iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Function} predicate The function invoked per iteration.\n * @param {number} fromIndex The index to search from.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseFindIndex(array, predicate, fromIndex, fromRight) {\n  var length = array.length,\n      index = fromIndex + (fromRight ? 1 : -1);\n\n  while ((fromRight ? index-- : ++index < length)) {\n    if (predicate(array[index], index, array)) {\n      return index;\n    }\n  }\n  return -1;\n}\n\nmodule.exports = baseFindIndex;\n"]}