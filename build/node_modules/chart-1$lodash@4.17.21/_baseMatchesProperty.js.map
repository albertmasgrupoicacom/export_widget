{"version":3,"sources":["_baseMatchesProperty.js"],"names":["baseIsEqual","require","get","hasIn","isKey","isStrictComparable","matchesStrictComparable","toKey","COMPARE_PARTIAL_FLAG","COMPARE_UNORDERED_FLAG","baseMatchesProperty","path","srcValue","object","objValue","undefined","module","exports"],"mappings":";;;;AAAA,QAAIA,cAAcC,QAAQ,gBAAR,CAAlB;AAAA,QACIC,MAAMD,QAAQ,OAAR,CADV;AAAA,QAEIE,QAAQF,QAAQ,SAAR,CAFZ;AAAA,QAGIG,QAAQH,QAAQ,UAAR,CAHZ;AAAA,QAIII,qBAAqBJ,QAAQ,uBAAR,CAJzB;AAAA,QAKIK,0BAA0BL,QAAQ,4BAAR,CAL9B;AAAA,QAMIM,QAAQN,QAAQ,UAAR,CANZ;;AAQA;AACA,QAAIO,uBAAuB,CAA3B;AAAA,QACIC,yBAAyB,CAD7B;;AAGA;;;;;;;;AAQA,aAASC,mBAAT,CAA6BC,IAA7B,EAAmCC,QAAnC,EAA6C;AAC3C,UAAIR,MAAMO,IAAN,KAAeN,mBAAmBO,QAAnB,CAAnB,EAAiD;AAC/C,eAAON,wBAAwBC,MAAMI,IAAN,CAAxB,EAAqCC,QAArC,CAAP;AACD;AACD,aAAO,UAASC,MAAT,EAAiB;AACtB,YAAIC,WAAWZ,IAAIW,MAAJ,EAAYF,IAAZ,CAAf;AACA,eAAQG,aAAaC,SAAb,IAA0BD,aAAaF,QAAxC,GACHT,MAAMU,MAAN,EAAcF,IAAd,CADG,GAEHX,YAAYY,QAAZ,EAAsBE,QAAtB,EAAgCN,uBAAuBC,sBAAvD,CAFJ;AAGD,OALD;AAMD;;AAEDO,WAAOC,OAAP,GAAiBP,mBAAjB","file":"_baseMatchesProperty.js","sourcesContent":["var baseIsEqual = require('./_baseIsEqual'),\n    get = require('./get'),\n    hasIn = require('./hasIn'),\n    isKey = require('./_isKey'),\n    isStrictComparable = require('./_isStrictComparable'),\n    matchesStrictComparable = require('./_matchesStrictComparable'),\n    toKey = require('./_toKey');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n *\n * @private\n * @param {string} path The path of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatchesProperty(path, srcValue) {\n  if (isKey(path) && isStrictComparable(srcValue)) {\n    return matchesStrictComparable(toKey(path), srcValue);\n  }\n  return function(object) {\n    var objValue = get(object, path);\n    return (objValue === undefined && objValue === srcValue)\n      ? hasIn(object, path)\n      : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);\n  };\n}\n\nmodule.exports = baseMatchesProperty;\n"]}