{"version":3,"sources":["_equalObjects.js"],"names":["getAllKeys","require","COMPARE_PARTIAL_FLAG","objectProto","Object","prototype","hasOwnProperty","equalObjects","object","other","bitmask","customizer","equalFunc","stack","isPartial","objProps","objLength","length","othProps","othLength","index","key","call","objStacked","get","othStacked","result","set","skipCtor","objValue","othValue","compared","undefined","objCtor","constructor","othCtor","module","exports"],"mappings":";;;;AAAA,QAAIA,aAAaC,QAAQ,eAAR,CAAjB;;AAEA;AACA,QAAIC,uBAAuB,CAA3B;;AAEA;AACA,QAAIC,cAAcC,OAAOC,SAAzB;;AAEA;AACA,QAAIC,iBAAiBH,YAAYG,cAAjC;;AAEA;;;;;;;;;;;;;AAaA,aAASC,YAAT,CAAsBC,MAAtB,EAA8BC,KAA9B,EAAqCC,OAArC,EAA8CC,UAA9C,EAA0DC,SAA1D,EAAqEC,KAArE,EAA4E;AAC1E,UAAIC,YAAYJ,UAAUR,oBAA1B;AAAA,UACIa,WAAWf,WAAWQ,MAAX,CADf;AAAA,UAEIQ,YAAYD,SAASE,MAFzB;AAAA,UAGIC,WAAWlB,WAAWS,KAAX,CAHf;AAAA,UAIIU,YAAYD,SAASD,MAJzB;;AAMA,UAAID,aAAaG,SAAb,IAA0B,CAACL,SAA/B,EAA0C;AACxC,eAAO,KAAP;AACD;AACD,UAAIM,QAAQJ,SAAZ;AACA,aAAOI,OAAP,EAAgB;AACd,YAAIC,MAAMN,SAASK,KAAT,CAAV;AACA,YAAI,EAAEN,YAAYO,OAAOZ,KAAnB,GAA2BH,eAAegB,IAAf,CAAoBb,KAApB,EAA2BY,GAA3B,CAA7B,CAAJ,EAAmE;AACjE,iBAAO,KAAP;AACD;AACF;AACD;AACA,UAAIE,aAAaV,MAAMW,GAAN,CAAUhB,MAAV,CAAjB;AACA,UAAIiB,aAAaZ,MAAMW,GAAN,CAAUf,KAAV,CAAjB;AACA,UAAIc,cAAcE,UAAlB,EAA8B;AAC5B,eAAOF,cAAcd,KAAd,IAAuBgB,cAAcjB,MAA5C;AACD;AACD,UAAIkB,SAAS,IAAb;AACAb,YAAMc,GAAN,CAAUnB,MAAV,EAAkBC,KAAlB;AACAI,YAAMc,GAAN,CAAUlB,KAAV,EAAiBD,MAAjB;;AAEA,UAAIoB,WAAWd,SAAf;AACA,aAAO,EAAEM,KAAF,GAAUJ,SAAjB,EAA4B;AAC1BK,cAAMN,SAASK,KAAT,CAAN;AACA,YAAIS,WAAWrB,OAAOa,GAAP,CAAf;AAAA,YACIS,WAAWrB,MAAMY,GAAN,CADf;;AAGA,YAAIV,UAAJ,EAAgB;AACd,cAAIoB,WAAWjB,YACXH,WAAWmB,QAAX,EAAqBD,QAArB,EAA+BR,GAA/B,EAAoCZ,KAApC,EAA2CD,MAA3C,EAAmDK,KAAnD,CADW,GAEXF,WAAWkB,QAAX,EAAqBC,QAArB,EAA+BT,GAA/B,EAAoCb,MAApC,EAA4CC,KAA5C,EAAmDI,KAAnD,CAFJ;AAGD;AACD;AACA,YAAI,EAAEkB,aAAaC,SAAb,GACGH,aAAaC,QAAb,IAAyBlB,UAAUiB,QAAV,EAAoBC,QAApB,EAA8BpB,OAA9B,EAAuCC,UAAvC,EAAmDE,KAAnD,CAD5B,GAEEkB,QAFJ,CAAJ,EAGO;AACLL,mBAAS,KAAT;AACA;AACD;AACDE,qBAAaA,WAAWP,OAAO,aAA/B;AACD;AACD,UAAIK,UAAU,CAACE,QAAf,EAAyB;AACvB,YAAIK,UAAUzB,OAAO0B,WAArB;AAAA,YACIC,UAAU1B,MAAMyB,WADpB;;AAGA;AACA,YAAID,WAAWE,OAAX,IACC,iBAAiB3B,MAAjB,IAA2B,iBAAiBC,KAD7C,IAEA,EAAE,OAAOwB,OAAP,IAAkB,UAAlB,IAAgCA,mBAAmBA,OAAnD,IACA,OAAOE,OAAP,IAAkB,UADlB,IACgCA,mBAAmBA,OADrD,CAFJ,EAGmE;AACjET,mBAAS,KAAT;AACD;AACF;AACDb,YAAM,QAAN,EAAgBL,MAAhB;AACAK,YAAM,QAAN,EAAgBJ,KAAhB;AACA,aAAOiB,MAAP;AACD;;AAEDU,WAAOC,OAAP,GAAiB9B,YAAjB","file":"_equalObjects.js","sourcesContent":["var getAllKeys = require('./_getAllKeys');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1;\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Check that cyclic values are equal.\n  var objStacked = stack.get(object);\n  var othStacked = stack.get(other);\n  if (objStacked && othStacked) {\n    return objStacked == other && othStacked == object;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\nmodule.exports = equalObjects;\n"]}