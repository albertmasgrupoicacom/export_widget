{"version":3,"sources":["_baseMergeDeep.js"],"names":["assignMergeValue","require","cloneBuffer","cloneTypedArray","copyArray","initCloneObject","isArguments","isArray","isArrayLikeObject","isBuffer","isFunction","isObject","isPlainObject","isTypedArray","safeGet","toPlainObject","baseMergeDeep","object","source","key","srcIndex","mergeFunc","customizer","stack","objValue","srcValue","stacked","get","newValue","undefined","isCommon","isArr","isBuff","isTyped","set","module","exports"],"mappings":"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","file":"_baseMergeDeep.js","sourcesContent":["var assignMergeValue = require('./_assignMergeValue'),\n    cloneBuffer = require('./_cloneBuffer'),\n    cloneTypedArray = require('./_cloneTypedArray'),\n    copyArray = require('./_copyArray'),\n    initCloneObject = require('./_initCloneObject'),\n    isArguments = require('./isArguments'),\n    isArray = require('./isArray'),\n    isArrayLikeObject = require('./isArrayLikeObject'),\n    isBuffer = require('./isBuffer'),\n    isFunction = require('./isFunction'),\n    isObject = require('./isObject'),\n    isPlainObject = require('./isPlainObject'),\n    isTypedArray = require('./isTypedArray'),\n    safeGet = require('./_safeGet'),\n    toPlainObject = require('./toPlainObject');\n\n/**\n * A specialized version of `baseMerge` for arrays and objects which performs\n * deep merges and tracks traversed objects enabling objects with circular\n * references to be merged.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @param {string} key The key of the value to merge.\n * @param {number} srcIndex The index of `source`.\n * @param {Function} mergeFunc The function to merge values.\n * @param {Function} [customizer] The function to customize assigned values.\n * @param {Object} [stack] Tracks traversed source values and their merged\n *  counterparts.\n */\nfunction baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\n  var objValue = safeGet(object, key),\n      srcValue = safeGet(source, key),\n      stacked = stack.get(srcValue);\n\n  if (stacked) {\n    assignMergeValue(object, key, stacked);\n    return;\n  }\n  var newValue = customizer\n    ? customizer(objValue, srcValue, (key + ''), object, source, stack)\n    : undefined;\n\n  var isCommon = newValue === undefined;\n\n  if (isCommon) {\n    var isArr = isArray(srcValue),\n        isBuff = !isArr && isBuffer(srcValue),\n        isTyped = !isArr && !isBuff && isTypedArray(srcValue);\n\n    newValue = srcValue;\n    if (isArr || isBuff || isTyped) {\n      if (isArray(objValue)) {\n        newValue = objValue;\n      }\n      else if (isArrayLikeObject(objValue)) {\n        newValue = copyArray(objValue);\n      }\n      else if (isBuff) {\n        isCommon = false;\n        newValue = cloneBuffer(srcValue, true);\n      }\n      else if (isTyped) {\n        isCommon = false;\n        newValue = cloneTypedArray(srcValue, true);\n      }\n      else {\n        newValue = [];\n      }\n    }\n    else if (isPlainObject(srcValue) || isArguments(srcValue)) {\n      newValue = objValue;\n      if (isArguments(objValue)) {\n        newValue = toPlainObject(objValue);\n      }\n      else if (!isObject(objValue) || isFunction(objValue)) {\n        newValue = initCloneObject(srcValue);\n      }\n    }\n    else {\n      isCommon = false;\n    }\n  }\n  if (isCommon) {\n    // Recursively merge objects and arrays (susceptible to call stack limits).\n    stack.set(srcValue, newValue);\n    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);\n    stack['delete'](srcValue);\n  }\n  assignMergeValue(object, key, newValue);\n}\n\nmodule.exports = baseMergeDeep;\n"]}