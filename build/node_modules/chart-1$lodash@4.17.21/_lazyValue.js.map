{"version":3,"sources":["_lazyValue.js"],"names":["baseWrapperValue","require","getView","isArray","LAZY_FILTER_FLAG","LAZY_MAP_FLAG","nativeMin","Math","min","lazyValue","array","__wrapped__","value","dir","__dir__","isArr","isRight","arrLength","length","view","__views__","start","end","index","iteratees","__iteratees__","iterLength","resIndex","takeCount","__takeCount__","__actions__","result","outer","iterIndex","data","iteratee","type","computed","module","exports"],"mappings":";;;;AAAA,QAAIA,mBAAmBC,QAAQ,qBAAR,CAAvB;AAAA,QACIC,UAAUD,QAAQ,YAAR,CADd;AAAA,QAEIE,UAAUF,QAAQ,WAAR,CAFd;;AAIA;AACA,QAAIG,mBAAmB,CAAvB;AAAA,QACIC,gBAAgB,CADpB;;AAGA;AACA,QAAIC,YAAYC,KAAKC,GAArB;;AAEA;;;;;;;;AAQA,aAASC,SAAT,GAAqB;AACnB,UAAIC,QAAQ,KAAKC,WAAL,CAAiBC,KAAjB,EAAZ;AAAA,UACIC,MAAM,KAAKC,OADf;AAAA,UAEIC,QAAQZ,QAAQO,KAAR,CAFZ;AAAA,UAGIM,UAAUH,MAAM,CAHpB;AAAA,UAIII,YAAYF,QAAQL,MAAMQ,MAAd,GAAuB,CAJvC;AAAA,UAKIC,OAAOjB,QAAQ,CAAR,EAAWe,SAAX,EAAsB,KAAKG,SAA3B,CALX;AAAA,UAMIC,QAAQF,KAAKE,KANjB;AAAA,UAOIC,MAAMH,KAAKG,GAPf;AAAA,UAQIJ,SAASI,MAAMD,KARnB;AAAA,UASIE,QAAQP,UAAUM,GAAV,GAAiBD,QAAQ,CATrC;AAAA,UAUIG,YAAY,KAAKC,aAVrB;AAAA,UAWIC,aAAaF,UAAUN,MAX3B;AAAA,UAYIS,WAAW,CAZf;AAAA,UAaIC,YAAYtB,UAAUY,MAAV,EAAkB,KAAKW,aAAvB,CAbhB;;AAeA,UAAI,CAACd,KAAD,IAAW,CAACC,OAAD,IAAYC,aAAaC,MAAzB,IAAmCU,aAAaV,MAA/D,EAAwE;AACtE,eAAOlB,iBAAiBU,KAAjB,EAAwB,KAAKoB,WAA7B,CAAP;AACD;AACD,UAAIC,SAAS,EAAb;;AAEAC,aACA,OAAOd,YAAYS,WAAWC,SAA9B,EAAyC;AACvCL,iBAASV,GAAT;;AAEA,YAAIoB,YAAY,CAAC,CAAjB;AAAA,YACIrB,QAAQF,MAAMa,KAAN,CADZ;;AAGA,eAAO,EAAEU,SAAF,GAAcP,UAArB,EAAiC;AAC/B,cAAIQ,OAAOV,UAAUS,SAAV,CAAX;AAAA,cACIE,WAAWD,KAAKC,QADpB;AAAA,cAEIC,OAAOF,KAAKE,IAFhB;AAAA,cAGIC,WAAWF,SAASvB,KAAT,CAHf;;AAKA,cAAIwB,QAAQ/B,aAAZ,EAA2B;AACzBO,oBAAQyB,QAAR;AACD,WAFD,MAEO,IAAI,CAACA,QAAL,EAAe;AACpB,gBAAID,QAAQhC,gBAAZ,EAA8B;AAC5B,uBAAS4B,KAAT;AACD,aAFD,MAEO;AACL,oBAAMA,KAAN;AACD;AACF;AACF;AACDD,eAAOJ,UAAP,IAAqBf,KAArB;AACD;AACD,aAAOmB,MAAP;AACD;;AAEDO,WAAOC,OAAP,GAAiB9B,SAAjB","file":"_lazyValue.js","sourcesContent":["var baseWrapperValue = require('./_baseWrapperValue'),\n    getView = require('./_getView'),\n    isArray = require('./isArray');\n\n/** Used to indicate the type of lazy iteratees. */\nvar LAZY_FILTER_FLAG = 1,\n    LAZY_MAP_FLAG = 2;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min;\n\n/**\n * Extracts the unwrapped value from its lazy wrapper.\n *\n * @private\n * @name value\n * @memberOf LazyWrapper\n * @returns {*} Returns the unwrapped value.\n */\nfunction lazyValue() {\n  var array = this.__wrapped__.value(),\n      dir = this.__dir__,\n      isArr = isArray(array),\n      isRight = dir < 0,\n      arrLength = isArr ? array.length : 0,\n      view = getView(0, arrLength, this.__views__),\n      start = view.start,\n      end = view.end,\n      length = end - start,\n      index = isRight ? end : (start - 1),\n      iteratees = this.__iteratees__,\n      iterLength = iteratees.length,\n      resIndex = 0,\n      takeCount = nativeMin(length, this.__takeCount__);\n\n  if (!isArr || (!isRight && arrLength == length && takeCount == length)) {\n    return baseWrapperValue(array, this.__actions__);\n  }\n  var result = [];\n\n  outer:\n  while (length-- && resIndex < takeCount) {\n    index += dir;\n\n    var iterIndex = -1,\n        value = array[index];\n\n    while (++iterIndex < iterLength) {\n      var data = iteratees[iterIndex],\n          iteratee = data.iteratee,\n          type = data.type,\n          computed = iteratee(value);\n\n      if (type == LAZY_MAP_FLAG) {\n        value = computed;\n      } else if (!computed) {\n        if (type == LAZY_FILTER_FLAG) {\n          continue outer;\n        } else {\n          break outer;\n        }\n      }\n    }\n    result[resIndex++] = value;\n  }\n  return result;\n}\n\nmodule.exports = lazyValue;\n"]}