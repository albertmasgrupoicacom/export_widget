{"version":3,"sources":["toArray.js"],"names":["Symbol","require","copyArray","getTag","isArrayLike","isString","iteratorToArray","mapToArray","setToArray","stringToArray","values","mapTag","setTag","symIterator","iterator","undefined","toArray","value","tag","func","module","exports"],"mappings":";;;;AAAA,QAAIA,SAASC,QAAQ,WAAR,CAAb;AAAA,QACIC,YAAYD,QAAQ,cAAR,CADhB;AAAA,QAEIE,SAASF,QAAQ,WAAR,CAFb;AAAA,QAGIG,cAAcH,QAAQ,eAAR,CAHlB;AAAA,QAIII,WAAWJ,QAAQ,YAAR,CAJf;AAAA,QAKIK,kBAAkBL,QAAQ,oBAAR,CALtB;AAAA,QAMIM,aAAaN,QAAQ,eAAR,CANjB;AAAA,QAOIO,aAAaP,QAAQ,eAAR,CAPjB;AAAA,QAQIQ,gBAAgBR,QAAQ,kBAAR,CARpB;AAAA,QASIS,SAAST,QAAQ,UAAR,CATb;;AAWA;AACA,QAAIU,SAAS,cAAb;AAAA,QACIC,SAAS,cADb;;AAGA;AACA,QAAIC,cAAcb,SAASA,OAAOc,QAAhB,GAA2BC,SAA7C;;AAEA;;;;;;;;;;;;;;;;;;;;;;;AAuBA,aAASC,OAAT,CAAiBC,KAAjB,EAAwB;AACtB,UAAI,CAACA,KAAL,EAAY;AACV,eAAO,EAAP;AACD;AACD,UAAIb,YAAYa,KAAZ,CAAJ,EAAwB;AACtB,eAAOZ,SAASY,KAAT,IAAkBR,cAAcQ,KAAd,CAAlB,GAAyCf,UAAUe,KAAV,CAAhD;AACD;AACD,UAAIJ,eAAeI,MAAMJ,WAAN,CAAnB,EAAuC;AACrC,eAAOP,gBAAgBW,MAAMJ,WAAN,GAAhB,CAAP;AACD;AACD,UAAIK,MAAMf,OAAOc,KAAP,CAAV;AAAA,UACIE,OAAOD,OAAOP,MAAP,GAAgBJ,UAAhB,GAA8BW,OAAON,MAAP,GAAgBJ,UAAhB,GAA6BE,MADtE;;AAGA,aAAOS,KAAKF,KAAL,CAAP;AACD;;AAEDG,WAAOC,OAAP,GAAiBL,OAAjB","file":"toArray.js","sourcesContent":["var Symbol = require('./_Symbol'),\n    copyArray = require('./_copyArray'),\n    getTag = require('./_getTag'),\n    isArrayLike = require('./isArrayLike'),\n    isString = require('./isString'),\n    iteratorToArray = require('./_iteratorToArray'),\n    mapToArray = require('./_mapToArray'),\n    setToArray = require('./_setToArray'),\n    stringToArray = require('./_stringToArray'),\n    values = require('./values');\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]',\n    setTag = '[object Set]';\n\n/** Built-in value references. */\nvar symIterator = Symbol ? Symbol.iterator : undefined;\n\n/**\n * Converts `value` to an array.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {Array} Returns the converted array.\n * @example\n *\n * _.toArray({ 'a': 1, 'b': 2 });\n * // => [1, 2]\n *\n * _.toArray('abc');\n * // => ['a', 'b', 'c']\n *\n * _.toArray(1);\n * // => []\n *\n * _.toArray(null);\n * // => []\n */\nfunction toArray(value) {\n  if (!value) {\n    return [];\n  }\n  if (isArrayLike(value)) {\n    return isString(value) ? stringToArray(value) : copyArray(value);\n  }\n  if (symIterator && value[symIterator]) {\n    return iteratorToArray(value[symIterator]());\n  }\n  var tag = getTag(value),\n      func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);\n\n  return func(value);\n}\n\nmodule.exports = toArray;\n"]}