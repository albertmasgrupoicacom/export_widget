{"version":3,"sources":["unzipWith.js"],"names":["apply","require","arrayMap","unzip","unzipWith","array","iteratee","length","result","group","undefined","module","exports"],"mappings":";;;;AAAA,QAAIA,QAAQC,QAAQ,UAAR,CAAZ;AAAA,QACIC,WAAWD,QAAQ,aAAR,CADf;AAAA,QAEIE,QAAQF,QAAQ,SAAR,CAFZ;;AAIA;;;;;;;;;;;;;;;;;;;;;AAqBA,aAASG,SAAT,CAAmBC,KAAnB,EAA0BC,QAA1B,EAAoC;AAClC,UAAI,EAAED,SAASA,MAAME,MAAjB,CAAJ,EAA8B;AAC5B,eAAO,EAAP;AACD;AACD,UAAIC,SAASL,MAAME,KAAN,CAAb;AACA,UAAIC,YAAY,IAAhB,EAAsB;AACpB,eAAOE,MAAP;AACD;AACD,aAAON,SAASM,MAAT,EAAiB,UAASC,KAAT,EAAgB;AACtC,eAAOT,MAAMM,QAAN,EAAgBI,SAAhB,EAA2BD,KAA3B,CAAP;AACD,OAFM,CAAP;AAGD;;AAEDE,WAAOC,OAAP,GAAiBR,SAAjB","file":"unzipWith.js","sourcesContent":["var apply = require('./_apply'),\n    arrayMap = require('./_arrayMap'),\n    unzip = require('./unzip');\n\n/**\n * This method is like `_.unzip` except that it accepts `iteratee` to specify\n * how regrouped values should be combined. The iteratee is invoked with the\n * elements of each group: (...group).\n *\n * @static\n * @memberOf _\n * @since 3.8.0\n * @category Array\n * @param {Array} array The array of grouped elements to process.\n * @param {Function} [iteratee=_.identity] The function to combine\n *  regrouped values.\n * @returns {Array} Returns the new array of regrouped elements.\n * @example\n *\n * var zipped = _.zip([1, 2], [10, 20], [100, 200]);\n * // => [[1, 10, 100], [2, 20, 200]]\n *\n * _.unzipWith(zipped, _.add);\n * // => [3, 30, 300]\n */\nfunction unzipWith(array, iteratee) {\n  if (!(array && array.length)) {\n    return [];\n  }\n  var result = unzip(array);\n  if (iteratee == null) {\n    return result;\n  }\n  return arrayMap(result, function(group) {\n    return apply(iteratee, undefined, group);\n  });\n}\n\nmodule.exports = unzipWith;\n"]}