{"version":3,"sources":["invokeMap.js"],"names":["apply","require","baseEach","baseInvoke","baseRest","isArrayLike","invokeMap","collection","path","args","index","result","Array","length","value","module","exports"],"mappings":";;;;AAAA,YAAIA,QAAQC,QAAQ,UAAR,CAAZ;AAAA,YACIC,WAAWD,QAAQ,aAAR,CADf;AAAA,YAEIE,aAAaF,QAAQ,eAAR,CAFjB;AAAA,YAGIG,WAAWH,QAAQ,aAAR,CAHf;AAAA,YAIII,cAAcJ,QAAQ,eAAR,CAJlB;;AAMA;;;;;;;;;;;;;;;;;;;;;;;AAuBA,YAAIK,YAAYF,SAAS,UAASG,UAAT,EAAqBC,IAArB,EAA2BC,IAA3B,EAAiC;AACxD,gBAAIC,QAAQ,CAAC,CAAb;AAAA,gBAEIC,SAASN,YAAYE,UAAZ,IAA0BK,MAAML,WAAWM,MAAjB,CAA1B,GAAqD,EAFlE;;AAIAX,qBAASK,UAAT,EAAqB,UAASO,KAAT,EAAgB;AACnCH,uBAAO,EAAED,KAAT,IAJW,OAAOF,IAAP,IAAe,UAIR,GAASR,MAAMQ,IAAN,EAAYM,KAAZ,EAAmBL,IAAnB,CAAT,GAAoCN,WAAWW,KAAX,EAAkBN,IAAlB,EAAwBC,IAAxB,CAAtD;AACD,aAFD;AAGA,mBAAOE,MAAP;AACD,SATe,CAAhB;;AAWAI,eAAOC,OAAP,GAAiBV,SAAjB","file":"invokeMap.js","sourcesContent":["var apply = require('./_apply'),\n    baseEach = require('./_baseEach'),\n    baseInvoke = require('./_baseInvoke'),\n    baseRest = require('./_baseRest'),\n    isArrayLike = require('./isArrayLike');\n\n/**\n * Invokes the method at `path` of each element in `collection`, returning\n * an array of the results of each invoked method. Any additional arguments\n * are provided to each invoked method. If `path` is a function, it's invoked\n * for, and `this` bound to, each element in `collection`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Array|Function|string} path The path of the method to invoke or\n *  the function invoked per iteration.\n * @param {...*} [args] The arguments to invoke each method with.\n * @returns {Array} Returns the array of results.\n * @example\n *\n * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');\n * // => [[1, 5, 7], [1, 2, 3]]\n *\n * _.invokeMap([123, 456], String.prototype.split, '');\n * // => [['1', '2', '3'], ['4', '5', '6']]\n */\nvar invokeMap = baseRest(function(collection, path, args) {\n  var index = -1,\n      isFunc = typeof path == 'function',\n      result = isArrayLike(collection) ? Array(collection.length) : [];\n\n  baseEach(collection, function(value) {\n    result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);\n  });\n  return result;\n});\n\nmodule.exports = invokeMap;\n"]}