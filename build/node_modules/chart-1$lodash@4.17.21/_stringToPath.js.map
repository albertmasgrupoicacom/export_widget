{"version":3,"sources":["_stringToPath.js"],"names":["memoizeCapped","require","rePropName","reEscapeChar","stringToPath","string","result","charCodeAt","push","replace","match","number","quote","subString","module","exports"],"mappings":";;;;AAAA,QAAIA,gBAAgBC,QAAQ,kBAAR,CAApB;;AAEA;AACA,QAAIC,aAAa,kGAAjB;;AAEA;AACA,QAAIC,eAAe,UAAnB;;AAEA;;;;;;;AAOA,QAAIC,eAAeJ,cAAc,UAASK,MAAT,EAAiB;AAChD,UAAIC,SAAS,EAAb;AACA,UAAID,OAAOE,UAAP,CAAkB,CAAlB,MAAyB,EAA7B,CAAgC,OAAhC,EAAyC;AACvCD,iBAAOE,IAAP,CAAY,EAAZ;AACD;AACDH,aAAOI,OAAP,CAAeP,UAAf,EAA2B,UAASQ,KAAT,EAAgBC,MAAhB,EAAwBC,KAAxB,EAA+BC,SAA/B,EAA0C;AACnEP,eAAOE,IAAP,CAAYI,QAAQC,UAAUJ,OAAV,CAAkBN,YAAlB,EAAgC,IAAhC,CAAR,GAAiDQ,UAAUD,KAAvE;AACD,OAFD;AAGA,aAAOJ,MAAP;AACD,KATkB,CAAnB;;AAWAQ,WAAOC,OAAP,GAAiBX,YAAjB","file":"_stringToPath.js","sourcesContent":["var memoizeCapped = require('./_memoizeCapped');\n\n/** Used to match property names within property paths. */\nvar rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoizeCapped(function(string) {\n  var result = [];\n  if (string.charCodeAt(0) === 46 /* . */) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, subString) {\n    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\nmodule.exports = stringToPath;\n"]}