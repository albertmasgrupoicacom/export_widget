{"version":3,"sources":["_createPartial.js"],"names":["apply","require","createCtor","root","WRAP_BIND_FLAG","createPartial","func","bitmask","thisArg","partials","Ctor","wrapper","argsIndex","argsLength","arguments","length","leftIndex","leftLength","args","Array","fn","module","exports"],"mappings":";;;;AAAA,QAAIA,QAAQC,QAAQ,UAAR,CAAZ;AAAA,QACIC,aAAaD,QAAQ,eAAR,CADjB;AAAA,QAEIE,OAAOF,QAAQ,SAAR,CAFX;;AAIA;AACA,QAAIG,iBAAiB,CAArB;;AAEA;;;;;;;;;;;;AAYA,aAASC,aAAT,CAAuBC,IAAvB,EAA6BC,OAA7B,EAAsCC,OAAtC,EAA+CC,QAA/C,EAAyD;AACvD,UACIC,OAAOR,WAAWI,IAAX,CADX;;AAGA,eAASK,OAAT,GAAmB;AACjB,YAAIC,YAAY,CAAC,CAAjB;AAAA,YACIC,aAAaC,UAAUC,MAD3B;AAAA,YAEIC,YAAY,CAAC,CAFjB;AAAA,YAGIC,aAAaR,SAASM,MAH1B;AAAA,YAIIG,OAAOC,MAAMF,aAAaJ,UAAnB,CAJX;AAAA,YAKIO,KAAM,QAAQ,SAASjB,IAAjB,IAAyB,gBAAgBQ,OAA1C,GAAqDD,IAArD,GAA4DJ,IALrE;;AAOA,eAAO,EAAEU,SAAF,GAAcC,UAArB,EAAiC;AAC/BC,eAAKF,SAAL,IAAkBP,SAASO,SAAT,CAAlB;AACD;AACD,eAAOH,YAAP,EAAqB;AACnBK,eAAKF,WAAL,IAAoBF,UAAU,EAAEF,SAAZ,CAApB;AACD;AACD,eAAOZ,MAAMoB,EAAN,EAjBIb,UAAUH,cAiBJ,GAASI,OAAT,GAAmB,IAA7B,EAAmCU,IAAnC,CAAP;AACD;AACD,aAAOP,OAAP;AACD;;AAEDU,WAAOC,OAAP,GAAiBjB,aAAjB","file":"_createPartial.js","sourcesContent":["var apply = require('./_apply'),\n    createCtor = require('./_createCtor'),\n    root = require('./_root');\n\n/** Used to compose bitmasks for function metadata. */\nvar WRAP_BIND_FLAG = 1;\n\n/**\n * Creates a function that wraps `func` to invoke it with the `this` binding\n * of `thisArg` and `partials` prepended to the arguments it receives.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {Array} partials The arguments to prepend to those provided to\n *  the new function.\n * @returns {Function} Returns the new wrapped function.\n */\nfunction createPartial(func, bitmask, thisArg, partials) {\n  var isBind = bitmask & WRAP_BIND_FLAG,\n      Ctor = createCtor(func);\n\n  function wrapper() {\n    var argsIndex = -1,\n        argsLength = arguments.length,\n        leftIndex = -1,\n        leftLength = partials.length,\n        args = Array(leftLength + argsLength),\n        fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n\n    while (++leftIndex < leftLength) {\n      args[leftIndex] = partials[leftIndex];\n    }\n    while (argsLength--) {\n      args[leftIndex++] = arguments[++argsIndex];\n    }\n    return apply(fn, isBind ? thisArg : this, args);\n  }\n  return wrapper;\n}\n\nmodule.exports = createPartial;\n"]}