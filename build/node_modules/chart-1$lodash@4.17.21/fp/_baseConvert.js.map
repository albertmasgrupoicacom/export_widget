{"version":3,"sources":["_baseConvert.js"],"names":["mapping","require","fallbackHolder","push","Array","prototype","baseArity","func","n","a","b","apply","undefined","arguments","baseAry","cloneArray","array","length","result","createCloner","object","flatSpread","start","lastIndex","args","otherArgs","slice","wrapImmutable","cloner","baseConvert","util","name","options","isLib","isObj","Object","TypeError","config","cap","curry","fixed","immutable","rearg","defaultHolder","forceCurry","forceFixed","forceRearg","pristine","runInContext","helpers","ary","assign","clone","forEach","isArray","isError","isFunction","isWeakMap","iteratee","keys","toInteger","toPath","each","aryMethodKeys","aryMethod","wrappers","castArray","value","arity","mixin","source","pairs","key","pair","nthArg","indexes","context","castCap","iterateeRearg","iterateeAry","castCurry","castFixed","skipFixed","data","methodSpread","castRearg","skipRearg","methodRearg","aryRearg","cloneByPath","path","index","nested","convertLib","_","convert","createConverter","realName","aliasToReal","methodName","remap","oldOptions","newUtil","newFunc","newOptions","overArg","transform","wrap","placeholder","wrapped","wrapper","mutate","set","aryKey","otherName","afterRearg","realToAlias","alias","module","exports"],"mappings":"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","file":"_baseConvert.js","sourcesContent":["var mapping = require('./_mapping'),\n    fallbackHolder = require('./placeholder');\n\n/** Built-in value reference. */\nvar push = Array.prototype.push;\n\n/**\n * Creates a function, with an arity of `n`, that invokes `func` with the\n * arguments it receives.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {number} n The arity of the new function.\n * @returns {Function} Returns the new function.\n */\nfunction baseArity(func, n) {\n  return n == 2\n    ? function(a, b) { return func.apply(undefined, arguments); }\n    : function(a) { return func.apply(undefined, arguments); };\n}\n\n/**\n * Creates a function that invokes `func`, with up to `n` arguments, ignoring\n * any additional arguments.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @param {number} n The arity cap.\n * @returns {Function} Returns the new function.\n */\nfunction baseAry(func, n) {\n  return n == 2\n    ? function(a, b) { return func(a, b); }\n    : function(a) { return func(a); };\n}\n\n/**\n * Creates a clone of `array`.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the cloned array.\n */\nfunction cloneArray(array) {\n  var length = array ? array.length : 0,\n      result = Array(length);\n\n  while (length--) {\n    result[length] = array[length];\n  }\n  return result;\n}\n\n/**\n * Creates a function that clones a given object using the assignment `func`.\n *\n * @private\n * @param {Function} func The assignment function.\n * @returns {Function} Returns the new cloner function.\n */\nfunction createCloner(func) {\n  return function(object) {\n    return func({}, object);\n  };\n}\n\n/**\n * A specialized version of `_.spread` which flattens the spread array into\n * the arguments of the invoked `func`.\n *\n * @private\n * @param {Function} func The function to spread arguments over.\n * @param {number} start The start position of the spread.\n * @returns {Function} Returns the new function.\n */\nfunction flatSpread(func, start) {\n  return function() {\n    var length = arguments.length,\n        lastIndex = length - 1,\n        args = Array(length);\n\n    while (length--) {\n      args[length] = arguments[length];\n    }\n    var array = args[start],\n        otherArgs = args.slice(0, start);\n\n    if (array) {\n      push.apply(otherArgs, array);\n    }\n    if (start != lastIndex) {\n      push.apply(otherArgs, args.slice(start + 1));\n    }\n    return func.apply(this, otherArgs);\n  };\n}\n\n/**\n * Creates a function that wraps `func` and uses `cloner` to clone the first\n * argument it receives.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} cloner The function to clone arguments.\n * @returns {Function} Returns the new immutable function.\n */\nfunction wrapImmutable(func, cloner) {\n  return function() {\n    var length = arguments.length;\n    if (!length) {\n      return;\n    }\n    var args = Array(length);\n    while (length--) {\n      args[length] = arguments[length];\n    }\n    var result = args[0] = cloner.apply(undefined, args);\n    func.apply(undefined, args);\n    return result;\n  };\n}\n\n/**\n * The base implementation of `convert` which accepts a `util` object of methods\n * required to perform conversions.\n *\n * @param {Object} util The util object.\n * @param {string} name The name of the function to convert.\n * @param {Function} func The function to convert.\n * @param {Object} [options] The options object.\n * @param {boolean} [options.cap=true] Specify capping iteratee arguments.\n * @param {boolean} [options.curry=true] Specify currying.\n * @param {boolean} [options.fixed=true] Specify fixed arity.\n * @param {boolean} [options.immutable=true] Specify immutable operations.\n * @param {boolean} [options.rearg=true] Specify rearranging arguments.\n * @returns {Function|Object} Returns the converted function or object.\n */\nfunction baseConvert(util, name, func, options) {\n  var isLib = typeof name == 'function',\n      isObj = name === Object(name);\n\n  if (isObj) {\n    options = func;\n    func = name;\n    name = undefined;\n  }\n  if (func == null) {\n    throw new TypeError;\n  }\n  options || (options = {});\n\n  var config = {\n    'cap': 'cap' in options ? options.cap : true,\n    'curry': 'curry' in options ? options.curry : true,\n    'fixed': 'fixed' in options ? options.fixed : true,\n    'immutable': 'immutable' in options ? options.immutable : true,\n    'rearg': 'rearg' in options ? options.rearg : true\n  };\n\n  var defaultHolder = isLib ? func : fallbackHolder,\n      forceCurry = ('curry' in options) && options.curry,\n      forceFixed = ('fixed' in options) && options.fixed,\n      forceRearg = ('rearg' in options) && options.rearg,\n      pristine = isLib ? func.runInContext() : undefined;\n\n  var helpers = isLib ? func : {\n    'ary': util.ary,\n    'assign': util.assign,\n    'clone': util.clone,\n    'curry': util.curry,\n    'forEach': util.forEach,\n    'isArray': util.isArray,\n    'isError': util.isError,\n    'isFunction': util.isFunction,\n    'isWeakMap': util.isWeakMap,\n    'iteratee': util.iteratee,\n    'keys': util.keys,\n    'rearg': util.rearg,\n    'toInteger': util.toInteger,\n    'toPath': util.toPath\n  };\n\n  var ary = helpers.ary,\n      assign = helpers.assign,\n      clone = helpers.clone,\n      curry = helpers.curry,\n      each = helpers.forEach,\n      isArray = helpers.isArray,\n      isError = helpers.isError,\n      isFunction = helpers.isFunction,\n      isWeakMap = helpers.isWeakMap,\n      keys = helpers.keys,\n      rearg = helpers.rearg,\n      toInteger = helpers.toInteger,\n      toPath = helpers.toPath;\n\n  var aryMethodKeys = keys(mapping.aryMethod);\n\n  var wrappers = {\n    'castArray': function(castArray) {\n      return function() {\n        var value = arguments[0];\n        return isArray(value)\n          ? castArray(cloneArray(value))\n          : castArray.apply(undefined, arguments);\n      };\n    },\n    'iteratee': function(iteratee) {\n      return function() {\n        var func = arguments[0],\n            arity = arguments[1],\n            result = iteratee(func, arity),\n            length = result.length;\n\n        if (config.cap && typeof arity == 'number') {\n          arity = arity > 2 ? (arity - 2) : 1;\n          return (length && length <= arity) ? result : baseAry(result, arity);\n        }\n        return result;\n      };\n    },\n    'mixin': function(mixin) {\n      return function(source) {\n        var func = this;\n        if (!isFunction(func)) {\n          return mixin(func, Object(source));\n        }\n        var pairs = [];\n        each(keys(source), function(key) {\n          if (isFunction(source[key])) {\n            pairs.push([key, func.prototype[key]]);\n          }\n        });\n\n        mixin(func, Object(source));\n\n        each(pairs, function(pair) {\n          var value = pair[1];\n          if (isFunction(value)) {\n            func.prototype[pair[0]] = value;\n          } else {\n            delete func.prototype[pair[0]];\n          }\n        });\n        return func;\n      };\n    },\n    'nthArg': function(nthArg) {\n      return function(n) {\n        var arity = n < 0 ? 1 : (toInteger(n) + 1);\n        return curry(nthArg(n), arity);\n      };\n    },\n    'rearg': function(rearg) {\n      return function(func, indexes) {\n        var arity = indexes ? indexes.length : 0;\n        return curry(rearg(func, indexes), arity);\n      };\n    },\n    'runInContext': function(runInContext) {\n      return function(context) {\n        return baseConvert(util, runInContext(context), options);\n      };\n    }\n  };\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Casts `func` to a function with an arity capped iteratee if needed.\n   *\n   * @private\n   * @param {string} name The name of the function to inspect.\n   * @param {Function} func The function to inspect.\n   * @returns {Function} Returns the cast function.\n   */\n  function castCap(name, func) {\n    if (config.cap) {\n      var indexes = mapping.iterateeRearg[name];\n      if (indexes) {\n        return iterateeRearg(func, indexes);\n      }\n      var n = !isLib && mapping.iterateeAry[name];\n      if (n) {\n        return iterateeAry(func, n);\n      }\n    }\n    return func;\n  }\n\n  /**\n   * Casts `func` to a curried function if needed.\n   *\n   * @private\n   * @param {string} name The name of the function to inspect.\n   * @param {Function} func The function to inspect.\n   * @param {number} n The arity of `func`.\n   * @returns {Function} Returns the cast function.\n   */\n  function castCurry(name, func, n) {\n    return (forceCurry || (config.curry && n > 1))\n      ? curry(func, n)\n      : func;\n  }\n\n  /**\n   * Casts `func` to a fixed arity function if needed.\n   *\n   * @private\n   * @param {string} name The name of the function to inspect.\n   * @param {Function} func The function to inspect.\n   * @param {number} n The arity cap.\n   * @returns {Function} Returns the cast function.\n   */\n  function castFixed(name, func, n) {\n    if (config.fixed && (forceFixed || !mapping.skipFixed[name])) {\n      var data = mapping.methodSpread[name],\n          start = data && data.start;\n\n      return start  === undefined ? ary(func, n) : flatSpread(func, start);\n    }\n    return func;\n  }\n\n  /**\n   * Casts `func` to an rearged function if needed.\n   *\n   * @private\n   * @param {string} name The name of the function to inspect.\n   * @param {Function} func The function to inspect.\n   * @param {number} n The arity of `func`.\n   * @returns {Function} Returns the cast function.\n   */\n  function castRearg(name, func, n) {\n    return (config.rearg && n > 1 && (forceRearg || !mapping.skipRearg[name]))\n      ? rearg(func, mapping.methodRearg[name] || mapping.aryRearg[n])\n      : func;\n  }\n\n  /**\n   * Creates a clone of `object` by `path`.\n   *\n   * @private\n   * @param {Object} object The object to clone.\n   * @param {Array|string} path The path to clone by.\n   * @returns {Object} Returns the cloned object.\n   */\n  function cloneByPath(object, path) {\n    path = toPath(path);\n\n    var index = -1,\n        length = path.length,\n        lastIndex = length - 1,\n        result = clone(Object(object)),\n        nested = result;\n\n    while (nested != null && ++index < length) {\n      var key = path[index],\n          value = nested[key];\n\n      if (value != null &&\n          !(isFunction(value) || isError(value) || isWeakMap(value))) {\n        nested[key] = clone(index == lastIndex ? value : Object(value));\n      }\n      nested = nested[key];\n    }\n    return result;\n  }\n\n  /**\n   * Converts `lodash` to an immutable auto-curried iteratee-first data-last\n   * version with conversion `options` applied.\n   *\n   * @param {Object} [options] The options object. See `baseConvert` for more details.\n   * @returns {Function} Returns the converted `lodash`.\n   */\n  function convertLib(options) {\n    return _.runInContext.convert(options)(undefined);\n  }\n\n  /**\n   * Create a converter function for `func` of `name`.\n   *\n   * @param {string} name The name of the function to convert.\n   * @param {Function} func The function to convert.\n   * @returns {Function} Returns the new converter function.\n   */\n  function createConverter(name, func) {\n    var realName = mapping.aliasToReal[name] || name,\n        methodName = mapping.remap[realName] || realName,\n        oldOptions = options;\n\n    return function(options) {\n      var newUtil = isLib ? pristine : helpers,\n          newFunc = isLib ? pristine[methodName] : func,\n          newOptions = assign(assign({}, oldOptions), options);\n\n      return baseConvert(newUtil, realName, newFunc, newOptions);\n    };\n  }\n\n  /**\n   * Creates a function that wraps `func` to invoke its iteratee, with up to `n`\n   * arguments, ignoring any additional arguments.\n   *\n   * @private\n   * @param {Function} func The function to cap iteratee arguments for.\n   * @param {number} n The arity cap.\n   * @returns {Function} Returns the new function.\n   */\n  function iterateeAry(func, n) {\n    return overArg(func, function(func) {\n      return typeof func == 'function' ? baseAry(func, n) : func;\n    });\n  }\n\n  /**\n   * Creates a function that wraps `func` to invoke its iteratee with arguments\n   * arranged according to the specified `indexes` where the argument value at\n   * the first index is provided as the first argument, the argument value at\n   * the second index is provided as the second argument, and so on.\n   *\n   * @private\n   * @param {Function} func The function to rearrange iteratee arguments for.\n   * @param {number[]} indexes The arranged argument indexes.\n   * @returns {Function} Returns the new function.\n   */\n  function iterateeRearg(func, indexes) {\n    return overArg(func, function(func) {\n      var n = indexes.length;\n      return baseArity(rearg(baseAry(func, n), indexes), n);\n    });\n  }\n\n  /**\n   * Creates a function that invokes `func` with its first argument transformed.\n   *\n   * @private\n   * @param {Function} func The function to wrap.\n   * @param {Function} transform The argument transform.\n   * @returns {Function} Returns the new function.\n   */\n  function overArg(func, transform) {\n    return function() {\n      var length = arguments.length;\n      if (!length) {\n        return func();\n      }\n      var args = Array(length);\n      while (length--) {\n        args[length] = arguments[length];\n      }\n      var index = config.rearg ? 0 : (length - 1);\n      args[index] = transform(args[index]);\n      return func.apply(undefined, args);\n    };\n  }\n\n  /**\n   * Creates a function that wraps `func` and applys the conversions\n   * rules by `name`.\n   *\n   * @private\n   * @param {string} name The name of the function to wrap.\n   * @param {Function} func The function to wrap.\n   * @returns {Function} Returns the converted function.\n   */\n  function wrap(name, func, placeholder) {\n    var result,\n        realName = mapping.aliasToReal[name] || name,\n        wrapped = func,\n        wrapper = wrappers[realName];\n\n    if (wrapper) {\n      wrapped = wrapper(func);\n    }\n    else if (config.immutable) {\n      if (mapping.mutate.array[realName]) {\n        wrapped = wrapImmutable(func, cloneArray);\n      }\n      else if (mapping.mutate.object[realName]) {\n        wrapped = wrapImmutable(func, createCloner(func));\n      }\n      else if (mapping.mutate.set[realName]) {\n        wrapped = wrapImmutable(func, cloneByPath);\n      }\n    }\n    each(aryMethodKeys, function(aryKey) {\n      each(mapping.aryMethod[aryKey], function(otherName) {\n        if (realName == otherName) {\n          var data = mapping.methodSpread[realName],\n              afterRearg = data && data.afterRearg;\n\n          result = afterRearg\n            ? castFixed(realName, castRearg(realName, wrapped, aryKey), aryKey)\n            : castRearg(realName, castFixed(realName, wrapped, aryKey), aryKey);\n\n          result = castCap(realName, result);\n          result = castCurry(realName, result, aryKey);\n          return false;\n        }\n      });\n      return !result;\n    });\n\n    result || (result = wrapped);\n    if (result == func) {\n      result = forceCurry ? curry(result, 1) : function() {\n        return func.apply(this, arguments);\n      };\n    }\n    result.convert = createConverter(realName, func);\n    result.placeholder = func.placeholder = placeholder;\n\n    return result;\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  if (!isObj) {\n    return wrap(name, func, defaultHolder);\n  }\n  var _ = func;\n\n  // Convert methods by ary cap.\n  var pairs = [];\n  each(aryMethodKeys, function(aryKey) {\n    each(mapping.aryMethod[aryKey], function(key) {\n      var func = _[mapping.remap[key] || key];\n      if (func) {\n        pairs.push([key, wrap(key, func, _)]);\n      }\n    });\n  });\n\n  // Convert remaining methods.\n  each(keys(_), function(key) {\n    var func = _[key];\n    if (typeof func == 'function') {\n      var length = pairs.length;\n      while (length--) {\n        if (pairs[length][0] == key) {\n          return;\n        }\n      }\n      func.convert = createConverter(key, func);\n      pairs.push([key, func]);\n    }\n  });\n\n  // Assign to `_` leaving `_.prototype` unchanged to allow chaining.\n  each(pairs, function(pair) {\n    _[pair[0]] = pair[1];\n  });\n\n  _.convert = convertLib;\n  _.placeholder = _;\n\n  // Assign aliases.\n  each(keys(_), function(key) {\n    each(mapping.realToAlias[key] || [], function(alias) {\n      _[alias] = _[key];\n    });\n  });\n\n  return _;\n}\n\nmodule.exports = baseConvert;\n"]}