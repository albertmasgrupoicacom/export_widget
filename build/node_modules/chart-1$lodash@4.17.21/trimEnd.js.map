{"version":3,"sources":["trimEnd.js"],"names":["baseToString","require","castSlice","charsEndIndex","stringToArray","toString","trimmedEndIndex","trimEnd","string","chars","guard","undefined","slice","strSymbols","end","join","module","exports"],"mappings":";;;;AAAA,QAAIA,eAAeC,QAAQ,iBAAR,CAAnB;AAAA,QACIC,YAAYD,QAAQ,cAAR,CADhB;AAAA,QAEIE,gBAAgBF,QAAQ,kBAAR,CAFpB;AAAA,QAGIG,gBAAgBH,QAAQ,kBAAR,CAHpB;AAAA,QAIII,WAAWJ,QAAQ,YAAR,CAJf;AAAA,QAKIK,kBAAkBL,QAAQ,oBAAR,CALtB;;AAOA;;;;;;;;;;;;;;;;;;;AAmBA,aAASM,OAAT,CAAiBC,MAAjB,EAAyBC,KAAzB,EAAgCC,KAAhC,EAAuC;AACrCF,eAASH,SAASG,MAAT,CAAT;AACA,UAAIA,WAAWE,SAASD,UAAUE,SAA9B,CAAJ,EAA8C;AAC5C,eAAOH,OAAOI,KAAP,CAAa,CAAb,EAAgBN,gBAAgBE,MAAhB,IAA0B,CAA1C,CAAP;AACD;AACD,UAAI,CAACA,MAAD,IAAW,EAAEC,QAAQT,aAAaS,KAAb,CAAV,CAAf,EAA+C;AAC7C,eAAOD,MAAP;AACD;AACD,UAAIK,aAAaT,cAAcI,MAAd,CAAjB;AAAA,UACIM,MAAMX,cAAcU,UAAd,EAA0BT,cAAcK,KAAd,CAA1B,IAAkD,CAD5D;;AAGA,aAAOP,UAAUW,UAAV,EAAsB,CAAtB,EAAyBC,GAAzB,EAA8BC,IAA9B,CAAmC,EAAnC,CAAP;AACD;;AAEDC,WAAOC,OAAP,GAAiBV,OAAjB","file":"trimEnd.js","sourcesContent":["var baseToString = require('./_baseToString'),\n    castSlice = require('./_castSlice'),\n    charsEndIndex = require('./_charsEndIndex'),\n    stringToArray = require('./_stringToArray'),\n    toString = require('./toString'),\n    trimmedEndIndex = require('./_trimmedEndIndex');\n\n/**\n * Removes trailing whitespace or specified characters from `string`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category String\n * @param {string} [string=''] The string to trim.\n * @param {string} [chars=whitespace] The characters to trim.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {string} Returns the trimmed string.\n * @example\n *\n * _.trimEnd('  abc  ');\n * // => '  abc'\n *\n * _.trimEnd('-_-abc-_-', '_-');\n * // => '-_-abc'\n */\nfunction trimEnd(string, chars, guard) {\n  string = toString(string);\n  if (string && (guard || chars === undefined)) {\n    return string.slice(0, trimmedEndIndex(string) + 1);\n  }\n  if (!string || !(chars = baseToString(chars))) {\n    return string;\n  }\n  var strSymbols = stringToArray(string),\n      end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;\n\n  return castSlice(strSymbols, 0, end).join('');\n}\n\nmodule.exports = trimEnd;\n"]}