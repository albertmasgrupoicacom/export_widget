{"version":3,"sources":["_baseDifference.js"],"names":["SetCache","require","arrayIncludes","arrayIncludesWith","arrayMap","baseUnary","cacheHas","LARGE_ARRAY_SIZE","baseDifference","array","values","iteratee","comparator","index","includes","isCommon","length","result","valuesLength","outer","value","computed","valuesIndex","push","module","exports"],"mappings":";;;;AAAA,QAAIA,WAAWC,QAAQ,aAAR,CAAf;AAAA,QACIC,gBAAgBD,QAAQ,kBAAR,CADpB;AAAA,QAEIE,oBAAoBF,QAAQ,sBAAR,CAFxB;AAAA,QAGIG,WAAWH,QAAQ,aAAR,CAHf;AAAA,QAIII,YAAYJ,QAAQ,cAAR,CAJhB;AAAA,QAKIK,WAAWL,QAAQ,aAAR,CALf;;AAOA;AACA,QAAIM,mBAAmB,GAAvB;;AAEA;;;;;;;;;;;AAWA,aAASC,cAAT,CAAwBC,KAAxB,EAA+BC,MAA/B,EAAuCC,QAAvC,EAAiDC,UAAjD,EAA6D;AAC3D,UAAIC,QAAQ,CAAC,CAAb;AAAA,UACIC,WAAWZ,aADf;AAAA,UAEIa,WAAW,IAFf;AAAA,UAGIC,SAASP,MAAMO,MAHnB;AAAA,UAIIC,SAAS,EAJb;AAAA,UAKIC,eAAeR,OAAOM,MAL1B;;AAOA,UAAI,CAACA,MAAL,EAAa;AACX,eAAOC,MAAP;AACD;AACD,UAAIN,QAAJ,EAAc;AACZD,iBAASN,SAASM,MAAT,EAAiBL,UAAUM,QAAV,CAAjB,CAAT;AACD;AACD,UAAIC,UAAJ,EAAgB;AACdE,mBAAWX,iBAAX;AACAY,mBAAW,KAAX;AACD,OAHD,MAIK,IAAIL,OAAOM,MAAP,IAAiBT,gBAArB,EAAuC;AAC1CO,mBAAWR,QAAX;AACAS,mBAAW,KAAX;AACAL,iBAAS,IAAIV,QAAJ,CAAaU,MAAb,CAAT;AACD;AACDS,aACA,OAAO,EAAEN,KAAF,GAAUG,MAAjB,EAAyB;AACvB,YAAII,QAAQX,MAAMI,KAAN,CAAZ;AAAA,YACIQ,WAAWV,YAAY,IAAZ,GAAmBS,KAAnB,GAA2BT,SAASS,KAAT,CAD1C;;AAGAA,gBAASR,cAAcQ,UAAU,CAAzB,GAA8BA,KAA9B,GAAsC,CAA9C;AACA,YAAIL,YAAYM,aAAaA,QAA7B,EAAuC;AACrC,cAAIC,cAAcJ,YAAlB;AACA,iBAAOI,aAAP,EAAsB;AACpB,gBAAIZ,OAAOY,WAAP,MAAwBD,QAA5B,EAAsC;AACpC,uBAASF,KAAT;AACD;AACF;AACDF,iBAAOM,IAAP,CAAYH,KAAZ;AACD,SARD,MASK,IAAI,CAACN,SAASJ,MAAT,EAAiBW,QAAjB,EAA2BT,UAA3B,CAAL,EAA6C;AAChDK,iBAAOM,IAAP,CAAYH,KAAZ;AACD;AACF;AACD,aAAOH,MAAP;AACD;;AAEDO,WAAOC,OAAP,GAAiBjB,cAAjB","file":"_baseDifference.js","sourcesContent":["var SetCache = require('./_SetCache'),\n    arrayIncludes = require('./_arrayIncludes'),\n    arrayIncludesWith = require('./_arrayIncludesWith'),\n    arrayMap = require('./_arrayMap'),\n    baseUnary = require('./_baseUnary'),\n    cacheHas = require('./_cacheHas');\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * The base implementation of methods like `_.difference` without support\n * for excluding multiple arrays or iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Array} values The values to exclude.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of filtered values.\n */\nfunction baseDifference(array, values, iteratee, comparator) {\n  var index = -1,\n      includes = arrayIncludes,\n      isCommon = true,\n      length = array.length,\n      result = [],\n      valuesLength = values.length;\n\n  if (!length) {\n    return result;\n  }\n  if (iteratee) {\n    values = arrayMap(values, baseUnary(iteratee));\n  }\n  if (comparator) {\n    includes = arrayIncludesWith;\n    isCommon = false;\n  }\n  else if (values.length >= LARGE_ARRAY_SIZE) {\n    includes = cacheHas;\n    isCommon = false;\n    values = new SetCache(values);\n  }\n  outer:\n  while (++index < length) {\n    var value = array[index],\n        computed = iteratee == null ? value : iteratee(value);\n\n    value = (comparator || value !== 0) ? value : 0;\n    if (isCommon && computed === computed) {\n      var valuesIndex = valuesLength;\n      while (valuesIndex--) {\n        if (values[valuesIndex] === computed) {\n          continue outer;\n        }\n      }\n      result.push(value);\n    }\n    else if (!includes(values, computed, comparator)) {\n      result.push(value);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseDifference;\n"]}