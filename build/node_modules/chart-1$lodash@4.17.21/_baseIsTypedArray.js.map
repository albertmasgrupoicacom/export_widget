{"version":3,"sources":["_baseIsTypedArray.js"],"names":["baseGetTag","require","isLength","isObjectLike","argsTag","arrayTag","boolTag","dateTag","errorTag","funcTag","mapTag","numberTag","objectTag","regexpTag","setTag","stringTag","weakMapTag","arrayBufferTag","dataViewTag","float32Tag","float64Tag","int8Tag","int16Tag","int32Tag","uint8Tag","uint8ClampedTag","uint16Tag","uint32Tag","typedArrayTags","baseIsTypedArray","value","length","module","exports"],"mappings":";;;;AAAA,YAAIA,aAAaC,QAAQ,eAAR,CAAjB;AAAA,YACIC,WAAWD,QAAQ,YAAR,CADf;AAAA,YAEIE,eAAeF,QAAQ,gBAAR,CAFnB;;AAIA;AACA,YAAIG,UAAU,oBAAd;AAAA,YACIC,WAAW,gBADf;AAAA,YAEIC,UAAU,kBAFd;AAAA,YAGIC,UAAU,eAHd;AAAA,YAIIC,WAAW,gBAJf;AAAA,YAKIC,UAAU,mBALd;AAAA,YAMIC,SAAS,cANb;AAAA,YAOIC,YAAY,iBAPhB;AAAA,YAQIC,YAAY,iBARhB;AAAA,YASIC,YAAY,iBAThB;AAAA,YAUIC,SAAS,cAVb;AAAA,YAWIC,YAAY,iBAXhB;AAAA,YAYIC,aAAa,kBAZjB;;AAcA,YAAIC,iBAAiB,sBAArB;AAAA,YACIC,cAAc,mBADlB;AAAA,YAEIC,aAAa,uBAFjB;AAAA,YAGIC,aAAa,uBAHjB;AAAA,YAIIC,UAAU,oBAJd;AAAA,YAKIC,WAAW,qBALf;AAAA,YAMIC,WAAW,qBANf;AAAA,YAOIC,WAAW,qBAPf;AAAA,YAQIC,kBAAkB,4BARtB;AAAA,YASIC,YAAY,sBAThB;AAAA,YAUIC,YAAY,sBAVhB;;AAYA;AACA,YAAIC,iBAAiB,EAArB;AACAA,uBAAeT,UAAf,IAA6BS,eAAeR,UAAf,IAC7BQ,eAAeP,OAAf,IAA0BO,eAAeN,QAAf,IAC1BM,eAAeL,QAAf,IAA2BK,eAAeJ,QAAf,IAC3BI,eAAeH,eAAf,IAAkCG,eAAeF,SAAf,IAClCE,eAAeD,SAAf,IAA4B,IAJ5B;AAKAC,uBAAexB,OAAf,IAA0BwB,eAAevB,QAAf,IAC1BuB,eAAeX,cAAf,IAAiCW,eAAetB,OAAf,IACjCsB,eAAeV,WAAf,IAA8BU,eAAerB,OAAf,IAC9BqB,eAAepB,QAAf,IAA2BoB,eAAenB,OAAf,IAC3BmB,eAAelB,MAAf,IAAyBkB,eAAejB,SAAf,IACzBiB,eAAehB,SAAf,IAA4BgB,eAAef,SAAf,IAC5Be,eAAed,MAAf,IAAyBc,eAAeb,SAAf,IACzBa,eAAeZ,UAAf,IAA6B,KAP7B;;AASA;;;;;;;AAOA,iBAASa,gBAAT,CAA0BC,KAA1B,EAAiC;AAC/B,mBAAO3B,aAAa2B,KAAb,KACL5B,SAAS4B,MAAMC,MAAf,CADK,IACqB,CAAC,CAACH,eAAe5B,WAAW8B,KAAX,CAAf,CAD9B;AAED;;AAEDE,eAAOC,OAAP,GAAiBJ,gBAAjB","file":"_baseIsTypedArray.js","sourcesContent":["var baseGetTag = require('./_baseGetTag'),\n    isLength = require('./isLength'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\nmodule.exports = baseIsTypedArray;\n"]}