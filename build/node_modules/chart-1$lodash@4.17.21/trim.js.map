{"version":3,"sources":["trim.js"],"names":["baseToString","require","baseTrim","castSlice","charsEndIndex","charsStartIndex","stringToArray","toString","trim","string","chars","guard","undefined","strSymbols","chrSymbols","start","end","join","module","exports"],"mappings":";;;;AAAA,QAAIA,eAAeC,QAAQ,iBAAR,CAAnB;AAAA,QACIC,WAAWD,QAAQ,aAAR,CADf;AAAA,QAEIE,YAAYF,QAAQ,cAAR,CAFhB;AAAA,QAGIG,gBAAgBH,QAAQ,kBAAR,CAHpB;AAAA,QAIII,kBAAkBJ,QAAQ,oBAAR,CAJtB;AAAA,QAKIK,gBAAgBL,QAAQ,kBAAR,CALpB;AAAA,QAMIM,WAAWN,QAAQ,YAAR,CANf;;AAQA;;;;;;;;;;;;;;;;;;;;;;AAsBA,aAASO,IAAT,CAAcC,MAAd,EAAsBC,KAAtB,EAA6BC,KAA7B,EAAoC;AAClCF,eAASF,SAASE,MAAT,CAAT;AACA,UAAIA,WAAWE,SAASD,UAAUE,SAA9B,CAAJ,EAA8C;AAC5C,eAAOV,SAASO,MAAT,CAAP;AACD;AACD,UAAI,CAACA,MAAD,IAAW,EAAEC,QAAQV,aAAaU,KAAb,CAAV,CAAf,EAA+C;AAC7C,eAAOD,MAAP;AACD;AACD,UAAII,aAAaP,cAAcG,MAAd,CAAjB;AAAA,UACIK,aAAaR,cAAcI,KAAd,CADjB;AAAA,UAEIK,QAAQV,gBAAgBQ,UAAhB,EAA4BC,UAA5B,CAFZ;AAAA,UAGIE,MAAMZ,cAAcS,UAAd,EAA0BC,UAA1B,IAAwC,CAHlD;;AAKA,aAAOX,UAAUU,UAAV,EAAsBE,KAAtB,EAA6BC,GAA7B,EAAkCC,IAAlC,CAAuC,EAAvC,CAAP;AACD;;AAEDC,WAAOC,OAAP,GAAiBX,IAAjB","file":"trim.js","sourcesContent":["var baseToString = require('./_baseToString'),\n    baseTrim = require('./_baseTrim'),\n    castSlice = require('./_castSlice'),\n    charsEndIndex = require('./_charsEndIndex'),\n    charsStartIndex = require('./_charsStartIndex'),\n    stringToArray = require('./_stringToArray'),\n    toString = require('./toString');\n\n/**\n * Removes leading and trailing whitespace or specified characters from `string`.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to trim.\n * @param {string} [chars=whitespace] The characters to trim.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {string} Returns the trimmed string.\n * @example\n *\n * _.trim('  abc  ');\n * // => 'abc'\n *\n * _.trim('-_-abc-_-', '_-');\n * // => 'abc'\n *\n * _.map(['  foo  ', '  bar  '], _.trim);\n * // => ['foo', 'bar']\n */\nfunction trim(string, chars, guard) {\n  string = toString(string);\n  if (string && (guard || chars === undefined)) {\n    return baseTrim(string);\n  }\n  if (!string || !(chars = baseToString(chars))) {\n    return string;\n  }\n  var strSymbols = stringToArray(string),\n      chrSymbols = stringToArray(chars),\n      start = charsStartIndex(strSymbols, chrSymbols),\n      end = charsEndIndex(strSymbols, chrSymbols) + 1;\n\n  return castSlice(strSymbols, start, end).join('');\n}\n\nmodule.exports = trim;\n"]}