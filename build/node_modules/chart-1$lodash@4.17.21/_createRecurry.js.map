{"version":3,"sources":["_createRecurry.js"],"names":["isLaziable","require","setData","setWrapToString","WRAP_BIND_FLAG","WRAP_BIND_KEY_FLAG","WRAP_CURRY_BOUND_FLAG","WRAP_CURRY_FLAG","WRAP_PARTIAL_FLAG","WRAP_PARTIAL_RIGHT_FLAG","createRecurry","func","bitmask","wrapFunc","placeholder","thisArg","partials","holders","argPos","ary","arity","isCurry","newHolders","undefined","newHoldersRight","newPartials","newPartialsRight","newData","result","apply","module","exports"],"mappings":";;;;AAAA,QAAIA,aAAaC,QAAQ,eAAR,CAAjB;AAAA,QACIC,UAAUD,QAAQ,YAAR,CADd;AAAA,QAEIE,kBAAkBF,QAAQ,oBAAR,CAFtB;;AAIA;AACA,QAAIG,iBAAiB,CAArB;AAAA,QACIC,qBAAqB,CADzB;AAAA,QAEIC,wBAAwB,CAF5B;AAAA,QAGIC,kBAAkB,CAHtB;AAAA,QAIIC,oBAAoB,EAJxB;AAAA,QAKIC,0BAA0B,EAL9B;;AAOA;;;;;;;;;;;;;;;;;AAiBA,aAASC,aAAT,CAAuBC,IAAvB,EAA6BC,OAA7B,EAAsCC,QAAtC,EAAgDC,WAAhD,EAA6DC,OAA7D,EAAsEC,QAAtE,EAAgFC,OAAhF,EAAyFC,MAAzF,EAAiGC,GAAjG,EAAsGC,KAAtG,EAA6G;AAC3G,UAAIC,UAAUT,UAAUL,eAAxB;AAAA,UACIe,aAAaD,UAAUJ,OAAV,GAAoBM,SADrC;AAAA,UAEIC,kBAAkBH,UAAUE,SAAV,GAAsBN,OAF5C;AAAA,UAGIQ,cAAcJ,UAAUL,QAAV,GAAqBO,SAHvC;AAAA,UAIIG,mBAAmBL,UAAUE,SAAV,GAAsBP,QAJ7C;;AAMAJ,iBAAYS,UAAUb,iBAAV,GAA8BC,uBAA1C;AACAG,iBAAW,EAAES,UAAUZ,uBAAV,GAAoCD,iBAAtC,CAAX;;AAEA,UAAI,EAAEI,UAAUN,qBAAZ,CAAJ,EAAwC;AACtCM,mBAAW,EAAER,iBAAiBC,kBAAnB,CAAX;AACD;AACD,UAAIsB,UAAU,CACZhB,IADY,EACNC,OADM,EACGG,OADH,EACYU,WADZ,EACyBH,UADzB,EACqCI,gBADrC,EAEZF,eAFY,EAEKN,MAFL,EAEaC,GAFb,EAEkBC,KAFlB,CAAd;;AAKA,UAAIQ,SAASf,SAASgB,KAAT,CAAeN,SAAf,EAA0BI,OAA1B,CAAb;AACA,UAAI3B,WAAWW,IAAX,CAAJ,EAAsB;AACpBT,gBAAQ0B,MAAR,EAAgBD,OAAhB;AACD;AACDC,aAAOd,WAAP,GAAqBA,WAArB;AACA,aAAOX,gBAAgByB,MAAhB,EAAwBjB,IAAxB,EAA8BC,OAA9B,CAAP;AACD;;AAEDkB,WAAOC,OAAP,GAAiBrB,aAAjB","file":"_createRecurry.js","sourcesContent":["var isLaziable = require('./_isLaziable'),\n    setData = require('./_setData'),\n    setWrapToString = require('./_setWrapToString');\n\n/** Used to compose bitmasks for function metadata. */\nvar WRAP_BIND_FLAG = 1,\n    WRAP_BIND_KEY_FLAG = 2,\n    WRAP_CURRY_BOUND_FLAG = 4,\n    WRAP_CURRY_FLAG = 8,\n    WRAP_PARTIAL_FLAG = 32,\n    WRAP_PARTIAL_RIGHT_FLAG = 64;\n\n/**\n * Creates a function that wraps `func` to continue currying.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n * @param {Function} wrapFunc The function to create the `func` wrapper.\n * @param {*} placeholder The placeholder value.\n * @param {*} [thisArg] The `this` binding of `func`.\n * @param {Array} [partials] The arguments to prepend to those provided to\n *  the new function.\n * @param {Array} [holders] The `partials` placeholder indexes.\n * @param {Array} [argPos] The argument positions of the new function.\n * @param {number} [ary] The arity cap of `func`.\n * @param {number} [arity] The arity of `func`.\n * @returns {Function} Returns the new wrapped function.\n */\nfunction createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {\n  var isCurry = bitmask & WRAP_CURRY_FLAG,\n      newHolders = isCurry ? holders : undefined,\n      newHoldersRight = isCurry ? undefined : holders,\n      newPartials = isCurry ? partials : undefined,\n      newPartialsRight = isCurry ? undefined : partials;\n\n  bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);\n  bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);\n\n  if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {\n    bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);\n  }\n  var newData = [\n    func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,\n    newHoldersRight, argPos, ary, arity\n  ];\n\n  var result = wrapFunc.apply(undefined, newData);\n  if (isLaziable(func)) {\n    setData(result, newData);\n  }\n  result.placeholder = placeholder;\n  return setWrapToString(result, func, bitmask);\n}\n\nmodule.exports = createRecurry;\n"]}