{"version":3,"sources":["_composeArgs.js"],"names":["nativeMax","Math","max","composeArgs","args","partials","holders","isCurried","argsIndex","argsLength","length","holdersLength","leftIndex","leftLength","rangeLength","result","Array","module","exports"],"mappings":";;;;AAAA;AACA,QAAIA,YAAYC,KAAKC,GAArB;;AAEA;;;;;;;;;;;AAWA,aAASC,WAAT,CAAqBC,IAArB,EAA2BC,QAA3B,EAAqCC,OAArC,EAA8CC,SAA9C,EAAyD;AACvD,UAAIC,YAAY,CAAC,CAAjB;AAAA,UACIC,aAAaL,KAAKM,MADtB;AAAA,UAEIC,gBAAgBL,QAAQI,MAF5B;AAAA,UAGIE,YAAY,CAAC,CAHjB;AAAA,UAIIC,aAAaR,SAASK,MAJ1B;AAAA,UAKII,cAAcd,UAAUS,aAAaE,aAAvB,EAAsC,CAAtC,CALlB;AAAA,UAMII,SAASC,MAAMH,aAAaC,WAAnB,CANb;;AASA,aAAO,EAAEF,SAAF,GAAcC,UAArB,EAAiC;AAC/BE,eAAOH,SAAP,IAAoBP,SAASO,SAAT,CAApB;AACD;AACD,aAAO,EAAEJ,SAAF,GAAcG,aAArB,EAAoC;AAClC,YANgB,CAACJ,SAMb,IAAeC,YAAYC,UAA/B,EAA2C;AACzCM,iBAAOT,QAAQE,SAAR,CAAP,IAA6BJ,KAAKI,SAAL,CAA7B;AACD;AACF;AACD,aAAOM,aAAP,EAAsB;AACpBC,eAAOH,WAAP,IAAsBR,KAAKI,WAAL,CAAtB;AACD;AACD,aAAOO,MAAP;AACD;;AAEDE,WAAOC,OAAP,GAAiBf,WAAjB","file":"_composeArgs.js","sourcesContent":["/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * Creates an array that is the composition of partially applied arguments,\n * placeholders, and provided arguments into a single array of arguments.\n *\n * @private\n * @param {Array} args The provided arguments.\n * @param {Array} partials The arguments to prepend to those provided.\n * @param {Array} holders The `partials` placeholder indexes.\n * @params {boolean} [isCurried] Specify composing for a curried function.\n * @returns {Array} Returns the new array of composed arguments.\n */\nfunction composeArgs(args, partials, holders, isCurried) {\n  var argsIndex = -1,\n      argsLength = args.length,\n      holdersLength = holders.length,\n      leftIndex = -1,\n      leftLength = partials.length,\n      rangeLength = nativeMax(argsLength - holdersLength, 0),\n      result = Array(leftLength + rangeLength),\n      isUncurried = !isCurried;\n\n  while (++leftIndex < leftLength) {\n    result[leftIndex] = partials[leftIndex];\n  }\n  while (++argsIndex < holdersLength) {\n    if (isUncurried || argsIndex < argsLength) {\n      result[holders[argsIndex]] = args[argsIndex];\n    }\n  }\n  while (rangeLength--) {\n    result[leftIndex++] = args[argsIndex++];\n  }\n  return result;\n}\n\nmodule.exports = composeArgs;\n"]}