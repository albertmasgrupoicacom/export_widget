{"version":3,"sources":["_createRound.js"],"names":["root","require","toInteger","toNumber","toString","nativeIsFinite","isFinite","nativeMin","Math","min","createRound","methodName","func","number","precision","pair","split","value","module","exports"],"mappings":";;;;AAAA,QAAIA,OAAOC,QAAQ,SAAR,CAAX;AAAA,QACIC,YAAYD,QAAQ,aAAR,CADhB;AAAA,QAEIE,WAAWF,QAAQ,YAAR,CAFf;AAAA,QAGIG,WAAWH,QAAQ,YAAR,CAHf;;AAKA;AACA,QAAII,iBAAiBL,KAAKM,QAA1B;AAAA,QACIC,YAAYC,KAAKC,GADrB;;AAGA;;;;;;;AAOA,aAASC,WAAT,CAAqBC,UAArB,EAAiC;AAC/B,UAAIC,OAAOJ,KAAKG,UAAL,CAAX;AACA,aAAO,UAASE,MAAT,EAAiBC,SAAjB,EAA4B;AACjCD,iBAASV,SAASU,MAAT,CAAT;AACAC,oBAAYA,aAAa,IAAb,GAAoB,CAApB,GAAwBP,UAAUL,UAAUY,SAAV,CAAV,EAAgC,GAAhC,CAApC;AACA,YAAIA,aAAaT,eAAeQ,MAAf,CAAjB,EAAyC;AACvC;AACA;AACA,cAAIE,OAAO,CAACX,SAASS,MAAT,IAAmB,GAApB,EAAyBG,KAAzB,CAA+B,GAA/B,CAAX;AAAA,cACIC,QAAQL,KAAKG,KAAK,CAAL,IAAU,GAAV,IAAiB,CAACA,KAAK,CAAL,CAAD,GAAWD,SAA5B,CAAL,CADZ;;AAGAC,iBAAO,CAACX,SAASa,KAAT,IAAkB,GAAnB,EAAwBD,KAAxB,CAA8B,GAA9B,CAAP;AACA,iBAAO,EAAED,KAAK,CAAL,IAAU,GAAV,IAAiB,CAACA,KAAK,CAAL,CAAD,GAAWD,SAA5B,CAAF,CAAP;AACD;AACD,eAAOF,KAAKC,MAAL,CAAP;AACD,OAbD;AAcD;;AAEDK,WAAOC,OAAP,GAAiBT,WAAjB","file":"_createRound.js","sourcesContent":["var root = require('./_root'),\n    toInteger = require('./toInteger'),\n    toNumber = require('./toNumber'),\n    toString = require('./toString');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeIsFinite = root.isFinite,\n    nativeMin = Math.min;\n\n/**\n * Creates a function like `_.round`.\n *\n * @private\n * @param {string} methodName The name of the `Math` method to use when rounding.\n * @returns {Function} Returns the new round function.\n */\nfunction createRound(methodName) {\n  var func = Math[methodName];\n  return function(number, precision) {\n    number = toNumber(number);\n    precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);\n    if (precision && nativeIsFinite(number)) {\n      // Shift with exponential notation to avoid floating-point issues.\n      // See [MDN](https://mdn.io/round#Examples) for more details.\n      var pair = (toString(number) + 'e').split('e'),\n          value = func(pair[0] + 'e' + (+pair[1] + precision));\n\n      pair = (toString(value) + 'e').split('e');\n      return +(pair[0] + 'e' + (+pair[1] - precision));\n    }\n    return func(number);\n  };\n}\n\nmodule.exports = createRound;\n"]}