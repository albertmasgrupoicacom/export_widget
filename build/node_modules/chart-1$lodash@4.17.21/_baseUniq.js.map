{"version":3,"sources":["_baseUniq.js"],"names":["SetCache","require","arrayIncludes","arrayIncludesWith","cacheHas","createSet","setToArray","LARGE_ARRAY_SIZE","baseUniq","array","iteratee","comparator","index","includes","length","isCommon","result","seen","set","outer","value","computed","seenIndex","push","module","exports"],"mappings":";;;;AAAA,QAAIA,WAAWC,QAAQ,aAAR,CAAf;AAAA,QACIC,gBAAgBD,QAAQ,kBAAR,CADpB;AAAA,QAEIE,oBAAoBF,QAAQ,sBAAR,CAFxB;AAAA,QAGIG,WAAWH,QAAQ,aAAR,CAHf;AAAA,QAIII,YAAYJ,QAAQ,cAAR,CAJhB;AAAA,QAKIK,aAAaL,QAAQ,eAAR,CALjB;;AAOA;AACA,QAAIM,mBAAmB,GAAvB;;AAEA;;;;;;;;;AASA,aAASC,QAAT,CAAkBC,KAAlB,EAAyBC,QAAzB,EAAmCC,UAAnC,EAA+C;AAC7C,UAAIC,QAAQ,CAAC,CAAb;AAAA,UACIC,WAAWX,aADf;AAAA,UAEIY,SAASL,MAAMK,MAFnB;AAAA,UAGIC,WAAW,IAHf;AAAA,UAIIC,SAAS,EAJb;AAAA,UAKIC,OAAOD,MALX;;AAOA,UAAIL,UAAJ,EAAgB;AACdI,mBAAW,KAAX;AACAF,mBAAWV,iBAAX;AACD,OAHD,MAIK,IAAIW,UAAUP,gBAAd,EAAgC;AACnC,YAAIW,MAAMR,WAAW,IAAX,GAAkBL,UAAUI,KAAV,CAA5B;AACA,YAAIS,GAAJ,EAAS;AACP,iBAAOZ,WAAWY,GAAX,CAAP;AACD;AACDH,mBAAW,KAAX;AACAF,mBAAWT,QAAX;AACAa,eAAO,IAAIjB,QAAJ,EAAP;AACD,OARI,MASA;AACHiB,eAAOP,WAAW,EAAX,GAAgBM,MAAvB;AACD;AACDG,aACA,OAAO,EAAEP,KAAF,GAAUE,MAAjB,EAAyB;AACvB,YAAIM,QAAQX,MAAMG,KAAN,CAAZ;AAAA,YACIS,WAAWX,WAAWA,SAASU,KAAT,CAAX,GAA6BA,KAD5C;;AAGAA,gBAAST,cAAcS,UAAU,CAAzB,GAA8BA,KAA9B,GAAsC,CAA9C;AACA,YAAIL,YAAYM,aAAaA,QAA7B,EAAuC;AACrC,cAAIC,YAAYL,KAAKH,MAArB;AACA,iBAAOQ,WAAP,EAAoB;AAClB,gBAAIL,KAAKK,SAAL,MAAoBD,QAAxB,EAAkC;AAChC,uBAASF,KAAT;AACD;AACF;AACD,cAAIT,QAAJ,EAAc;AACZO,iBAAKM,IAAL,CAAUF,QAAV;AACD;AACDL,iBAAOO,IAAP,CAAYH,KAAZ;AACD,SAXD,MAYK,IAAI,CAACP,SAASI,IAAT,EAAeI,QAAf,EAAyBV,UAAzB,CAAL,EAA2C;AAC9C,cAAIM,SAASD,MAAb,EAAqB;AACnBC,iBAAKM,IAAL,CAAUF,QAAV;AACD;AACDL,iBAAOO,IAAP,CAAYH,KAAZ;AACD;AACF;AACD,aAAOJ,MAAP;AACD;;AAEDQ,WAAOC,OAAP,GAAiBjB,QAAjB","file":"_baseUniq.js","sourcesContent":["var SetCache = require('./_SetCache'),\n    arrayIncludes = require('./_arrayIncludes'),\n    arrayIncludesWith = require('./_arrayIncludesWith'),\n    cacheHas = require('./_cacheHas'),\n    createSet = require('./_createSet'),\n    setToArray = require('./_setToArray');\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * The base implementation of `_.uniqBy` without support for iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new duplicate free array.\n */\nfunction baseUniq(array, iteratee, comparator) {\n  var index = -1,\n      includes = arrayIncludes,\n      length = array.length,\n      isCommon = true,\n      result = [],\n      seen = result;\n\n  if (comparator) {\n    isCommon = false;\n    includes = arrayIncludesWith;\n  }\n  else if (length >= LARGE_ARRAY_SIZE) {\n    var set = iteratee ? null : createSet(array);\n    if (set) {\n      return setToArray(set);\n    }\n    isCommon = false;\n    includes = cacheHas;\n    seen = new SetCache;\n  }\n  else {\n    seen = iteratee ? [] : result;\n  }\n  outer:\n  while (++index < length) {\n    var value = array[index],\n        computed = iteratee ? iteratee(value) : value;\n\n    value = (comparator || value !== 0) ? value : 0;\n    if (isCommon && computed === computed) {\n      var seenIndex = seen.length;\n      while (seenIndex--) {\n        if (seen[seenIndex] === computed) {\n          continue outer;\n        }\n      }\n      if (iteratee) {\n        seen.push(computed);\n      }\n      result.push(value);\n    }\n    else if (!includes(seen, computed, comparator)) {\n      if (seen !== result) {\n        seen.push(computed);\n      }\n      result.push(value);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseUniq;\n"]}