{"version":3,"sources":["_basePullAll.js"],"names":["arrayMap","require","baseIndexOf","baseIndexOfWith","baseUnary","copyArray","arrayProto","Array","prototype","splice","basePullAll","array","values","iteratee","comparator","indexOf","index","length","seen","fromIndex","value","computed","call","module","exports"],"mappings":";;;;AAAA,QAAIA,WAAWC,QAAQ,aAAR,CAAf;AAAA,QACIC,cAAcD,QAAQ,gBAAR,CADlB;AAAA,QAEIE,kBAAkBF,QAAQ,oBAAR,CAFtB;AAAA,QAGIG,YAAYH,QAAQ,cAAR,CAHhB;AAAA,QAIII,YAAYJ,QAAQ,cAAR,CAJhB;;AAMA;AACA,QAAIK,aAAaC,MAAMC,SAAvB;;AAEA;AACA,QAAIC,SAASH,WAAWG,MAAxB;;AAEA;;;;;;;;;;;AAWA,aAASC,WAAT,CAAqBC,KAArB,EAA4BC,MAA5B,EAAoCC,QAApC,EAA8CC,UAA9C,EAA0D;AACxD,UAAIC,UAAUD,aAAaX,eAAb,GAA+BD,WAA7C;AAAA,UACIc,QAAQ,CAAC,CADb;AAAA,UAEIC,SAASL,OAAOK,MAFpB;AAAA,UAGIC,OAAOP,KAHX;;AAKA,UAAIA,UAAUC,MAAd,EAAsB;AACpBA,iBAASP,UAAUO,MAAV,CAAT;AACD;AACD,UAAIC,QAAJ,EAAc;AACZK,eAAOlB,SAASW,KAAT,EAAgBP,UAAUS,QAAV,CAAhB,CAAP;AACD;AACD,aAAO,EAAEG,KAAF,GAAUC,MAAjB,EAAyB;AACvB,YAAIE,YAAY,CAAhB;AAAA,YACIC,QAAQR,OAAOI,KAAP,CADZ;AAAA,YAEIK,WAAWR,WAAWA,SAASO,KAAT,CAAX,GAA6BA,KAF5C;;AAIA,eAAO,CAACD,YAAYJ,QAAQG,IAAR,EAAcG,QAAd,EAAwBF,SAAxB,EAAmCL,UAAnC,CAAb,IAA+D,CAAC,CAAvE,EAA0E;AACxE,cAAII,SAASP,KAAb,EAAoB;AAClBF,mBAAOa,IAAP,CAAYJ,IAAZ,EAAkBC,SAAlB,EAA6B,CAA7B;AACD;AACDV,iBAAOa,IAAP,CAAYX,KAAZ,EAAmBQ,SAAnB,EAA8B,CAA9B;AACD;AACF;AACD,aAAOR,KAAP;AACD;;AAEDY,WAAOC,OAAP,GAAiBd,WAAjB","file":"_basePullAll.js","sourcesContent":["var arrayMap = require('./_arrayMap'),\n    baseIndexOf = require('./_baseIndexOf'),\n    baseIndexOfWith = require('./_baseIndexOfWith'),\n    baseUnary = require('./_baseUnary'),\n    copyArray = require('./_copyArray');\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype;\n\n/** Built-in value references. */\nvar splice = arrayProto.splice;\n\n/**\n * The base implementation of `_.pullAllBy` without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to remove.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns `array`.\n */\nfunction basePullAll(array, values, iteratee, comparator) {\n  var indexOf = comparator ? baseIndexOfWith : baseIndexOf,\n      index = -1,\n      length = values.length,\n      seen = array;\n\n  if (array === values) {\n    values = copyArray(values);\n  }\n  if (iteratee) {\n    seen = arrayMap(array, baseUnary(iteratee));\n  }\n  while (++index < length) {\n    var fromIndex = 0,\n        value = values[index],\n        computed = iteratee ? iteratee(value) : value;\n\n    while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {\n      if (seen !== array) {\n        splice.call(seen, fromIndex, 1);\n      }\n      splice.call(array, fromIndex, 1);\n    }\n  }\n  return array;\n}\n\nmodule.exports = basePullAll;\n"]}