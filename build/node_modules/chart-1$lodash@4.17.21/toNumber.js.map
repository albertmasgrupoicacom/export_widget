{"version":3,"sources":["toNumber.js"],"names":["baseTrim","require","isObject","isSymbol","NAN","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","parseInt","toNumber","value","other","valueOf","isBinary","test","slice","module","exports"],"mappings":";;;;AAAA,QAAIA,WAAWC,QAAQ,aAAR,CAAf;AAAA,QACIC,WAAWD,QAAQ,YAAR,CADf;AAAA,QAEIE,WAAWF,QAAQ,YAAR,CAFf;;AAIA;AACA,QAAIG,MAAM,IAAI,CAAd;;AAEA;AACA,QAAIC,aAAa,oBAAjB;;AAEA;AACA,QAAIC,aAAa,YAAjB;;AAEA;AACA,QAAIC,YAAY,aAAhB;;AAEA;AACA,QAAIC,eAAeC,QAAnB;;AAEA;;;;;;;;;;;;;;;;;;;;;;;AAuBA,aAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACvB,UAAI,OAAOA,KAAP,IAAgB,QAApB,EAA8B;AAC5B,eAAOA,KAAP;AACD;AACD,UAAIR,SAASQ,KAAT,CAAJ,EAAqB;AACnB,eAAOP,GAAP;AACD;AACD,UAAIF,SAASS,KAAT,CAAJ,EAAqB;AACnB,YAAIC,QAAQ,OAAOD,MAAME,OAAb,IAAwB,UAAxB,GAAqCF,MAAME,OAAN,EAArC,GAAuDF,KAAnE;AACAA,gBAAQT,SAASU,KAAT,IAAmBA,QAAQ,EAA3B,GAAiCA,KAAzC;AACD;AACD,UAAI,OAAOD,KAAP,IAAgB,QAApB,EAA8B;AAC5B,eAAOA,UAAU,CAAV,GAAcA,KAAd,GAAsB,CAACA,KAA9B;AACD;AACDA,cAAQX,SAASW,KAAT,CAAR;AACA,UAAIG,WAAWR,WAAWS,IAAX,CAAgBJ,KAAhB,CAAf;AACA,aAAQG,YAAYP,UAAUQ,IAAV,CAAeJ,KAAf,CAAb,GACHH,aAAaG,MAAMK,KAAN,CAAY,CAAZ,CAAb,EAA6BF,WAAW,CAAX,GAAe,CAA5C,CADG,GAEFT,WAAWU,IAAX,CAAgBJ,KAAhB,IAAyBP,GAAzB,GAA+B,CAACO,KAFrC;AAGD;;AAEDM,WAAOC,OAAP,GAAiBR,QAAjB","file":"toNumber.js","sourcesContent":["var baseTrim = require('./_baseTrim'),\n    isObject = require('./isObject'),\n    isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = baseTrim(value);\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = toNumber;\n"]}