{"version":3,"sources":["debounce.js"],"names":["isObject","require","now","toNumber","FUNC_ERROR_TEXT","nativeMax","Math","max","nativeMin","min","debounce","func","wait","options","lastArgs","lastThis","maxWait","result","timerId","lastCallTime","lastInvokeTime","leading","maxing","trailing","TypeError","invokeFunc","time","args","thisArg","undefined","apply","leadingEdge","setTimeout","timerExpired","remainingWait","timeSinceLastCall","timeSinceLastInvoke","timeWaiting","shouldInvoke","trailingEdge","cancel","clearTimeout","flush","debounced","isInvoking","arguments","module","exports"],"mappings":"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","file":"debounce.js","sourcesContent":["var isObject = require('./isObject'),\n    now = require('./now'),\n    toNumber = require('./toNumber');\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        timeWaiting = wait - timeSinceLastCall;\n\n    return maxing\n      ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\n      : timeWaiting;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        clearTimeout(timerId);\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\nmodule.exports = debounce;\n"]}