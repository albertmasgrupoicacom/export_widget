{"version":3,"sources":["_baseOrderBy.js"],"names":["arrayMap","require","baseGet","baseIteratee","baseMap","baseSortBy","baseUnary","compareMultiple","identity","isArray","baseOrderBy","collection","iteratees","orders","length","iteratee","value","index","result","key","criteria","object","other","module","exports"],"mappings":";;;;AAAA,QAAIA,WAAWC,QAAQ,aAAR,CAAf;AAAA,QACIC,UAAUD,QAAQ,YAAR,CADd;AAAA,QAEIE,eAAeF,QAAQ,iBAAR,CAFnB;AAAA,QAGIG,UAAUH,QAAQ,YAAR,CAHd;AAAA,QAIII,aAAaJ,QAAQ,eAAR,CAJjB;AAAA,QAKIK,YAAYL,QAAQ,cAAR,CALhB;AAAA,QAMIM,kBAAkBN,QAAQ,oBAAR,CANtB;AAAA,QAOIO,WAAWP,QAAQ,YAAR,CAPf;AAAA,QAQIQ,UAAUR,QAAQ,WAAR,CARd;;AAUA;;;;;;;;;AASA,aAASS,WAAT,CAAqBC,UAArB,EAAiCC,SAAjC,EAA4CC,MAA5C,EAAoD;AAClD,UAAID,UAAUE,MAAd,EAAsB;AACpBF,oBAAYZ,SAASY,SAAT,EAAoB,UAASG,QAAT,EAAmB;AACjD,cAAIN,QAAQM,QAAR,CAAJ,EAAuB;AACrB,mBAAO,UAASC,KAAT,EAAgB;AACrB,qBAAOd,QAAQc,KAAR,EAAeD,SAASD,MAAT,KAAoB,CAApB,GAAwBC,SAAS,CAAT,CAAxB,GAAsCA,QAArD,CAAP;AACD,aAFD;AAGD;AACD,iBAAOA,QAAP;AACD,SAPW,CAAZ;AAQD,OATD,MASO;AACLH,oBAAY,CAACJ,QAAD,CAAZ;AACD;;AAED,UAAIS,QAAQ,CAAC,CAAb;AACAL,kBAAYZ,SAASY,SAAT,EAAoBN,UAAUH,YAAV,CAApB,CAAZ;;AAEA,UAAIe,SAASd,QAAQO,UAAR,EAAoB,UAASK,KAAT,EAAgBG,GAAhB,EAAqBR,UAArB,EAAiC;AAChE,YAAIS,WAAWpB,SAASY,SAAT,EAAoB,UAASG,QAAT,EAAmB;AACpD,iBAAOA,SAASC,KAAT,CAAP;AACD,SAFc,CAAf;AAGA,eAAO,EAAE,YAAYI,QAAd,EAAwB,SAAS,EAAEH,KAAnC,EAA0C,SAASD,KAAnD,EAAP;AACD,OALY,CAAb;;AAOA,aAAOX,WAAWa,MAAX,EAAmB,UAASG,MAAT,EAAiBC,KAAjB,EAAwB;AAChD,eAAOf,gBAAgBc,MAAhB,EAAwBC,KAAxB,EAA+BT,MAA/B,CAAP;AACD,OAFM,CAAP;AAGD;;AAEDU,WAAOC,OAAP,GAAiBd,WAAjB","file":"_baseOrderBy.js","sourcesContent":["var arrayMap = require('./_arrayMap'),\n    baseGet = require('./_baseGet'),\n    baseIteratee = require('./_baseIteratee'),\n    baseMap = require('./_baseMap'),\n    baseSortBy = require('./_baseSortBy'),\n    baseUnary = require('./_baseUnary'),\n    compareMultiple = require('./_compareMultiple'),\n    identity = require('./identity'),\n    isArray = require('./isArray');\n\n/**\n * The base implementation of `_.orderBy` without param guards.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\n * @param {string[]} orders The sort orders of `iteratees`.\n * @returns {Array} Returns the new sorted array.\n */\nfunction baseOrderBy(collection, iteratees, orders) {\n  if (iteratees.length) {\n    iteratees = arrayMap(iteratees, function(iteratee) {\n      if (isArray(iteratee)) {\n        return function(value) {\n          return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);\n        }\n      }\n      return iteratee;\n    });\n  } else {\n    iteratees = [identity];\n  }\n\n  var index = -1;\n  iteratees = arrayMap(iteratees, baseUnary(baseIteratee));\n\n  var result = baseMap(collection, function(value, key, collection) {\n    var criteria = arrayMap(iteratees, function(iteratee) {\n      return iteratee(value);\n    });\n    return { 'criteria': criteria, 'index': ++index, 'value': value };\n  });\n\n  return baseSortBy(result, function(object, other) {\n    return compareMultiple(object, other, orders);\n  });\n}\n\nmodule.exports = baseOrderBy;\n"]}