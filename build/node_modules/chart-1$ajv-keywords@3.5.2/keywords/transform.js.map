{"version":3,"sources":["transform.js"],"names":["module","exports","defFunc","ajv","transform","trimLeft","value","replace","trimRight","trim","toLowerCase","toUpperCase","toEnumCase","cfg","hash","makeHashTableKey","definition","type","errors","modifying","valid","compile","schema","parentSchema","indexOf","enum","Error","i","length","v","k","data","dataPath","object","key","j","l","metaSchema","items","addKeyword"],"mappings":"AAAA;;;;;;AAEAA,WAAOC,OAAP,GAAiB,SAASC,OAAT,CAAkBC,GAAlB,EAAuB;AACtC,UAAIC,YAAY;AACdC,kBAAU,UAAUC,KAAV,EAAiB;AACzB,iBAAOA,MAAMC,OAAN,CAAc,QAAd,EAAwB,EAAxB,CAAP;AACD,SAHa;AAIdC,mBAAW,UAAUF,KAAV,EAAiB;AAC1B,iBAAOA,MAAMC,OAAN,CAAc,QAAd,EAAwB,EAAxB,CAAP;AACD,SANa;AAOdE,cAAM,UAAUH,KAAV,EAAiB;AACrB,iBAAOA,MAAMG,IAAN,EAAP;AACD,SATa;AAUdC,qBAAa,UAAUJ,KAAV,EAAiB;AAC5B,iBAAOA,MAAMI,WAAN,EAAP;AACD,SAZa;AAadC,qBAAa,UAAUL,KAAV,EAAiB;AAC5B,iBAAOA,MAAMK,WAAN,EAAP;AACD,SAfa;AAgBdC,oBAAY,UAAUN,KAAV,EAAiBO,GAAjB,EAAsB;AAChC,iBAAOA,IAAIC,IAAJ,CAASC,iBAAiBT,KAAjB,CAAT,KAAqCA,KAA5C;AACD;AAlBa,OAAhB;;AAqBAJ,cAAQc,UAAR,GAAqB;AACnBC,cAAM,QADa;AAEnBC,gBAAQ,KAFW;AAGnBC,mBAAW,IAHQ;AAInBC,eAAO,IAJY;AAKnBC,iBAAS,UAAUC,MAAV,EAAkBC,YAAlB,EAAgC;AACvC,cAAIV,GAAJ;;AAEA,cAAIS,OAAOE,OAAP,CAAe,YAAf,MAAiC,CAAC,CAAtC,EAAyC;AACvC;AACAX,kBAAM,EAACC,MAAM,EAAP,EAAN;;AAEA;AACA,gBAAI,CAACS,aAAaE,IAAlB,EACE,MAAM,IAAIC,KAAJ,CAAU,4EAAV,CAAN;AACF,iBAAK,IAAIC,IAAIJ,aAAaE,IAAb,CAAkBG,MAA/B,EAAuCD,GAAvC,EAA4CA,CAA5C,EAA+C;AAC7C,kBAAIE,IAAIN,aAAaE,IAAb,CAAkBE,CAAlB,CAAR;AACA,kBAAI,OAAOE,CAAP,KAAa,QAAjB,EAA2B;AAC3B,kBAAIC,IAAIf,iBAAiBc,CAAjB,CAAR;AACA;AACA,kBAAIhB,IAAIC,IAAJ,CAASgB,CAAT,CAAJ,EACE,MAAM,IAAIJ,KAAJ,CAAU,8GAAV,CAAN;AACFb,kBAAIC,IAAJ,CAASgB,CAAT,IAAcD,CAAd;AACD;AACF;;AAED,iBAAO,UAAUE,IAAV,EAAgBC,QAAhB,EAA0BC,MAA1B,EAAkCC,GAAlC,EAAuC;AAC5C;AACA,gBAAI,CAACD,MAAL,EAAa;;AAEb;AACA,iBAAK,IAAIE,IAAI,CAAR,EAAWC,IAAId,OAAOM,MAA3B,EAAmCO,IAAIC,CAAvC,EAA0CD,GAA1C,EACEJ,OAAO3B,UAAUkB,OAAOa,CAAP,CAAV,EAAqBJ,IAArB,EAA2BlB,GAA3B,CAAP;;AAEFoB,mBAAOC,GAAP,IAAcH,IAAd;AACD,WATD;AAUD,SApCkB;AAqCnBM,oBAAY;AACVpB,gBAAM,OADI;AAEVqB,iBAAO;AACLrB,kBAAM,QADD;AAELQ,kBAAM,CACJ,UADI,EACQ,WADR,EACqB,MADrB,EAEJ,aAFI,EAEW,aAFX,EAE0B,YAF1B;AAFD;AAFG;AArCO,OAArB;;AAiDAtB,UAAIoC,UAAJ,CAAe,WAAf,EAA4BrC,QAAQc,UAApC;AACA,aAAOb,GAAP;;AAEA,eAASY,gBAAT,CAA2BT,KAA3B,EAAkC;AAChC,eAAOA,MAAMI,WAAN,EAAP;AACD;AACF,KA7ED","file":"transform.js","sourcesContent":["'use strict';\n\nmodule.exports = function defFunc (ajv) {\n  var transform = {\n    trimLeft: function (value) {\n      return value.replace(/^[\\s]+/, '');\n    },\n    trimRight: function (value) {\n      return value.replace(/[\\s]+$/, '');\n    },\n    trim: function (value) {\n      return value.trim();\n    },\n    toLowerCase: function (value) {\n      return value.toLowerCase();\n    },\n    toUpperCase: function (value) {\n      return value.toUpperCase();\n    },\n    toEnumCase: function (value, cfg) {\n      return cfg.hash[makeHashTableKey(value)] || value;\n    }\n  };\n\n  defFunc.definition = {\n    type: 'string',\n    errors: false,\n    modifying: true,\n    valid: true,\n    compile: function (schema, parentSchema) {\n      var cfg;\n\n      if (schema.indexOf('toEnumCase') !== -1) {\n        // build hash table to enum values\n        cfg = {hash: {}};\n\n        // requires `enum` in schema\n        if (!parentSchema.enum)\n          throw new Error('Missing enum. To use `transform:[\"toEnumCase\"]`, `enum:[...]` is required.');\n        for (var i = parentSchema.enum.length; i--; i) {\n          var v = parentSchema.enum[i];\n          if (typeof v !== 'string') continue;\n          var k = makeHashTableKey(v);\n          // requires all `enum` values have unique keys\n          if (cfg.hash[k])\n            throw new Error('Invalid enum uniqueness. To use `transform:[\"toEnumCase\"]`, all values must be unique when case insensitive.');\n          cfg.hash[k] = v;\n        }\n      }\n\n      return function (data, dataPath, object, key) {\n        // skip if value only\n        if (!object) return;\n\n        // apply transform in order provided\n        for (var j = 0, l = schema.length; j < l; j++)\n          data = transform[schema[j]](data, cfg);\n\n        object[key] = data;\n      };\n    },\n    metaSchema: {\n      type: 'array',\n      items: {\n        type: 'string',\n        enum: [\n          'trimLeft', 'trimRight', 'trim',\n          'toLowerCase', 'toUpperCase', 'toEnumCase'\n        ]\n      }\n    }\n  };\n\n  ajv.addKeyword('transform', defFunc.definition);\n  return ajv;\n\n  function makeHashTableKey (value) {\n    return value.toLowerCase();\n  }\n};\n"]}