{"version":3,"sources":["deepProperties.js"],"names":["util","require","module","exports","defFunc","ajv","definition","type","macro","schema","schemas","pointer","push","getSchema","metaSchema","propertyNames","format","additionalProperties","metaSchemaRef","addKeyword","jsonPointer","segments","split","rootSchema","pointerSchema","i","length","segment","isLast","unescapeJsonPointer","properties","items","undefined","test","count","str","replace"],"mappings":"AAAA;;;;;;AAEA,QAAIA,OAAOC,QAAQ,SAAR,CAAX;;AAEAC,WAAOC,OAAP,GAAiB,SAASC,OAAT,CAAiBC,GAAjB,EAAsB;AACrCD,cAAQE,UAAR,GAAqB;AACnBC,cAAM,QADa;AAEnBC,eAAO,UAAUC,MAAV,EAAkB;AACvB,cAAIC,UAAU,EAAd;AACA,eAAK,IAAIC,OAAT,IAAoBF,MAApB,EACEC,QAAQE,IAAR,CAAaC,UAAUF,OAAV,EAAmBF,OAAOE,OAAP,CAAnB,CAAb;AACF,iBAAO,EAAC,SAASD,OAAV,EAAP;AACD,SAPkB;AAQnBI,oBAAY;AACVP,gBAAM,QADI;AAEVQ,yBAAe;AACbR,kBAAM,QADO;AAEbS,oBAAQ;AAFK,WAFL;AAMVC,gCAAsBjB,KAAKkB,aAAL,CAAmBb,GAAnB;AANZ;AARO,OAArB;;AAkBAA,UAAIc,UAAJ,CAAe,gBAAf,EAAiCf,QAAQE,UAAzC;AACA,aAAOD,GAAP;AACD,KArBD;;AAwBA,aAASQ,SAAT,CAAmBO,WAAnB,EAAgCX,MAAhC,EAAwC;AACtC,UAAIY,WAAWD,YAAYE,KAAZ,CAAkB,GAAlB,CAAf;AACA,UAAIC,aAAa,EAAjB;AACA,UAAIC,gBAAgBD,UAApB;AACA,WAAK,IAAIE,IAAE,CAAX,EAAcA,IAAEJ,SAASK,MAAzB,EAAiCD,GAAjC,EAAsC;AACpC,YAAIE,UAAUN,SAASI,CAAT,CAAd;AACA,YAAIG,SAASH,KAAKJ,SAASK,MAAT,GAAkB,CAApC;AACAC,kBAAUE,oBAAoBF,OAApB,CAAV;AACA,YAAIG,aAAaN,cAAcM,UAAd,GAA2B,EAA5C;AACA,YAAIC,QAAQC,SAAZ;AACA,YAAI,SAASC,IAAT,CAAcN,OAAd,CAAJ,EAA4B;AAC1B,cAAIO,QAAQ,CAACP,OAAb;AACAI,kBAAQP,cAAcO,KAAd,GAAsB,EAA9B;AACA,iBAAOG,OAAP,EAAgBH,MAAMnB,IAAN,CAAW,EAAX;AACjB;AACDY,wBAAgBI,SAASnB,MAAT,GAAkB,EAAlC;AACAqB,mBAAWH,OAAX,IAAsBH,aAAtB;AACA,YAAIO,KAAJ,EAAWA,MAAMnB,IAAN,CAAWY,aAAX;AACZ;AACD,aAAOD,UAAP;AACD;;AAGD,aAASM,mBAAT,CAA6BM,GAA7B,EAAkC;AAChC,aAAOA,IAAIC,OAAJ,CAAY,KAAZ,EAAmB,GAAnB,EAAwBA,OAAxB,CAAgC,KAAhC,EAAuC,GAAvC,CAAP;AACD","file":"deepProperties.js","sourcesContent":["'use strict';\n\nvar util = require('./_util');\n\nmodule.exports = function defFunc(ajv) {\n  defFunc.definition = {\n    type: 'object',\n    macro: function (schema) {\n      var schemas = [];\n      for (var pointer in schema)\n        schemas.push(getSchema(pointer, schema[pointer]));\n      return {'allOf': schemas};\n    },\n    metaSchema: {\n      type: 'object',\n      propertyNames: {\n        type: 'string',\n        format: 'json-pointer'\n      },\n      additionalProperties: util.metaSchemaRef(ajv)\n    }\n  };\n\n  ajv.addKeyword('deepProperties', defFunc.definition);\n  return ajv;\n};\n\n\nfunction getSchema(jsonPointer, schema) {\n  var segments = jsonPointer.split('/');\n  var rootSchema = {};\n  var pointerSchema = rootSchema;\n  for (var i=1; i<segments.length; i++) {\n    var segment = segments[i];\n    var isLast = i == segments.length - 1;\n    segment = unescapeJsonPointer(segment);\n    var properties = pointerSchema.properties = {};\n    var items = undefined;\n    if (/[0-9]+/.test(segment)) {\n      var count = +segment;\n      items = pointerSchema.items = [];\n      while (count--) items.push({});\n    }\n    pointerSchema = isLast ? schema : {};\n    properties[segment] = pointerSchema;\n    if (items) items.push(pointerSchema);\n  }\n  return rootSchema;\n}\n\n\nfunction unescapeJsonPointer(str) {\n  return str.replace(/~1/g, '/').replace(/~0/g, '~');\n}\n"]}