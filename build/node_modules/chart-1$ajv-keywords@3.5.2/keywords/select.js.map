{"version":3,"sources":["select.js"],"names":["util","require","module","exports","defFunc","ajv","_opts","$data","console","warn","metaSchemaRef","compiledCaseSchemas","definition","validate","v","schema","data","parentSchema","selectCases","undefined","Error","compiled","getCompiledSchemas","cases","default","valid","errors","metaSchema","type","addKeyword","compile","schemas","value","compileOrBoolean","additionalProperties","create","some","c","push"],"mappings":"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","file":"select.js","sourcesContent":["'use strict';\n\nvar util = require('./_util');\n\nmodule.exports = function defFunc(ajv) {\n  if (!ajv._opts.$data) {\n    console.warn('keyword select requires $data option');\n    return ajv;\n  }\n  var metaSchemaRef = util.metaSchemaRef(ajv);\n  var compiledCaseSchemas = [];\n\n  defFunc.definition = {\n    validate: function v(schema, data, parentSchema) {\n      if (parentSchema.selectCases === undefined)\n        throw new Error('keyword \"selectCases\" is absent');\n      var compiled = getCompiledSchemas(parentSchema, false);\n      var validate = compiled.cases[schema];\n      if (validate === undefined) validate = compiled.default;\n      if (typeof validate == 'boolean') return validate;\n      var valid = validate(data);\n      if (!valid) v.errors = validate.errors;\n      return valid;\n    },\n    $data: true,\n    metaSchema: { type: ['string', 'number', 'boolean', 'null'] }\n  };\n\n  ajv.addKeyword('select', defFunc.definition);\n  ajv.addKeyword('selectCases', {\n    compile: function (schemas, parentSchema) {\n      var compiled = getCompiledSchemas(parentSchema);\n      for (var value in schemas)\n        compiled.cases[value] = compileOrBoolean(schemas[value]);\n      return function() { return true; };\n    },\n    valid: true,\n    metaSchema: {\n      type: 'object',\n      additionalProperties: metaSchemaRef\n    }\n  });\n  ajv.addKeyword('selectDefault', {\n    compile: function (schema, parentSchema) {\n      var compiled = getCompiledSchemas(parentSchema);\n      compiled.default = compileOrBoolean(schema);\n      return function() { return true; };\n    },\n    valid: true,\n    metaSchema: metaSchemaRef\n  });\n  return ajv;\n\n\n  function getCompiledSchemas(parentSchema, create) {\n    var compiled;\n    compiledCaseSchemas.some(function (c) {\n      if (c.parentSchema === parentSchema) {\n        compiled = c;\n        return true;\n      }\n    });\n    if (!compiled && create !== false) {\n      compiled = {\n        parentSchema: parentSchema,\n        cases: {},\n        default: true\n      };\n      compiledCaseSchemas.push(compiled);\n    }\n    return compiled;\n  }\n\n  function compileOrBoolean(schema) {\n    return typeof schema == 'boolean'\n            ? schema\n            : ajv.compile(schema);\n  }\n};\n"]}