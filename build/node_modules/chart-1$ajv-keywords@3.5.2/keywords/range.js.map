{"version":3,"sources":["range.js"],"names":["module","exports","defFunc","ajv","definition","type","macro","schema","parentSchema","min","max","exclusive","exclusiveRange","validateRangeSchema","exclusiveMinimum","exclusiveMaximum","minimum","maximum","metaSchema","minItems","maxItems","items","addKeyword","undefined","Error"],"mappings":"AAAA;;;;;;AAEAA,WAAOC,OAAP,GAAiB,SAASC,OAAT,CAAiBC,GAAjB,EAAsB;AACrCD,cAAQE,UAAR,GAAqB;AACnBC,cAAM,QADa;AAEnBC,eAAO,UAAUC,MAAV,EAAkBC,YAAlB,EAAgC;AACrC,cAAIC,MAAMF,OAAO,CAAP,CAAV;AAAA,cACIG,MAAMH,OAAO,CAAP,CADV;AAAA,cAEII,YAAYH,aAAaI,cAF7B;;AAIAC,8BAAoBJ,GAApB,EAAyBC,GAAzB,EAA8BC,SAA9B;;AAEA,iBAAOA,cAAc,IAAd,GACG,EAACG,kBAAkBL,GAAnB,EAAwBM,kBAAkBL,GAA1C,EADH,GAEG,EAACM,SAASP,GAAV,EAAeQ,SAASP,GAAxB,EAFV;AAGD,SAZkB;AAanBQ,oBAAY;AACVb,gBAAM,OADI;AAEVc,oBAAU,CAFA;AAGVC,oBAAU,CAHA;AAIVC,iBAAO,EAAEhB,MAAM,QAAR;AAJG;AAbO,OAArB;;AAqBAF,UAAImB,UAAJ,CAAe,OAAf,EAAwBpB,QAAQE,UAAhC;AACAD,UAAImB,UAAJ,CAAe,gBAAf;AACA,aAAOnB,GAAP;;AAEA,eAASU,mBAAT,CAA6BJ,GAA7B,EAAkCC,GAAlC,EAAuCC,SAAvC,EAAkD;AAChD,YAAIA,cAAcY,SAAd,IAA2B,OAAOZ,SAAP,IAAoB,SAAnD,EACE,MAAM,IAAIa,KAAJ,CAAU,8DAAV,CAAN;;AAEF,YAAIf,MAAMC,GAAN,IAAcC,aAAaF,OAAOC,GAAtC,EACE,MAAM,IAAIc,KAAJ,CAAU,+BAAV,CAAN;AACH;AACF,KAjCD","file":"range.js","sourcesContent":["'use strict';\n\nmodule.exports = function defFunc(ajv) {\n  defFunc.definition = {\n    type: 'number',\n    macro: function (schema, parentSchema) {\n      var min = schema[0]\n        , max = schema[1]\n        , exclusive = parentSchema.exclusiveRange;\n\n      validateRangeSchema(min, max, exclusive);\n\n      return exclusive === true\n              ? {exclusiveMinimum: min, exclusiveMaximum: max}\n              : {minimum: min, maximum: max};\n    },\n    metaSchema: {\n      type: 'array',\n      minItems: 2,\n      maxItems: 2,\n      items: { type: 'number' }\n    }\n  };\n\n  ajv.addKeyword('range', defFunc.definition);\n  ajv.addKeyword('exclusiveRange');\n  return ajv;\n\n  function validateRangeSchema(min, max, exclusive) {\n    if (exclusive !== undefined && typeof exclusive != 'boolean')\n      throw new Error('Invalid schema for exclusiveRange keyword, should be boolean');\n\n    if (min > max || (exclusive && min == max))\n      throw new Error('There are no numbers in range');\n  }\n};\n"]}