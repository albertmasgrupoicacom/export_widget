{"version":3,"sources":["deepRequired.js"],"names":["module","exports","defFunc","ajv","definition","type","inline","it","keyword","schema","expr","i","length","getData","dataLevel","metaSchema","items","format","addKeyword","jsonPointer","lvl","data","segments","split","segment","getProperty","unescapeJsonPointer","IDENTIFIER","INTEGER","SINGLE_QUOTE","key","test","replace","str"],"mappings":"AAAA;;;;;;AAEAA,WAAOC,OAAP,GAAiB,SAASC,OAAT,CAAiBC,GAAjB,EAAsB;AACrCD,cAAQE,UAAR,GAAqB;AACnBC,cAAM,QADa;AAEnBC,gBAAQ,UAAUC,EAAV,EAAcC,OAAd,EAAuBC,MAAvB,EAA+B;AACrC,cAAIC,OAAO,EAAX;AACA,eAAK,IAAIC,IAAE,CAAX,EAAcA,IAAEF,OAAOG,MAAvB,EAA+BD,GAA/B,EAAoC;AAClC,gBAAIA,CAAJ,EAAOD,QAAQ,MAAR;AACPA,oBAAQ,MAAMG,QAAQJ,OAAOE,CAAP,CAAR,EAAmBJ,GAAGO,SAAtB,CAAN,GAAyC,iBAAjD;AACD;AACD,iBAAOJ,IAAP;AACD,SATkB;AAUnBK,oBAAY;AACVV,gBAAM,OADI;AAEVW,iBAAO;AACLX,kBAAM,QADD;AAELY,oBAAQ;AAFH;AAFG;AAVO,OAArB;;AAmBAd,UAAIe,UAAJ,CAAe,cAAf,EAA+BhB,QAAQE,UAAvC;AACA,aAAOD,GAAP;AACD,KAtBD;;AAyBA,aAASU,OAAT,CAAiBM,WAAjB,EAA8BC,GAA9B,EAAmC;AACjC,UAAIC,OAAO,UAAUD,OAAO,EAAjB,CAAX;AACA,UAAI,CAACD,WAAL,EAAkB,OAAOE,IAAP;;AAElB,UAAIX,OAAOW,IAAX;AACA,UAAIC,WAAWH,YAAYI,KAAZ,CAAkB,GAAlB,CAAf;AACA,WAAK,IAAIZ,IAAE,CAAX,EAAcA,IAAEW,SAASV,MAAzB,EAAiCD,GAAjC,EAAsC;AACpC,YAAIa,UAAUF,SAASX,CAAT,CAAd;AACAU,gBAAQI,YAAYC,oBAAoBF,OAApB,CAAZ,CAAR;AACAd,gBAAQ,SAASW,IAAjB;AACD;AACD,aAAOX,IAAP;AACD;;AAGD,QAAIiB,aAAa,uBAAjB;AACA,QAAIC,UAAU,UAAd;AACA,QAAIC,eAAe,OAAnB;AACA,aAASJ,WAAT,CAAqBK,GAArB,EAA0B;AACxB,aAAOF,QAAQG,IAAR,CAAaD,GAAb,IACG,MAAMA,GAAN,GAAY,GADf,GAEGH,WAAWI,IAAX,CAAgBD,GAAhB,IACE,MAAMA,GADR,GAEE,OAAOA,IAAIE,OAAJ,CAAYH,YAAZ,EAA0B,MAA1B,CAAP,GAA2C,IAJvD;AAKD;;AAGD,aAASH,mBAAT,CAA6BO,GAA7B,EAAkC;AAChC,aAAOA,IAAID,OAAJ,CAAY,KAAZ,EAAmB,GAAnB,EAAwBA,OAAxB,CAAgC,KAAhC,EAAuC,GAAvC,CAAP;AACD","file":"deepRequired.js","sourcesContent":["'use strict';\n\nmodule.exports = function defFunc(ajv) {\n  defFunc.definition = {\n    type: 'object',\n    inline: function (it, keyword, schema) {\n      var expr = '';\n      for (var i=0; i<schema.length; i++) {\n        if (i) expr += ' && ';\n        expr += '(' + getData(schema[i], it.dataLevel) + ' !== undefined)';\n      }\n      return expr;\n    },\n    metaSchema: {\n      type: 'array',\n      items: {\n        type: 'string',\n        format: 'json-pointer'\n      }\n    }\n  };\n\n  ajv.addKeyword('deepRequired', defFunc.definition);\n  return ajv;\n};\n\n\nfunction getData(jsonPointer, lvl) {\n  var data = 'data' + (lvl || '');\n  if (!jsonPointer) return data;\n\n  var expr = data;\n  var segments = jsonPointer.split('/');\n  for (var i=1; i<segments.length; i++) {\n    var segment = segments[i];\n    data += getProperty(unescapeJsonPointer(segment));\n    expr += ' && ' + data;\n  }\n  return expr;\n}\n\n\nvar IDENTIFIER = /^[a-z$_][a-z$_0-9]*$/i;\nvar INTEGER = /^[0-9]+$/;\nvar SINGLE_QUOTE = /'|\\\\/g;\nfunction getProperty(key) {\n  return INTEGER.test(key)\n          ? '[' + key + ']'\n          : IDENTIFIER.test(key)\n            ? '.' + key\n            : \"['\" + key.replace(SINGLE_QUOTE, '\\\\$&') + \"']\";\n}\n\n\nfunction unescapeJsonPointer(str) {\n  return str.replace(/~1/g, '/').replace(/~0/g, '~');\n}\n"]}