{"version":3,"sources":["instanceof.js"],"names":["CONSTRUCTORS","Object","Array","Function","Number","String","Date","RegExp","module","exports","defFunc","ajv","Buffer","Promise","definition","compile","schema","Constructor","getConstructor","data","constructors","map","i","length","metaSchema","anyOf","type","items","addKeyword","c","Error"],"mappings":"AAAA;;;;;;AAEA,QAAIA,eAAe;AACjBC,cAAQA,MADS;AAEjBC,aAAOA,KAFU;AAGjBC,gBAAUA,QAHO;AAIjBC,cAAQA,MAJS;AAKjBC,cAAQA,MALS;AAMjBC,YAAMA,IANW;AAOjBC,cAAQA;AAPS,KAAnB;;AAUAC,WAAOC,OAAP,GAAiB,SAASC,OAAT,CAAiBC,GAAjB,EAAsB;AACrC;AACA,UAAI,OAAOC,MAAP,IAAiB,WAArB,EACEZ,aAAaY,MAAb,GAAsBA,MAAtB;;AAEF;AACA,UAAI,OAAOC,OAAP,IAAkB,WAAtB,EACEb,aAAaa,OAAb,GAAuBA,OAAvB;;AAEFH,cAAQI,UAAR,GAAqB;AACnBC,iBAAS,UAAUC,MAAV,EAAkB;AACzB,cAAI,OAAOA,MAAP,IAAiB,QAArB,EAA+B;AAC7B,gBAAIC,cAAcC,eAAeF,MAAf,CAAlB;AACA,mBAAO,UAAUG,IAAV,EAAgB;AACrB,qBAAOA,gBAAgBF,WAAvB;AACD,aAFD;AAGD;;AAED,cAAIG,eAAeJ,OAAOK,GAAP,CAAWH,cAAX,CAAnB;AACA,iBAAO,UAAUC,IAAV,EAAgB;AACrB,iBAAK,IAAIG,IAAE,CAAX,EAAcA,IAAEF,aAAaG,MAA7B,EAAqCD,GAArC,EACE,IAAIH,gBAAgBC,aAAaE,CAAb,CAApB,EAAqC,OAAO,IAAP;AACvC,mBAAO,KAAP;AACD,WAJD;AAKD,SAfkB;AAgBnBtB,sBAAcA,YAhBK;AAiBnBwB,oBAAY;AACVC,iBAAO,CACL,EAAEC,MAAM,QAAR,EADK,EAEL;AACEA,kBAAM,OADR;AAEEC,mBAAO,EAAED,MAAM,QAAR;AAFT,WAFK;AADG;AAjBO,OAArB;;AA4BAf,UAAIiB,UAAJ,CAAe,YAAf,EAA6BlB,QAAQI,UAArC;AACA,aAAOH,GAAP;;AAEA,eAASO,cAAT,CAAwBW,CAAxB,EAA2B;AACzB,YAAIZ,cAAcjB,aAAa6B,CAAb,CAAlB;AACA,YAAIZ,WAAJ,EAAiB,OAAOA,WAAP;AACjB,cAAM,IAAIa,KAAJ,CAAU,wCAAwCD,CAAlD,CAAN;AACD;AACF,KA7CD","file":"instanceof.js","sourcesContent":["'use strict';\n\nvar CONSTRUCTORS = {\n  Object: Object,\n  Array: Array,\n  Function: Function,\n  Number: Number,\n  String: String,\n  Date: Date,\n  RegExp: RegExp\n};\n\nmodule.exports = function defFunc(ajv) {\n  /* istanbul ignore else */\n  if (typeof Buffer != 'undefined')\n    CONSTRUCTORS.Buffer = Buffer;\n\n  /* istanbul ignore else */\n  if (typeof Promise != 'undefined')\n    CONSTRUCTORS.Promise = Promise;\n\n  defFunc.definition = {\n    compile: function (schema) {\n      if (typeof schema == 'string') {\n        var Constructor = getConstructor(schema);\n        return function (data) {\n          return data instanceof Constructor;\n        };\n      }\n\n      var constructors = schema.map(getConstructor);\n      return function (data) {\n        for (var i=0; i<constructors.length; i++)\n          if (data instanceof constructors[i]) return true;\n        return false;\n      };\n    },\n    CONSTRUCTORS: CONSTRUCTORS,\n    metaSchema: {\n      anyOf: [\n        { type: 'string' },\n        {\n          type: 'array',\n          items: { type: 'string' }\n        }\n      ]\n    }\n  };\n\n  ajv.addKeyword('instanceof', defFunc.definition);\n  return ajv;\n\n  function getConstructor(c) {\n    var Constructor = CONSTRUCTORS[c];\n    if (Constructor) return Constructor;\n    throw new Error('invalid \"instanceof\" keyword value ' + c);\n  }\n};\n"]}