{"version":3,"sources":["regexp.js"],"names":["module","exports","defFunc","ajv","definition","type","inline","it","keyword","schema","getRegExp","RegExp","pattern","flags","rx","match","Error","e","console","error","dataLevel","metaSchema","properties","required","additionalProperties","addKeyword"],"mappings":"AAAA;;;;;;AAEAA,WAAOC,OAAP,GAAiB,SAASC,OAAT,CAAiBC,GAAjB,EAAsB;AACrCD,cAAQE,UAAR,GAAqB;AACnBC,cAAM,QADa;AAEnBC,gBAAQ,UAAUC,EAAV,EAAcC,OAAd,EAAuBC,MAAvB,EAA+B;AACrC,iBAEA,SAASC,SAAT,GAAqB;AACnB,gBAAI;AACF,kBAAI,OAAOD,MAAP,IAAiB,QAArB,EACE,OAAO,IAAIE,MAAJ,CAAWF,OAAOG,OAAlB,EAA2BH,OAAOI,KAAlC,CAAP;;AAEF,kBAAIC,KAAKL,OAAOM,KAAP,CAAa,sBAAb,CAAT;AACA,kBAAID,EAAJ,EAAQ,OAAO,IAAIH,MAAJ,CAAWG,GAAG,CAAH,CAAX,EAAkBA,GAAG,CAAH,CAAlB,CAAP;AACR,oBAAM,IAAIE,KAAJ,CAAU,iCAAV,CAAN;AACD,aAPD,CAOE,OAAMC,CAAN,EAAS;AACTC,sBAAQC,KAAR,CAAc,oBAAd,EAAoCV,MAApC,EAA4C,YAA5C;AACA,oBAAMQ,CAAN;AACD;AACF,WAdM,KAAc,YAAd,IAA8BV,GAAGa,SAAH,IAAgB,EAA9C,IAAoD,GAA3D;AAeD,SAlBkB;AAmBnBC,oBAAY;AACVhB,gBAAM,CAAC,QAAD,EAAW,QAAX,CADI;AAEViB,sBAAY;AACVV,qBAAS,EAAEP,MAAM,QAAR,EADC;AAEVQ,mBAAO,EAAER,MAAM,QAAR;AAFG,WAFF;AAMVkB,oBAAU,CAAC,SAAD,CANA;AAOVC,gCAAsB;AAPZ;AAnBO,OAArB;;AA8BArB,UAAIsB,UAAJ,CAAe,QAAf,EAAyBvB,QAAQE,UAAjC;AACA,aAAOD,GAAP;AACD,KAjCD","file":"regexp.js","sourcesContent":["'use strict';\n\nmodule.exports = function defFunc(ajv) {\n  defFunc.definition = {\n    type: 'string',\n    inline: function (it, keyword, schema) {\n      return getRegExp() + '.test(data' + (it.dataLevel || '') + ')';\n\n      function getRegExp() {\n        try {\n          if (typeof schema == 'object')\n            return new RegExp(schema.pattern, schema.flags);\n\n          var rx = schema.match(/^\\/(.*)\\/([gimuy]*)$/);\n          if (rx) return new RegExp(rx[1], rx[2]);\n          throw new Error('cannot parse string into RegExp');\n        } catch(e) {\n          console.error('regular expression', schema, 'is invalid');\n          throw e;\n        }\n      }\n    },\n    metaSchema: {\n      type: ['string', 'object'],\n      properties: {\n        pattern: { type: 'string' },\n        flags: { type: 'string' }\n      },\n      required: ['pattern'],\n      additionalProperties: false\n    }\n  };\n\n  ajv.addKeyword('regexp', defFunc.definition);\n  return ajv;\n};\n"]}