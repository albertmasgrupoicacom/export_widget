{"version":3,"sources":["hoist.js"],"names":["t","util","hasOwn","Object","prototype","hasOwnProperty","exports","hoist","funPath","assertFunction","node","vars","varDeclToExpr","vdec","includeIdentifiers","assertVariableDeclaration","exprs","declarations","forEach","dec","id","name","identifier","init","push","assignmentExpression","length","sequenceExpression","get","traverse","VariableDeclaration","exit","path","expr","remove","replaceWithOrRemove","expressionStatement","skip","ForStatement","isVariableDeclaration","ForXStatement","left","FunctionDeclaration","assignment","functionExpression","params","body","generator","expression","parentPath","isBlockStatement","unshiftContainer","FunctionExpression","paramNames","paramPath","param","isIdentifier","keys","call","variableDeclarator","variableDeclaration"],"mappings":"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","file":"hoist.js","sourcesContent":["/**\n * Copyright (c) 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * https://raw.github.com/facebook/regenerator/master/LICENSE file. An\n * additional grant of patent rights can be found in the PATENTS file in\n * the same directory.\n */\n\nimport * as t from \"babel-types\";\nimport * as util from \"./util\";\nlet hasOwn = Object.prototype.hasOwnProperty;\n\n// The hoist function takes a FunctionExpression or FunctionDeclaration\n// and replaces any Declaration nodes in its body with assignments, then\n// returns a VariableDeclaration containing just the names of the removed\n// declarations.\nexports.hoist = function(funPath) {\n  t.assertFunction(funPath.node);\n\n  let vars = {};\n\n  function varDeclToExpr(vdec, includeIdentifiers) {\n    t.assertVariableDeclaration(vdec);\n    // TODO assert.equal(vdec.kind, \"var\");\n    let exprs = [];\n\n    vdec.declarations.forEach(function(dec) {\n      // Note: We duplicate 'dec.id' here to ensure that the variable declaration IDs don't\n      // have the same 'loc' value, since that can make sourcemaps and retainLines behave poorly.\n      vars[dec.id.name] = t.identifier(dec.id.name);\n\n      if (dec.init) {\n        exprs.push(t.assignmentExpression(\n          \"=\", dec.id, dec.init\n        ));\n      } else if (includeIdentifiers) {\n        exprs.push(dec.id);\n      }\n    });\n\n    if (exprs.length === 0)\n      return null;\n\n    if (exprs.length === 1)\n      return exprs[0];\n\n    return t.sequenceExpression(exprs);\n  }\n\n  funPath.get(\"body\").traverse({\n    VariableDeclaration: {\n      exit: function(path) {\n        let expr = varDeclToExpr(path.node, false);\n        if (expr === null) {\n          path.remove();\n        } else {\n          // We don't need to traverse this expression any further because\n          // there can't be any new declarations inside an expression.\n          util.replaceWithOrRemove(path, t.expressionStatement(expr));\n        }\n\n        // Since the original node has been either removed or replaced,\n        // avoid traversing it any further.\n        path.skip();\n      }\n    },\n\n    ForStatement: function(path) {\n      let init = path.node.init;\n      if (t.isVariableDeclaration(init)) {\n        util.replaceWithOrRemove(path.get(\"init\"), varDeclToExpr(init, false));\n      }\n    },\n\n    ForXStatement: function(path) {\n      let left = path.get(\"left\");\n      if (left.isVariableDeclaration()) {\n        util.replaceWithOrRemove(left, varDeclToExpr(left.node, true));\n      }\n    },\n\n    FunctionDeclaration: function(path) {\n      let node = path.node;\n      vars[node.id.name] = node.id;\n\n      let assignment = t.expressionStatement(\n        t.assignmentExpression(\n          \"=\",\n          node.id,\n          t.functionExpression(\n            node.id,\n            node.params,\n            node.body,\n            node.generator,\n            node.expression\n          )\n        )\n      );\n\n      if (path.parentPath.isBlockStatement()) {\n        // Insert the assignment form before the first statement in the\n        // enclosing block.\n        path.parentPath.unshiftContainer(\"body\", assignment);\n\n        // Remove the function declaration now that we've inserted the\n        // equivalent assignment form at the beginning of the block.\n        path.remove();\n      } else {\n        // If the parent node is not a block statement, then we can just\n        // replace the declaration with the equivalent assignment form\n        // without worrying about hoisting it.\n        util.replaceWithOrRemove(path, assignment);\n      }\n\n      // Don't hoist variables out of inner functions.\n      path.skip();\n    },\n\n    FunctionExpression: function(path) {\n      // Don't descend into nested function expressions.\n      path.skip();\n    }\n  });\n\n  let paramNames = {};\n  funPath.get(\"params\").forEach(function(paramPath) {\n    let param = paramPath.node;\n    if (t.isIdentifier(param)) {\n      paramNames[param.name] = param;\n    } else {\n      // Variables declared by destructuring parameter patterns will be\n      // harmlessly re-declared.\n    }\n  });\n\n  let declarations = [];\n\n  Object.keys(vars).forEach(function(name) {\n    if (!hasOwn.call(paramNames, name)) {\n      declarations.push(t.variableDeclarator(vars[name], null));\n    }\n  });\n\n  if (declarations.length === 0) {\n    return null; // Be sure to handle this case!\n  }\n\n  return t.variableDeclaration(\"var\", declarations);\n};\n"]}