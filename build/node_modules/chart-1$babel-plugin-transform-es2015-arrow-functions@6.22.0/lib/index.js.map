{"version":3,"sources":["index.js"],"names":["exports","__esModule","default","_ref","t","types","visitor","ArrowFunctionExpression","path","state","opts","spec","node","shadow","this","type","boundThis","thisExpression","_forceShadow","ensureBlock","get","unshiftContainer","expressionStatement","callExpression","addHelper","replaceWith","memberExpression","identifier","arrowFunctionToShadowed","module"],"mappings":"AAAA;;;;;;AAEAA,YAAQC,UAAR,GAAqB,IAArB;;AAEAD,YAAQE,OAAR,GAAkB,UAAUC,IAAV,EAAgB;AAChC,UAAIC,IAAID,KAAKE,KAAb;;AAEA,aAAO;AACLC,iBAAS;AACPC,mCAAyB,SAASA,uBAAT,CAAiCC,IAAjC,EAAuCC,KAAvC,EAA8C;AACrE,gBAAIA,MAAMC,IAAN,CAAWC,IAAf,EAAqB;AACnB,kBAAIC,OAAOJ,KAAKI,IAAhB;;AAEA,kBAAIA,KAAKC,MAAT,EAAiB;;AAEjBD,mBAAKC,MAAL,GAAc,EAAEC,MAAM,KAAR,EAAd;AACAF,mBAAKG,IAAL,GAAY,oBAAZ;;AAEA,kBAAIC,YAAYZ,EAAEa,cAAF,EAAhB;AACAD,wBAAUE,YAAV,GAAyBV,IAAzB;;AAEAA,mBAAKW,WAAL;AACAX,mBAAKY,GAAL,CAAS,MAAT,EAAiBC,gBAAjB,CAAkC,MAAlC,EAA0CjB,EAAEkB,mBAAF,CAAsBlB,EAAEmB,cAAF,CAAiBd,MAAMe,SAAN,CAAgB,eAAhB,CAAjB,EAAmD,CAACpB,EAAEa,cAAF,EAAD,EAAqBD,SAArB,CAAnD,CAAtB,CAA1C;;AAEAR,mBAAKiB,WAAL,CAAiBrB,EAAEmB,cAAF,CAAiBnB,EAAEsB,gBAAF,CAAmBd,IAAnB,EAAyBR,EAAEuB,UAAF,CAAa,MAAb,CAAzB,CAAjB,EAAiE,CAACvB,EAAEa,cAAF,EAAD,CAAjE,CAAjB;AACD,aAfD,MAeO;AACLT,mBAAKoB,uBAAL;AACD;AACF;AApBM;AADJ,OAAP;AAwBD,KA3BD;;AA6BAC,WAAO7B,OAAP,GAAiBA,QAAQ,SAAR,CAAjB","file":"index.js","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\n\nexports.default = function (_ref) {\n  var t = _ref.types;\n\n  return {\n    visitor: {\n      ArrowFunctionExpression: function ArrowFunctionExpression(path, state) {\n        if (state.opts.spec) {\n          var node = path.node;\n\n          if (node.shadow) return;\n\n          node.shadow = { this: false };\n          node.type = \"FunctionExpression\";\n\n          var boundThis = t.thisExpression();\n          boundThis._forceShadow = path;\n\n          path.ensureBlock();\n          path.get(\"body\").unshiftContainer(\"body\", t.expressionStatement(t.callExpression(state.addHelper(\"newArrowCheck\"), [t.thisExpression(), boundThis])));\n\n          path.replaceWith(t.callExpression(t.memberExpression(node, t.identifier(\"bind\")), [t.thisExpression()]));\n        } else {\n          path.arrowFunctionToShadowed();\n        }\n      }\n    }\n  };\n};\n\nmodule.exports = exports[\"default\"];"]}