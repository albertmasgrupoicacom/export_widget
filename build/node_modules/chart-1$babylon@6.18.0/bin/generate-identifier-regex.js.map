{"version":3,"sources":["generate-identifier-regex.js"],"names":["version","start","require","filter","ch","last","cont","concat","search","arr","starting","i","length","pad","str","width","esc","code","hex","toString","generate","chars","astral","re","at","from","to","push","nonASCII","startData","contData","console","log","JSON","stringify"],"mappings":"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","file":"generate-identifier-regex.js","sourcesContent":["\"use strict\";\n\n// Which Unicode version should be used?\nconst version = \"9.0.0\";\n\nconst start = require(\"unicode-\" + version + \"/Binary_Property/ID_Start/code-points.js\")\n    .filter(function(ch) { return ch > 0x7f; });\nlet last = -1;\nconst cont = [0x200c, 0x200d].concat(\n  require(\"unicode-\" + version + \"/Binary_Property/ID_Continue/code-points.js\")\n    .filter(function(ch) {\n      return ch > 0x7f && search(start, ch, last + 1) == -1;\n    })\n  );\n\nfunction search(arr, ch, starting) {\n  for (let i = starting; arr[i] <= ch && i < arr.length; last = i++)\n    if (arr[i] === ch)\n      return i;\n  return -1;\n}\n\nfunction pad(str, width) {\n  while (str.length < width) str = \"0\" + str;\n  return str;\n}\n\nfunction esc(code) {\n  const hex = code.toString(16);\n  if (hex.length <= 2) return \"\\\\x\" + pad(hex, 2);\n  else return \"\\\\u\" + pad(hex, 4);\n}\n\nfunction generate(chars) {\n  const astral = [];\n  let re = \"\";\n  for (let i = 0, at = 0x10000; i < chars.length; i++) {\n    const from = chars[i];\n    let to = from;\n    while (i < chars.length - 1 && chars[i + 1] == to + 1) {\n      i++;\n      to++;\n    }\n    if (to <= 0xffff) {\n      if (from == to) re += esc(from);\n      else if (from + 1 == to) re += esc(from) + esc(to);\n      else re += esc(from) + \"-\" + esc(to);\n    } else {\n      astral.push(from - at, to - from);\n      at = to;\n    }\n  }\n  return { nonASCII: re, astral: astral };\n}\n\nconst startData = generate(start);\nconst contData = generate(cont);\n\nconsole.log(\"let nonASCIIidentifierStartChars = \\\"\" + startData.nonASCII + \"\\\";\");\nconsole.log(\"let nonASCIIidentifierChars = \\\"\" + contData.nonASCII + \"\\\";\");\nconsole.log(\"const astralIdentifierStartCodes = \" + JSON.stringify(startData.astral) + \";\");\nconsole.log(\"const astralIdentifierCodes = \" + JSON.stringify(contData.astral) + \";\");\n"]}