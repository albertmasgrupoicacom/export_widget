{"version":3,"sources":["resolve.js"],"names":["URI","require","equal","util","SchemaObject","traverse","module","exports","resolve","normalizeId","fullPath","getFullPath","url","resolveUrl","ids","resolveIds","inlineRef","schema","resolveSchema","compile","root","ref","refVal","_refs","call","_schemas","_opts","inlineRefs","validate","_compile","res","v","baseId","undefined","p","parse","refPath","_getFullPath","_getId","Object","keys","length","id","resolveRecursive","getJsonPointer","parsedRef","PREVENT_SCOPE_CHANGE","toHash","fragment","slice","parts","split","i","part","unescapeFragment","$ref","SIMPLE_INLINED","limit","checkNoRef","countKeys","item","Array","isArray","key","count","Infinity","normalize","serialize","TRAILING_SLASH_HASH","replace","schemaId","baseIds","fullPaths","localRefs","self","allKeys","sch","jsonPtr","rootSchema","parentJsonPtr","parentKeyword","parentSchema","keyIndex","escapeFragment","Error"],"mappings":"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","file":"resolve.js","sourcesContent":["'use strict';\n\nvar URI = require('uri-js')\n  , equal = require('fast-deep-equal')\n  , util = require('./util')\n  , SchemaObject = require('./schema_obj')\n  , traverse = require('json-schema-traverse');\n\nmodule.exports = resolve;\n\nresolve.normalizeId = normalizeId;\nresolve.fullPath = getFullPath;\nresolve.url = resolveUrl;\nresolve.ids = resolveIds;\nresolve.inlineRef = inlineRef;\nresolve.schema = resolveSchema;\n\n/**\n * [resolve and compile the references ($ref)]\n * @this   Ajv\n * @param  {Function} compile reference to schema compilation funciton (localCompile)\n * @param  {Object} root object with information about the root schema for the current schema\n * @param  {String} ref reference to resolve\n * @return {Object|Function} schema object (if the schema can be inlined) or validation function\n */\nfunction resolve(compile, root, ref) {\n  /* jshint validthis: true */\n  var refVal = this._refs[ref];\n  if (typeof refVal == 'string') {\n    if (this._refs[refVal]) refVal = this._refs[refVal];\n    else return resolve.call(this, compile, root, refVal);\n  }\n\n  refVal = refVal || this._schemas[ref];\n  if (refVal instanceof SchemaObject) {\n    return inlineRef(refVal.schema, this._opts.inlineRefs)\n            ? refVal.schema\n            : refVal.validate || this._compile(refVal);\n  }\n\n  var res = resolveSchema.call(this, root, ref);\n  var schema, v, baseId;\n  if (res) {\n    schema = res.schema;\n    root = res.root;\n    baseId = res.baseId;\n  }\n\n  if (schema instanceof SchemaObject) {\n    v = schema.validate || compile.call(this, schema.schema, root, undefined, baseId);\n  } else if (schema !== undefined) {\n    v = inlineRef(schema, this._opts.inlineRefs)\n        ? schema\n        : compile.call(this, schema, root, undefined, baseId);\n  }\n\n  return v;\n}\n\n\n/**\n * Resolve schema, its root and baseId\n * @this Ajv\n * @param  {Object} root root object with properties schema, refVal, refs\n * @param  {String} ref  reference to resolve\n * @return {Object} object with properties schema, root, baseId\n */\nfunction resolveSchema(root, ref) {\n  /* jshint validthis: true */\n  var p = URI.parse(ref)\n    , refPath = _getFullPath(p)\n    , baseId = getFullPath(this._getId(root.schema));\n  if (Object.keys(root.schema).length === 0 || refPath !== baseId) {\n    var id = normalizeId(refPath);\n    var refVal = this._refs[id];\n    if (typeof refVal == 'string') {\n      return resolveRecursive.call(this, root, refVal, p);\n    } else if (refVal instanceof SchemaObject) {\n      if (!refVal.validate) this._compile(refVal);\n      root = refVal;\n    } else {\n      refVal = this._schemas[id];\n      if (refVal instanceof SchemaObject) {\n        if (!refVal.validate) this._compile(refVal);\n        if (id == normalizeId(ref))\n          return { schema: refVal, root: root, baseId: baseId };\n        root = refVal;\n      } else {\n        return;\n      }\n    }\n    if (!root.schema) return;\n    baseId = getFullPath(this._getId(root.schema));\n  }\n  return getJsonPointer.call(this, p, baseId, root.schema, root);\n}\n\n\n/* @this Ajv */\nfunction resolveRecursive(root, ref, parsedRef) {\n  /* jshint validthis: true */\n  var res = resolveSchema.call(this, root, ref);\n  if (res) {\n    var schema = res.schema;\n    var baseId = res.baseId;\n    root = res.root;\n    var id = this._getId(schema);\n    if (id) baseId = resolveUrl(baseId, id);\n    return getJsonPointer.call(this, parsedRef, baseId, schema, root);\n  }\n}\n\n\nvar PREVENT_SCOPE_CHANGE = util.toHash(['properties', 'patternProperties', 'enum', 'dependencies', 'definitions']);\n/* @this Ajv */\nfunction getJsonPointer(parsedRef, baseId, schema, root) {\n  /* jshint validthis: true */\n  parsedRef.fragment = parsedRef.fragment || '';\n  if (parsedRef.fragment.slice(0,1) != '/') return;\n  var parts = parsedRef.fragment.split('/');\n\n  for (var i = 1; i < parts.length; i++) {\n    var part = parts[i];\n    if (part) {\n      part = util.unescapeFragment(part);\n      schema = schema[part];\n      if (schema === undefined) break;\n      var id;\n      if (!PREVENT_SCOPE_CHANGE[part]) {\n        id = this._getId(schema);\n        if (id) baseId = resolveUrl(baseId, id);\n        if (schema.$ref) {\n          var $ref = resolveUrl(baseId, schema.$ref);\n          var res = resolveSchema.call(this, root, $ref);\n          if (res) {\n            schema = res.schema;\n            root = res.root;\n            baseId = res.baseId;\n          }\n        }\n      }\n    }\n  }\n  if (schema !== undefined && schema !== root.schema)\n    return { schema: schema, root: root, baseId: baseId };\n}\n\n\nvar SIMPLE_INLINED = util.toHash([\n  'type', 'format', 'pattern',\n  'maxLength', 'minLength',\n  'maxProperties', 'minProperties',\n  'maxItems', 'minItems',\n  'maximum', 'minimum',\n  'uniqueItems', 'multipleOf',\n  'required', 'enum'\n]);\nfunction inlineRef(schema, limit) {\n  if (limit === false) return false;\n  if (limit === undefined || limit === true) return checkNoRef(schema);\n  else if (limit) return countKeys(schema) <= limit;\n}\n\n\nfunction checkNoRef(schema) {\n  var item;\n  if (Array.isArray(schema)) {\n    for (var i=0; i<schema.length; i++) {\n      item = schema[i];\n      if (typeof item == 'object' && !checkNoRef(item)) return false;\n    }\n  } else {\n    for (var key in schema) {\n      if (key == '$ref') return false;\n      item = schema[key];\n      if (typeof item == 'object' && !checkNoRef(item)) return false;\n    }\n  }\n  return true;\n}\n\n\nfunction countKeys(schema) {\n  var count = 0, item;\n  if (Array.isArray(schema)) {\n    for (var i=0; i<schema.length; i++) {\n      item = schema[i];\n      if (typeof item == 'object') count += countKeys(item);\n      if (count == Infinity) return Infinity;\n    }\n  } else {\n    for (var key in schema) {\n      if (key == '$ref') return Infinity;\n      if (SIMPLE_INLINED[key]) {\n        count++;\n      } else {\n        item = schema[key];\n        if (typeof item == 'object') count += countKeys(item) + 1;\n        if (count == Infinity) return Infinity;\n      }\n    }\n  }\n  return count;\n}\n\n\nfunction getFullPath(id, normalize) {\n  if (normalize !== false) id = normalizeId(id);\n  var p = URI.parse(id);\n  return _getFullPath(p);\n}\n\n\nfunction _getFullPath(p) {\n  return URI.serialize(p).split('#')[0] + '#';\n}\n\n\nvar TRAILING_SLASH_HASH = /#\\/?$/;\nfunction normalizeId(id) {\n  return id ? id.replace(TRAILING_SLASH_HASH, '') : '';\n}\n\n\nfunction resolveUrl(baseId, id) {\n  id = normalizeId(id);\n  return URI.resolve(baseId, id);\n}\n\n\n/* @this Ajv */\nfunction resolveIds(schema) {\n  var schemaId = normalizeId(this._getId(schema));\n  var baseIds = {'': schemaId};\n  var fullPaths = {'': getFullPath(schemaId, false)};\n  var localRefs = {};\n  var self = this;\n\n  traverse(schema, {allKeys: true}, function(sch, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) {\n    if (jsonPtr === '') return;\n    var id = self._getId(sch);\n    var baseId = baseIds[parentJsonPtr];\n    var fullPath = fullPaths[parentJsonPtr] + '/' + parentKeyword;\n    if (keyIndex !== undefined)\n      fullPath += '/' + (typeof keyIndex == 'number' ? keyIndex : util.escapeFragment(keyIndex));\n\n    if (typeof id == 'string') {\n      id = baseId = normalizeId(baseId ? URI.resolve(baseId, id) : id);\n\n      var refVal = self._refs[id];\n      if (typeof refVal == 'string') refVal = self._refs[refVal];\n      if (refVal && refVal.schema) {\n        if (!equal(sch, refVal.schema))\n          throw new Error('id \"' + id + '\" resolves to more than one schema');\n      } else if (id != normalizeId(fullPath)) {\n        if (id[0] == '#') {\n          if (localRefs[id] && !equal(sch, localRefs[id]))\n            throw new Error('id \"' + id + '\" resolves to more than one schema');\n          localRefs[id] = sch;\n        } else {\n          self._refs[id] = fullPath;\n        }\n      }\n    }\n    baseIds[jsonPtr] = baseId;\n    fullPaths[jsonPtr] = fullPath;\n  });\n\n  return localRefs;\n}\n"]}