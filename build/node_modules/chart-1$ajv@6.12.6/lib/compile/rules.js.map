{"version":3,"sources":["rules.js"],"names":["ruleModules","require","toHash","module","exports","rules","RULES","type","ALL","all","types","forEach","group","map","keyword","implKeywords","key","Object","keys","k","push","rule","code","implements","$comment","keywords","concat","custom"],"mappings":"AAAA;;;;;;AAEA,QAAIA,cAAcC,QAAQ,UAAR,CAAlB;AAAA,QACIC,SAASD,QAAQ,QAAR,EAAkBC,MAD/B;;AAGAC,WAAOC,OAAP,GAAiB,SAASC,KAAT,GAAiB;AAChC,UAAIC,QAAQ,CACV,EAAEC,MAAM,QAAR;AACEF,eAAO,CAAE,EAAE,WAAW,CAAC,kBAAD,CAAb,EAAF,EACE,EAAE,WAAW,CAAC,kBAAD,CAAb,EADF,EACuC,YADvC,EACqD,QADrD,CADT,EADU,EAIV,EAAEE,MAAM,QAAR;AACEF,eAAO,CAAE,WAAF,EAAe,WAAf,EAA4B,SAA5B,EAAuC,QAAvC,CADT,EAJU,EAMV,EAAEE,MAAM,OAAR;AACEF,eAAO,CAAE,UAAF,EAAc,UAAd,EAA0B,OAA1B,EAAmC,UAAnC,EAA+C,aAA/C,CADT,EANU,EAQV,EAAEE,MAAM,QAAR;AACEF,eAAO,CAAE,eAAF,EAAmB,eAAnB,EAAoC,UAApC,EAAgD,cAAhD,EAAgE,eAAhE,EACE,EAAE,cAAc,CAAC,sBAAD,EAAyB,mBAAzB,CAAhB,EADF,CADT,EARU,EAWV,EAAEA,OAAO,CAAE,MAAF,EAAU,OAAV,EAAmB,MAAnB,EAA2B,KAA3B,EAAkC,OAAlC,EAA2C,OAA3C,EAAoD,OAApD,EAA6D,IAA7D,CAAT,EAXU,CAAZ;;AAcA,UAAIG,MAAM,CAAE,MAAF,EAAU,UAAV,CAAV;;AASAF,YAAMG,GAAN,GAAYP,OAAOM,GAAP,CAAZ;AACAF,YAAMI,KAAN,GAAcR,OAFF,CAAE,QAAF,EAAY,SAAZ,EAAuB,QAAvB,EAAiC,OAAjC,EAA0C,QAA1C,EAAoD,SAApD,EAA+D,MAA/D,CAEE,CAAd;;AAEAI,YAAMK,OAAN,CAAc,UAAUC,KAAV,EAAiB;AAC7BA,cAAMP,KAAN,GAAcO,MAAMP,KAAN,CAAYQ,GAAZ,CAAgB,UAAUC,OAAV,EAAmB;AAC/C,cAAIC,YAAJ;AACA,cAAI,OAAOD,OAAP,IAAkB,QAAtB,EAAgC;AAC9B,gBAAIE,MAAMC,OAAOC,IAAP,CAAYJ,OAAZ,EAAqB,CAArB,CAAV;AACAC,2BAAeD,QAAQE,GAAR,CAAf;AACAF,sBAAUE,GAAV;AACAD,yBAAaJ,OAAb,CAAqB,UAAUQ,CAAV,EAAa;AAChCX,kBAAIY,IAAJ,CAASD,CAAT;AACAb,oBAAMG,GAAN,CAAUU,CAAV,IAAe,IAAf;AACD,aAHD;AAID;AACDX,cAAIY,IAAJ,CAASN,OAAT;AACA,cAAIO,OAAOf,MAAMG,GAAN,CAAUK,OAAV,IAAqB;AAC9BA,qBAASA,OADqB;AAE9BQ,kBAAMtB,YAAYc,OAAZ,CAFwB;AAG9BS,wBAAYR;AAHkB,WAAhC;AAKA,iBAAOM,IAAP;AACD,SAlBa,CAAd;;AAoBAf,cAAMG,GAAN,CAAUe,QAAV,GAAqB;AACnBV,mBAAS,UADU;AAEnBQ,gBAAMtB,YAAYwB;AAFC,SAArB;;AAKA,YAAIZ,MAAML,IAAV,EAAgBD,MAAMI,KAAN,CAAYE,MAAML,IAAlB,IAA0BK,KAA1B;AACjB,OA3BD;;AA6BAN,YAAMmB,QAAN,GAAiBvB,OAAOM,IAAIkB,MAAJ,CAxCT,CACb,SADa,EACF,KADE,EACK,IADL,EACW,OADX,EACoB,QADpB,EAC8B,OAD9B,EAEb,aAFa,EAEE,SAFF,EAEa,aAFb,EAGb,UAHa,EAGD,UAHC,EAGW,WAHX,EAIb,kBAJa,EAIO,iBAJP,EAKb,iBALa,EAKM,MALN,EAKc,MALd,CAwCS,CAAP,CAAjB;AACApB,YAAMqB,MAAN,GAAe,EAAf;;AAEA,aAAOrB,KAAP;AACD,KA5DD","file":"rules.js","sourcesContent":["'use strict';\n\nvar ruleModules = require('../dotjs')\n  , toHash = require('./util').toHash;\n\nmodule.exports = function rules() {\n  var RULES = [\n    { type: 'number',\n      rules: [ { 'maximum': ['exclusiveMaximum'] },\n               { 'minimum': ['exclusiveMinimum'] }, 'multipleOf', 'format'] },\n    { type: 'string',\n      rules: [ 'maxLength', 'minLength', 'pattern', 'format' ] },\n    { type: 'array',\n      rules: [ 'maxItems', 'minItems', 'items', 'contains', 'uniqueItems' ] },\n    { type: 'object',\n      rules: [ 'maxProperties', 'minProperties', 'required', 'dependencies', 'propertyNames',\n               { 'properties': ['additionalProperties', 'patternProperties'] } ] },\n    { rules: [ '$ref', 'const', 'enum', 'not', 'anyOf', 'oneOf', 'allOf', 'if' ] }\n  ];\n\n  var ALL = [ 'type', '$comment' ];\n  var KEYWORDS = [\n    '$schema', '$id', 'id', '$data', '$async', 'title',\n    'description', 'default', 'definitions',\n    'examples', 'readOnly', 'writeOnly',\n    'contentMediaType', 'contentEncoding',\n    'additionalItems', 'then', 'else'\n  ];\n  var TYPES = [ 'number', 'integer', 'string', 'array', 'object', 'boolean', 'null' ];\n  RULES.all = toHash(ALL);\n  RULES.types = toHash(TYPES);\n\n  RULES.forEach(function (group) {\n    group.rules = group.rules.map(function (keyword) {\n      var implKeywords;\n      if (typeof keyword == 'object') {\n        var key = Object.keys(keyword)[0];\n        implKeywords = keyword[key];\n        keyword = key;\n        implKeywords.forEach(function (k) {\n          ALL.push(k);\n          RULES.all[k] = true;\n        });\n      }\n      ALL.push(keyword);\n      var rule = RULES.all[keyword] = {\n        keyword: keyword,\n        code: ruleModules[keyword],\n        implements: implKeywords\n      };\n      return rule;\n    });\n\n    RULES.all.$comment = {\n      keyword: '$comment',\n      code: ruleModules.$comment\n    };\n\n    if (group.type) RULES.types[group.type] = group;\n  });\n\n  RULES.keywords = toHash(ALL.concat(KEYWORDS));\n  RULES.custom = {};\n\n  return RULES;\n};\n"]}