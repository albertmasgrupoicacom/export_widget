'use strict';

Liferay.Loader.define('chart-1$ajv@6.12.6/lib/compile/rules', ['module', 'exports', 'require', '../dotjs', './util'], function (module, exports, require) {
  var define = undefined;
  var global = window;
  {
    var ruleModules = require('../dotjs'),
        toHash = require('./util').toHash;

    module.exports = function rules() {
      var RULES = [{ type: 'number',
        rules: [{ 'maximum': ['exclusiveMaximum'] }, { 'minimum': ['exclusiveMinimum'] }, 'multipleOf', 'format'] }, { type: 'string',
        rules: ['maxLength', 'minLength', 'pattern', 'format'] }, { type: 'array',
        rules: ['maxItems', 'minItems', 'items', 'contains', 'uniqueItems'] }, { type: 'object',
        rules: ['maxProperties', 'minProperties', 'required', 'dependencies', 'propertyNames', { 'properties': ['additionalProperties', 'patternProperties'] }] }, { rules: ['$ref', 'const', 'enum', 'not', 'anyOf', 'oneOf', 'allOf', 'if'] }];

      var ALL = ['type', '$comment'];

      RULES.all = toHash(ALL);
      RULES.types = toHash(['number', 'integer', 'string', 'array', 'object', 'boolean', 'null']);

      RULES.forEach(function (group) {
        group.rules = group.rules.map(function (keyword) {
          var implKeywords;
          if (typeof keyword == 'object') {
            var key = Object.keys(keyword)[0];
            implKeywords = keyword[key];
            keyword = key;
            implKeywords.forEach(function (k) {
              ALL.push(k);
              RULES.all[k] = true;
            });
          }
          ALL.push(keyword);
          var rule = RULES.all[keyword] = {
            keyword: keyword,
            code: ruleModules[keyword],
            implements: implKeywords
          };
          return rule;
        });

        RULES.all.$comment = {
          keyword: '$comment',
          code: ruleModules.$comment
        };

        if (group.type) RULES.types[group.type] = group;
      });

      RULES.keywords = toHash(ALL.concat(['$schema', '$id', 'id', '$data', '$async', 'title', 'description', 'default', 'definitions', 'examples', 'readOnly', 'writeOnly', 'contentMediaType', 'contentEncoding', 'additionalItems', 'then', 'else']));
      RULES.custom = {};

      return RULES;
    };
  }
});
//# sourceMappingURL=rules.js.map