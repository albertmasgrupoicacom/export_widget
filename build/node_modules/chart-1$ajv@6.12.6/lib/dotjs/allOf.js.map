{"version":3,"sources":["allOf.js"],"names":["module","exports","generate_allOf","it","$keyword","$ruleType","out","$schema","schema","$schemaPath","schemaPath","util","getProperty","$errSchemaPath","errSchemaPath","$breakOnError","opts","allErrors","$it","copy","$closingBraces","level","$nextValid","$currentBaseId","baseId","$allSchemasEmpty","arr1","$sch","$i","l1","length","strictKeywords","Object","keys","schemaHasRules","RULES","all","validate","slice"],"mappings":"AAAA;;;;;;AACAA,WAAOC,OAAP,GAAiB,SAASC,cAAT,CAAwBC,EAAxB,EAA4BC,QAA5B,EAAsCC,SAAtC,EAAiD;AAChE,UAAIC,MAAM,GAAV;AACA,UAAIC,UAAUJ,GAAGK,MAAH,CAAUJ,QAAV,CAAd;AACA,UAAIK,cAAcN,GAAGO,UAAH,GAAgBP,GAAGQ,IAAH,CAAQC,WAAR,CAAoBR,QAApB,CAAlC;AACA,UAAIS,iBAAiBV,GAAGW,aAAH,GAAmB,GAAnB,GAAyBV,QAA9C;AACA,UAAIW,gBAAgB,CAACZ,GAAGa,IAAH,CAAQC,SAA7B;AACA,UAAIC,MAAMf,GAAGQ,IAAH,CAAQQ,IAAR,CAAahB,EAAb,CAAV;AACA,UAAIiB,iBAAiB,EAArB;AACAF,UAAIG,KAAJ;AACA,UAAIC,aAAa,UAAUJ,IAAIG,KAA/B;AACA,UAAIE,iBAAiBL,IAAIM,MAAzB;AAAA,UACEC,mBAAmB,IADrB;AAEA,UAAIC,OAAOnB,OAAX;AACA,UAAImB,IAAJ,EAAU;AACR,YAAIC,IAAJ;AAAA,YAAUC,KAAK,CAAC,CAAhB;AAAA,YACEC,KAAKH,KAAKI,MAAL,GAAc,CADrB;AAEA,eAAOF,KAAKC,EAAZ,EAAgB;AACdF,iBAAOD,KAAKE,MAAM,CAAX,CAAP;AACA,cAAKzB,GAAGa,IAAH,CAAQe,cAAR,GAA0B,OAAOJ,IAAP,IAAe,QAAf,IAA2BK,OAAOC,IAAP,CAAYN,IAAZ,EAAkBG,MAAlB,GAA2B,CAAvD,IAA6DH,SAAS,KAA/F,GAAuGxB,GAAGQ,IAAH,CAAQuB,cAAR,CAAuBP,IAAvB,EAA6BxB,GAAGgC,KAAH,CAASC,GAAtC,CAA5G,EAAyJ;AACvJX,+BAAmB,KAAnB;AACAP,gBAAIV,MAAJ,GAAamB,IAAb;AACAT,gBAAIR,UAAJ,GAAiBD,cAAc,GAAd,GAAoBmB,EAApB,GAAyB,GAA1C;AACAV,gBAAIJ,aAAJ,GAAoBD,iBAAiB,GAAjB,GAAuBe,EAA3C;AACAtB,mBAAO,OAAQH,GAAGkC,QAAH,CAAYnB,GAAZ,CAAR,GAA4B,GAAnC;AACAA,gBAAIM,MAAJ,GAAaD,cAAb;AACA,gBAAIR,aAAJ,EAAmB;AACjBT,qBAAO,UAAWgB,UAAX,GAAyB,MAAhC;AACAF,gCAAkB,GAAlB;AACD;AACF;AACF;AACF;AACD,UAAIL,aAAJ,EAAmB;AACjB,YAAIU,gBAAJ,EAAsB;AACpBnB,iBAAO,eAAP;AACD,SAFD,MAEO;AACLA,iBAAO,MAAOc,eAAekB,KAAf,CAAqB,CAArB,EAAwB,CAAC,CAAzB,CAAP,GAAsC,GAA7C;AACD;AACF;AACD,aAAOhC,GAAP;AACD,KAxCD","file":"allOf.js","sourcesContent":["'use strict';\nmodule.exports = function generate_allOf(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $it = it.util.copy(it);\n  var $closingBraces = '';\n  $it.level++;\n  var $nextValid = 'valid' + $it.level;\n  var $currentBaseId = $it.baseId,\n    $allSchemasEmpty = true;\n  var arr1 = $schema;\n  if (arr1) {\n    var $sch, $i = -1,\n      l1 = arr1.length - 1;\n    while ($i < l1) {\n      $sch = arr1[$i += 1];\n      if ((it.opts.strictKeywords ? (typeof $sch == 'object' && Object.keys($sch).length > 0) || $sch === false : it.util.schemaHasRules($sch, it.RULES.all))) {\n        $allSchemasEmpty = false;\n        $it.schema = $sch;\n        $it.schemaPath = $schemaPath + '[' + $i + ']';\n        $it.errSchemaPath = $errSchemaPath + '/' + $i;\n        out += '  ' + (it.validate($it)) + ' ';\n        $it.baseId = $currentBaseId;\n        if ($breakOnError) {\n          out += ' if (' + ($nextValid) + ') { ';\n          $closingBraces += '}';\n        }\n      }\n    }\n  }\n  if ($breakOnError) {\n    if ($allSchemasEmpty) {\n      out += ' if (true) { ';\n    } else {\n      out += ' ' + ($closingBraces.slice(0, -1)) + ' ';\n    }\n  }\n  return out;\n}\n"]}