{"version":3,"sources":["oneOf.js"],"names":["module","exports","generate_oneOf","it","$keyword","$ruleType","out","$lvl","level","$dataLvl","dataLevel","$schema","schema","$schemaPath","schemaPath","util","getProperty","$errSchemaPath","errSchemaPath","$breakOnError","opts","allErrors","$valid","$errs","$it","copy","$closingBraces","$nextValid","$currentBaseId","baseId","$prevValid","$passingSchemas","$wasComposite","compositeRule","arr1","$sch","$i","l1","length","strictKeywords","Object","keys","schemaHasRules","RULES","all","validate","createErrors","errorPath","toQuotedString","messages","verbose","async"],"mappings":"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","file":"oneOf.js","sourcesContent":["'use strict';\nmodule.exports = function generate_oneOf(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $data = 'data' + ($dataLvl || '');\n  var $valid = 'valid' + $lvl;\n  var $errs = 'errs__' + $lvl;\n  var $it = it.util.copy(it);\n  var $closingBraces = '';\n  $it.level++;\n  var $nextValid = 'valid' + $it.level;\n  var $currentBaseId = $it.baseId,\n    $prevValid = 'prevValid' + $lvl,\n    $passingSchemas = 'passingSchemas' + $lvl;\n  out += 'var ' + ($errs) + ' = errors , ' + ($prevValid) + ' = false , ' + ($valid) + ' = false , ' + ($passingSchemas) + ' = null; ';\n  var $wasComposite = it.compositeRule;\n  it.compositeRule = $it.compositeRule = true;\n  var arr1 = $schema;\n  if (arr1) {\n    var $sch, $i = -1,\n      l1 = arr1.length - 1;\n    while ($i < l1) {\n      $sch = arr1[$i += 1];\n      if ((it.opts.strictKeywords ? (typeof $sch == 'object' && Object.keys($sch).length > 0) || $sch === false : it.util.schemaHasRules($sch, it.RULES.all))) {\n        $it.schema = $sch;\n        $it.schemaPath = $schemaPath + '[' + $i + ']';\n        $it.errSchemaPath = $errSchemaPath + '/' + $i;\n        out += '  ' + (it.validate($it)) + ' ';\n        $it.baseId = $currentBaseId;\n      } else {\n        out += ' var ' + ($nextValid) + ' = true; ';\n      }\n      if ($i) {\n        out += ' if (' + ($nextValid) + ' && ' + ($prevValid) + ') { ' + ($valid) + ' = false; ' + ($passingSchemas) + ' = [' + ($passingSchemas) + ', ' + ($i) + ']; } else { ';\n        $closingBraces += '}';\n      }\n      out += ' if (' + ($nextValid) + ') { ' + ($valid) + ' = ' + ($prevValid) + ' = true; ' + ($passingSchemas) + ' = ' + ($i) + '; }';\n    }\n  }\n  it.compositeRule = $it.compositeRule = $wasComposite;\n  out += '' + ($closingBraces) + 'if (!' + ($valid) + ') {   var err =   '; /* istanbul ignore else */\n  if (it.createErrors !== false) {\n    out += ' { keyword: \\'' + ('oneOf') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { passingSchemas: ' + ($passingSchemas) + ' } ';\n    if (it.opts.messages !== false) {\n      out += ' , message: \\'should match exactly one schema in oneOf\\' ';\n    }\n    if (it.opts.verbose) {\n      out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n    }\n    out += ' } ';\n  } else {\n    out += ' {} ';\n  }\n  out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n  if (!it.compositeRule && $breakOnError) {\n    /* istanbul ignore if */\n    if (it.async) {\n      out += ' throw new ValidationError(vErrors); ';\n    } else {\n      out += ' validate.errors = vErrors; return false; ';\n    }\n  }\n  out += '} else {  errors = ' + ($errs) + '; if (vErrors !== null) { if (' + ($errs) + ') vErrors.length = ' + ($errs) + '; else vErrors = null; }';\n  if (it.opts.allErrors) {\n    out += ' } ';\n  }\n  return out;\n}\n"]}