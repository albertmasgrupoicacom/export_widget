{"version":3,"sources":["ajv.js"],"names":["compileSchema","require","resolve","Cache","SchemaObject","stableStringify","formats","rules","$dataMetaSchema","util","module","exports","Ajv","prototype","validate","compile","addSchema","addMetaSchema","validateSchema","getSchema","removeSchema","addFormat","errorsText","_addSchema","_compile","compileAsync","customKeyword","addKeyword","add","getKeyword","get","removeKeyword","remove","validateKeyword","errorClasses","ValidationError","Validation","MissingRefError","MissingRef","META_SCHEMA_ID","META_IGNORE_OPTIONS","META_SUPPORT_DATA","opts","_opts","copy","setLogger","_schemas","_refs","_fragments","_formats","format","_cache","cache","_loadingSchemas","_compilations","RULES","_getId","chooseGetId","loopRequired","Infinity","errorDataPath","_errorDataPathProperty","serialize","undefined","_metaOpts","getMetaSchemaOptions","addInitialFormats","keywords","addInitialKeywords","addDefaultMetaSchema","meta","nullable","metaSchema","type","addInitialSchemas","schemaKeyRef","data","v","Error","schemaObj","valid","$async","errors","schema","_meta","key","_skipValidation","Array","isArray","i","length","id","normalizeId","checkUnique","skipValidation","throwOrLogError","$schema","defaultMeta","logger","warn","message","error","self","keyRef","_getSchemaObj","_getSchemaFragment","ref","res","call","root","baseId","fragment","RegExp","_removeAllSchemas","clear","del","cacheKey","schemas","regex","test","shouldAddSchema","cached","addUsedSchema","willValidate","recursiveMeta","localRefs","ids","put","compiling","callValidate","currentOpts","e","refs","refVal","_validate","result","apply","arguments","schemaId","_get$IdOrId","_get$Id","$id","options","separator","dataVar","text","dataPath","slice","name","$dataSchema","$data","optsSchemas","keyword","metaOpts","log","noop","console"],"mappings":"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","file":"ajv.js","sourcesContent":["'use strict';\n\nvar compileSchema = require('./compile')\n  , resolve = require('./compile/resolve')\n  , Cache = require('./cache')\n  , SchemaObject = require('./compile/schema_obj')\n  , stableStringify = require('fast-json-stable-stringify')\n  , formats = require('./compile/formats')\n  , rules = require('./compile/rules')\n  , $dataMetaSchema = require('./data')\n  , util = require('./compile/util');\n\nmodule.exports = Ajv;\n\nAjv.prototype.validate = validate;\nAjv.prototype.compile = compile;\nAjv.prototype.addSchema = addSchema;\nAjv.prototype.addMetaSchema = addMetaSchema;\nAjv.prototype.validateSchema = validateSchema;\nAjv.prototype.getSchema = getSchema;\nAjv.prototype.removeSchema = removeSchema;\nAjv.prototype.addFormat = addFormat;\nAjv.prototype.errorsText = errorsText;\n\nAjv.prototype._addSchema = _addSchema;\nAjv.prototype._compile = _compile;\n\nAjv.prototype.compileAsync = require('./compile/async');\nvar customKeyword = require('./keyword');\nAjv.prototype.addKeyword = customKeyword.add;\nAjv.prototype.getKeyword = customKeyword.get;\nAjv.prototype.removeKeyword = customKeyword.remove;\nAjv.prototype.validateKeyword = customKeyword.validate;\n\nvar errorClasses = require('./compile/error_classes');\nAjv.ValidationError = errorClasses.Validation;\nAjv.MissingRefError = errorClasses.MissingRef;\nAjv.$dataMetaSchema = $dataMetaSchema;\n\nvar META_SCHEMA_ID = 'http://json-schema.org/draft-07/schema';\n\nvar META_IGNORE_OPTIONS = [ 'removeAdditional', 'useDefaults', 'coerceTypes', 'strictDefaults' ];\nvar META_SUPPORT_DATA = ['/properties'];\n\n/**\n * Creates validator instance.\n * Usage: `Ajv(opts)`\n * @param {Object} opts optional options\n * @return {Object} ajv instance\n */\nfunction Ajv(opts) {\n  if (!(this instanceof Ajv)) return new Ajv(opts);\n  opts = this._opts = util.copy(opts) || {};\n  setLogger(this);\n  this._schemas = {};\n  this._refs = {};\n  this._fragments = {};\n  this._formats = formats(opts.format);\n\n  this._cache = opts.cache || new Cache;\n  this._loadingSchemas = {};\n  this._compilations = [];\n  this.RULES = rules();\n  this._getId = chooseGetId(opts);\n\n  opts.loopRequired = opts.loopRequired || Infinity;\n  if (opts.errorDataPath == 'property') opts._errorDataPathProperty = true;\n  if (opts.serialize === undefined) opts.serialize = stableStringify;\n  this._metaOpts = getMetaSchemaOptions(this);\n\n  if (opts.formats) addInitialFormats(this);\n  if (opts.keywords) addInitialKeywords(this);\n  addDefaultMetaSchema(this);\n  if (typeof opts.meta == 'object') this.addMetaSchema(opts.meta);\n  if (opts.nullable) this.addKeyword('nullable', {metaSchema: {type: 'boolean'}});\n  addInitialSchemas(this);\n}\n\n\n\n/**\n * Validate data using schema\n * Schema will be compiled and cached (using serialized JSON as key. [fast-json-stable-stringify](https://github.com/epoberezkin/fast-json-stable-stringify) is used to serialize.\n * @this   Ajv\n * @param  {String|Object} schemaKeyRef key, ref or schema object\n * @param  {Any} data to be validated\n * @return {Boolean} validation result. Errors from the last validation will be available in `ajv.errors` (and also in compiled schema: `schema.errors`).\n */\nfunction validate(schemaKeyRef, data) {\n  var v;\n  if (typeof schemaKeyRef == 'string') {\n    v = this.getSchema(schemaKeyRef);\n    if (!v) throw new Error('no schema with key or ref \"' + schemaKeyRef + '\"');\n  } else {\n    var schemaObj = this._addSchema(schemaKeyRef);\n    v = schemaObj.validate || this._compile(schemaObj);\n  }\n\n  var valid = v(data);\n  if (v.$async !== true) this.errors = v.errors;\n  return valid;\n}\n\n\n/**\n * Create validating function for passed schema.\n * @this   Ajv\n * @param  {Object} schema schema object\n * @param  {Boolean} _meta true if schema is a meta-schema. Used internally to compile meta schemas of custom keywords.\n * @return {Function} validating function\n */\nfunction compile(schema, _meta) {\n  var schemaObj = this._addSchema(schema, undefined, _meta);\n  return schemaObj.validate || this._compile(schemaObj);\n}\n\n\n/**\n * Adds schema to the instance.\n * @this   Ajv\n * @param {Object|Array} schema schema or array of schemas. If array is passed, `key` and other parameters will be ignored.\n * @param {String} key Optional schema key. Can be passed to `validate` method instead of schema object or id/ref. One schema per instance can have empty `id` and `key`.\n * @param {Boolean} _skipValidation true to skip schema validation. Used internally, option validateSchema should be used instead.\n * @param {Boolean} _meta true if schema is a meta-schema. Used internally, addMetaSchema should be used instead.\n * @return {Ajv} this for method chaining\n */\nfunction addSchema(schema, key, _skipValidation, _meta) {\n  if (Array.isArray(schema)){\n    for (var i=0; i<schema.length; i++) this.addSchema(schema[i], undefined, _skipValidation, _meta);\n    return this;\n  }\n  var id = this._getId(schema);\n  if (id !== undefined && typeof id != 'string')\n    throw new Error('schema id must be string');\n  key = resolve.normalizeId(key || id);\n  checkUnique(this, key);\n  this._schemas[key] = this._addSchema(schema, _skipValidation, _meta, true);\n  return this;\n}\n\n\n/**\n * Add schema that will be used to validate other schemas\n * options in META_IGNORE_OPTIONS are alway set to false\n * @this   Ajv\n * @param {Object} schema schema object\n * @param {String} key optional schema key\n * @param {Boolean} skipValidation true to skip schema validation, can be used to override validateSchema option for meta-schema\n * @return {Ajv} this for method chaining\n */\nfunction addMetaSchema(schema, key, skipValidation) {\n  this.addSchema(schema, key, skipValidation, true);\n  return this;\n}\n\n\n/**\n * Validate schema\n * @this   Ajv\n * @param {Object} schema schema to validate\n * @param {Boolean} throwOrLogError pass true to throw (or log) an error if invalid\n * @return {Boolean} true if schema is valid\n */\nfunction validateSchema(schema, throwOrLogError) {\n  var $schema = schema.$schema;\n  if ($schema !== undefined && typeof $schema != 'string')\n    throw new Error('$schema must be a string');\n  $schema = $schema || this._opts.defaultMeta || defaultMeta(this);\n  if (!$schema) {\n    this.logger.warn('meta-schema not available');\n    this.errors = null;\n    return true;\n  }\n  var valid = this.validate($schema, schema);\n  if (!valid && throwOrLogError) {\n    var message = 'schema is invalid: ' + this.errorsText();\n    if (this._opts.validateSchema == 'log') this.logger.error(message);\n    else throw new Error(message);\n  }\n  return valid;\n}\n\n\nfunction defaultMeta(self) {\n  var meta = self._opts.meta;\n  self._opts.defaultMeta = typeof meta == 'object'\n                            ? self._getId(meta) || meta\n                            : self.getSchema(META_SCHEMA_ID)\n                              ? META_SCHEMA_ID\n                              : undefined;\n  return self._opts.defaultMeta;\n}\n\n\n/**\n * Get compiled schema from the instance by `key` or `ref`.\n * @this   Ajv\n * @param  {String} keyRef `key` that was passed to `addSchema` or full schema reference (`schema.id` or resolved id).\n * @return {Function} schema validating function (with property `schema`).\n */\nfunction getSchema(keyRef) {\n  var schemaObj = _getSchemaObj(this, keyRef);\n  switch (typeof schemaObj) {\n    case 'object': return schemaObj.validate || this._compile(schemaObj);\n    case 'string': return this.getSchema(schemaObj);\n    case 'undefined': return _getSchemaFragment(this, keyRef);\n  }\n}\n\n\nfunction _getSchemaFragment(self, ref) {\n  var res = resolve.schema.call(self, { schema: {} }, ref);\n  if (res) {\n    var schema = res.schema\n      , root = res.root\n      , baseId = res.baseId;\n    var v = compileSchema.call(self, schema, root, undefined, baseId);\n    self._fragments[ref] = new SchemaObject({\n      ref: ref,\n      fragment: true,\n      schema: schema,\n      root: root,\n      baseId: baseId,\n      validate: v\n    });\n    return v;\n  }\n}\n\n\nfunction _getSchemaObj(self, keyRef) {\n  keyRef = resolve.normalizeId(keyRef);\n  return self._schemas[keyRef] || self._refs[keyRef] || self._fragments[keyRef];\n}\n\n\n/**\n * Remove cached schema(s).\n * If no parameter is passed all schemas but meta-schemas are removed.\n * If RegExp is passed all schemas with key/id matching pattern but meta-schemas are removed.\n * Even if schema is referenced by other schemas it still can be removed as other schemas have local references.\n * @this   Ajv\n * @param  {String|Object|RegExp} schemaKeyRef key, ref, pattern to match key/ref or schema object\n * @return {Ajv} this for method chaining\n */\nfunction removeSchema(schemaKeyRef) {\n  if (schemaKeyRef instanceof RegExp) {\n    _removeAllSchemas(this, this._schemas, schemaKeyRef);\n    _removeAllSchemas(this, this._refs, schemaKeyRef);\n    return this;\n  }\n  switch (typeof schemaKeyRef) {\n    case 'undefined':\n      _removeAllSchemas(this, this._schemas);\n      _removeAllSchemas(this, this._refs);\n      this._cache.clear();\n      return this;\n    case 'string':\n      var schemaObj = _getSchemaObj(this, schemaKeyRef);\n      if (schemaObj) this._cache.del(schemaObj.cacheKey);\n      delete this._schemas[schemaKeyRef];\n      delete this._refs[schemaKeyRef];\n      return this;\n    case 'object':\n      var serialize = this._opts.serialize;\n      var cacheKey = serialize ? serialize(schemaKeyRef) : schemaKeyRef;\n      this._cache.del(cacheKey);\n      var id = this._getId(schemaKeyRef);\n      if (id) {\n        id = resolve.normalizeId(id);\n        delete this._schemas[id];\n        delete this._refs[id];\n      }\n  }\n  return this;\n}\n\n\nfunction _removeAllSchemas(self, schemas, regex) {\n  for (var keyRef in schemas) {\n    var schemaObj = schemas[keyRef];\n    if (!schemaObj.meta && (!regex || regex.test(keyRef))) {\n      self._cache.del(schemaObj.cacheKey);\n      delete schemas[keyRef];\n    }\n  }\n}\n\n\n/* @this   Ajv */\nfunction _addSchema(schema, skipValidation, meta, shouldAddSchema) {\n  if (typeof schema != 'object' && typeof schema != 'boolean')\n    throw new Error('schema should be object or boolean');\n  var serialize = this._opts.serialize;\n  var cacheKey = serialize ? serialize(schema) : schema;\n  var cached = this._cache.get(cacheKey);\n  if (cached) return cached;\n\n  shouldAddSchema = shouldAddSchema || this._opts.addUsedSchema !== false;\n\n  var id = resolve.normalizeId(this._getId(schema));\n  if (id && shouldAddSchema) checkUnique(this, id);\n\n  var willValidate = this._opts.validateSchema !== false && !skipValidation;\n  var recursiveMeta;\n  if (willValidate && !(recursiveMeta = id && id == resolve.normalizeId(schema.$schema)))\n    this.validateSchema(schema, true);\n\n  var localRefs = resolve.ids.call(this, schema);\n\n  var schemaObj = new SchemaObject({\n    id: id,\n    schema: schema,\n    localRefs: localRefs,\n    cacheKey: cacheKey,\n    meta: meta\n  });\n\n  if (id[0] != '#' && shouldAddSchema) this._refs[id] = schemaObj;\n  this._cache.put(cacheKey, schemaObj);\n\n  if (willValidate && recursiveMeta) this.validateSchema(schema, true);\n\n  return schemaObj;\n}\n\n\n/* @this   Ajv */\nfunction _compile(schemaObj, root) {\n  if (schemaObj.compiling) {\n    schemaObj.validate = callValidate;\n    callValidate.schema = schemaObj.schema;\n    callValidate.errors = null;\n    callValidate.root = root ? root : callValidate;\n    if (schemaObj.schema.$async === true)\n      callValidate.$async = true;\n    return callValidate;\n  }\n  schemaObj.compiling = true;\n\n  var currentOpts;\n  if (schemaObj.meta) {\n    currentOpts = this._opts;\n    this._opts = this._metaOpts;\n  }\n\n  var v;\n  try { v = compileSchema.call(this, schemaObj.schema, root, schemaObj.localRefs); }\n  catch(e) {\n    delete schemaObj.validate;\n    throw e;\n  }\n  finally {\n    schemaObj.compiling = false;\n    if (schemaObj.meta) this._opts = currentOpts;\n  }\n\n  schemaObj.validate = v;\n  schemaObj.refs = v.refs;\n  schemaObj.refVal = v.refVal;\n  schemaObj.root = v.root;\n  return v;\n\n\n  /* @this   {*} - custom context, see passContext option */\n  function callValidate() {\n    /* jshint validthis: true */\n    var _validate = schemaObj.validate;\n    var result = _validate.apply(this, arguments);\n    callValidate.errors = _validate.errors;\n    return result;\n  }\n}\n\n\nfunction chooseGetId(opts) {\n  switch (opts.schemaId) {\n    case 'auto': return _get$IdOrId;\n    case 'id': return _getId;\n    default: return _get$Id;\n  }\n}\n\n/* @this   Ajv */\nfunction _getId(schema) {\n  if (schema.$id) this.logger.warn('schema $id ignored', schema.$id);\n  return schema.id;\n}\n\n/* @this   Ajv */\nfunction _get$Id(schema) {\n  if (schema.id) this.logger.warn('schema id ignored', schema.id);\n  return schema.$id;\n}\n\n\nfunction _get$IdOrId(schema) {\n  if (schema.$id && schema.id && schema.$id != schema.id)\n    throw new Error('schema $id is different from id');\n  return schema.$id || schema.id;\n}\n\n\n/**\n * Convert array of error message objects to string\n * @this   Ajv\n * @param  {Array<Object>} errors optional array of validation errors, if not passed errors from the instance are used.\n * @param  {Object} options optional options with properties `separator` and `dataVar`.\n * @return {String} human readable string with all errors descriptions\n */\nfunction errorsText(errors, options) {\n  errors = errors || this.errors;\n  if (!errors) return 'No errors';\n  options = options || {};\n  var separator = options.separator === undefined ? ', ' : options.separator;\n  var dataVar = options.dataVar === undefined ? 'data' : options.dataVar;\n\n  var text = '';\n  for (var i=0; i<errors.length; i++) {\n    var e = errors[i];\n    if (e) text += dataVar + e.dataPath + ' ' + e.message + separator;\n  }\n  return text.slice(0, -separator.length);\n}\n\n\n/**\n * Add custom format\n * @this   Ajv\n * @param {String} name format name\n * @param {String|RegExp|Function} format string is converted to RegExp; function should return boolean (true when valid)\n * @return {Ajv} this for method chaining\n */\nfunction addFormat(name, format) {\n  if (typeof format == 'string') format = new RegExp(format);\n  this._formats[name] = format;\n  return this;\n}\n\n\nfunction addDefaultMetaSchema(self) {\n  var $dataSchema;\n  if (self._opts.$data) {\n    $dataSchema = require('./refs/data.json');\n    self.addMetaSchema($dataSchema, $dataSchema.$id, true);\n  }\n  if (self._opts.meta === false) return;\n  var metaSchema = require('./refs/json-schema-draft-07.json');\n  if (self._opts.$data) metaSchema = $dataMetaSchema(metaSchema, META_SUPPORT_DATA);\n  self.addMetaSchema(metaSchema, META_SCHEMA_ID, true);\n  self._refs['http://json-schema.org/schema'] = META_SCHEMA_ID;\n}\n\n\nfunction addInitialSchemas(self) {\n  var optsSchemas = self._opts.schemas;\n  if (!optsSchemas) return;\n  if (Array.isArray(optsSchemas)) self.addSchema(optsSchemas);\n  else for (var key in optsSchemas) self.addSchema(optsSchemas[key], key);\n}\n\n\nfunction addInitialFormats(self) {\n  for (var name in self._opts.formats) {\n    var format = self._opts.formats[name];\n    self.addFormat(name, format);\n  }\n}\n\n\nfunction addInitialKeywords(self) {\n  for (var name in self._opts.keywords) {\n    var keyword = self._opts.keywords[name];\n    self.addKeyword(name, keyword);\n  }\n}\n\n\nfunction checkUnique(self, id) {\n  if (self._schemas[id] || self._refs[id])\n    throw new Error('schema with key or id \"' + id + '\" already exists');\n}\n\n\nfunction getMetaSchemaOptions(self) {\n  var metaOpts = util.copy(self._opts);\n  for (var i=0; i<META_IGNORE_OPTIONS.length; i++)\n    delete metaOpts[META_IGNORE_OPTIONS[i]];\n  return metaOpts;\n}\n\n\nfunction setLogger(self) {\n  var logger = self._opts.logger;\n  if (logger === false) {\n    self.logger = {log: noop, warn: noop, error: noop};\n  } else {\n    if (logger === undefined) logger = console;\n    if (!(typeof logger == 'object' && logger.log && logger.warn && logger.error))\n      throw new Error('logger must implement log, warn and error methods');\n    self.logger = logger;\n  }\n}\n\n\nfunction noop() {}\n"]}