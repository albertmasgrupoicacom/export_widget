{"version":3,"sources":["keyword.js"],"names":["IDENTIFIER","customRuleCode","require","definitionSchema","module","exports","add","addKeyword","get","getKeyword","remove","removeKeyword","validate","validateKeyword","keyword","definition","RULES","keywords","Error","test","dataType","type","Array","isArray","i","length","_addRule","metaSchema","$data","_opts","anyOf","validateSchema","compile","all","ruleGroup","rg","rules","push","rule","custom","code","implements","j","splice","throwError","errors","v","_validateKeyword","errorsText"],"mappings":"AAAA;;;;;;AAEA,QAAIA,aAAa,wBAAjB;AACA,QAAIC,iBAAiBC,QAAQ,gBAAR,CAArB;AACA,QAAIC,mBAAmBD,QAAQ,qBAAR,CAAvB;;AAEAE,WAAOC,OAAP,GAAiB;AACfC,WAAKC,UADU;AAEfC,WAAKC,UAFU;AAGfC,cAAQC,aAHO;AAIfC,gBAAUC;AAJK,KAAjB;;AAQA;;;;;;;AAOA,aAASN,UAAT,CAAoBO,OAApB,EAA6BC,UAA7B,EAAyC;AACvC;AACA;AACA,UAAIC,QAAQ,KAAKA,KAAjB;AACA,UAAIA,MAAMC,QAAN,CAAeH,OAAf,CAAJ,EACE,MAAM,IAAII,KAAJ,CAAU,aAAaJ,OAAb,GAAuB,qBAAjC,CAAN;;AAEF,UAAI,CAACd,WAAWmB,IAAX,CAAgBL,OAAhB,CAAL,EACE,MAAM,IAAII,KAAJ,CAAU,aAAaJ,OAAb,GAAuB,4BAAjC,CAAN;;AAEF,UAAIC,UAAJ,EAAgB;AACd,aAAKF,eAAL,CAAqBE,UAArB,EAAiC,IAAjC;;AAEA,YAAIK,WAAWL,WAAWM,IAA1B;AACA,YAAIC,MAAMC,OAAN,CAAcH,QAAd,CAAJ,EAA6B;AAC3B,eAAK,IAAII,IAAE,CAAX,EAAcA,IAAEJ,SAASK,MAAzB,EAAiCD,GAAjC,EACEE,SAASZ,OAAT,EAAkBM,SAASI,CAAT,CAAlB,EAA+BT,UAA/B;AACH,SAHD,MAGO;AACLW,mBAASZ,OAAT,EAAkBM,QAAlB,EAA4BL,UAA5B;AACD;;AAED,YAAIY,aAAaZ,WAAWY,UAA5B;AACA,YAAIA,UAAJ,EAAgB;AACd,cAAIZ,WAAWa,KAAX,IAAoB,KAAKC,KAAL,CAAWD,KAAnC,EAA0C;AACxCD,yBAAa;AACXG,qBAAO,CACLH,UADK,EAEL,EAAE,QAAQ,gFAAV,EAFK;AADI,aAAb;AAMD;AACDZ,qBAAWgB,cAAX,GAA4B,KAAKC,OAAL,CAAaL,UAAb,EAAyB,IAAzB,CAA5B;AACD;AACF;;AAEDX,YAAMC,QAAN,CAAeH,OAAf,IAA0BE,MAAMiB,GAAN,CAAUnB,OAAV,IAAqB,IAA/C;;AAGA,eAASY,QAAT,CAAkBZ,OAAlB,EAA2BM,QAA3B,EAAqCL,UAArC,EAAiD;AAC/C,YAAImB,SAAJ;AACA,aAAK,IAAIV,IAAE,CAAX,EAAcA,IAAER,MAAMS,MAAtB,EAA8BD,GAA9B,EAAmC;AACjC,cAAIW,KAAKnB,MAAMQ,CAAN,CAAT;AACA,cAAIW,GAAGd,IAAH,IAAWD,QAAf,EAAyB;AACvBc,wBAAYC,EAAZ;AACA;AACD;AACF;;AAED,YAAI,CAACD,SAAL,EAAgB;AACdA,sBAAY,EAAEb,MAAMD,QAAR,EAAkBgB,OAAO,EAAzB,EAAZ;AACApB,gBAAMqB,IAAN,CAAWH,SAAX;AACD;;AAED,YAAII,OAAO;AACTxB,mBAASA,OADA;AAETC,sBAAYA,UAFH;AAGTwB,kBAAQ,IAHC;AAITC,gBAAMvC,cAJG;AAKTwC,sBAAY1B,WAAW0B;AALd,SAAX;AAOAP,kBAAUE,KAAV,CAAgBC,IAAhB,CAAqBC,IAArB;AACAtB,cAAMuB,MAAN,CAAazB,OAAb,IAAwBwB,IAAxB;AACD;;AAED,aAAO,IAAP;AACD;;AAGD;;;;;;AAMA,aAAS7B,UAAT,CAAoBK,OAApB,EAA6B;AAC3B;AACA,UAAIwB,OAAO,KAAKtB,KAAL,CAAWuB,MAAX,CAAkBzB,OAAlB,CAAX;AACA,aAAOwB,OAAOA,KAAKvB,UAAZ,GAAyB,KAAKC,KAAL,CAAWC,QAAX,CAAoBH,OAApB,KAAgC,KAAhE;AACD;;AAGD;;;;;;AAMA,aAASH,aAAT,CAAuBG,OAAvB,EAAgC;AAC9B;AACA,UAAIE,QAAQ,KAAKA,KAAjB;AACA,aAAOA,MAAMC,QAAN,CAAeH,OAAf,CAAP;AACA,aAAOE,MAAMiB,GAAN,CAAUnB,OAAV,CAAP;AACA,aAAOE,MAAMuB,MAAN,CAAazB,OAAb,CAAP;AACA,WAAK,IAAIU,IAAE,CAAX,EAAcA,IAAER,MAAMS,MAAtB,EAA8BD,GAA9B,EAAmC;AACjC,YAAIY,QAAQpB,MAAMQ,CAAN,EAASY,KAArB;AACA,aAAK,IAAIM,IAAE,CAAX,EAAcA,IAAEN,MAAMX,MAAtB,EAA8BiB,GAA9B,EAAmC;AACjC,cAAIN,MAAMM,CAAN,EAAS5B,OAAT,IAAoBA,OAAxB,EAAiC;AAC/BsB,kBAAMO,MAAN,CAAaD,CAAb,EAAgB,CAAhB;AACA;AACD;AACF;AACF;AACD,aAAO,IAAP;AACD;;AAGD;;;;;;;AAOA,aAAS7B,eAAT,CAAyBE,UAAzB,EAAqC6B,UAArC,EAAiD;AAC/C/B,sBAAgBgC,MAAhB,GAAyB,IAAzB;AACA,UAAIC,IAAI,KAAKC,gBAAL,GAAwB,KAAKA,gBAAL,IACG,KAAKf,OAAL,CAAa7B,gBAAb,EAA+B,IAA/B,CADnC;;AAGA,UAAI2C,EAAE/B,UAAF,CAAJ,EAAmB,OAAO,IAAP;AACnBF,sBAAgBgC,MAAhB,GAAyBC,EAAED,MAA3B;AACA,UAAID,UAAJ,EACE,MAAM,IAAI1B,KAAJ,CAAU,2CAA4C,KAAK8B,UAAL,CAAgBF,EAAED,MAAlB,CAAtD,CAAN,CADF,KAGE,OAAO,KAAP;AACH","file":"keyword.js","sourcesContent":["'use strict';\n\nvar IDENTIFIER = /^[a-z_$][a-z0-9_$-]*$/i;\nvar customRuleCode = require('./dotjs/custom');\nvar definitionSchema = require('./definition_schema');\n\nmodule.exports = {\n  add: addKeyword,\n  get: getKeyword,\n  remove: removeKeyword,\n  validate: validateKeyword\n};\n\n\n/**\n * Define custom keyword\n * @this  Ajv\n * @param {String} keyword custom keyword, should be unique (including different from all standard, custom and macro keywords).\n * @param {Object} definition keyword definition object with properties `type` (type(s) which the keyword applies to), `validate` or `compile`.\n * @return {Ajv} this for method chaining\n */\nfunction addKeyword(keyword, definition) {\n  /* jshint validthis: true */\n  /* eslint no-shadow: 0 */\n  var RULES = this.RULES;\n  if (RULES.keywords[keyword])\n    throw new Error('Keyword ' + keyword + ' is already defined');\n\n  if (!IDENTIFIER.test(keyword))\n    throw new Error('Keyword ' + keyword + ' is not a valid identifier');\n\n  if (definition) {\n    this.validateKeyword(definition, true);\n\n    var dataType = definition.type;\n    if (Array.isArray(dataType)) {\n      for (var i=0; i<dataType.length; i++)\n        _addRule(keyword, dataType[i], definition);\n    } else {\n      _addRule(keyword, dataType, definition);\n    }\n\n    var metaSchema = definition.metaSchema;\n    if (metaSchema) {\n      if (definition.$data && this._opts.$data) {\n        metaSchema = {\n          anyOf: [\n            metaSchema,\n            { '$ref': 'https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#' }\n          ]\n        };\n      }\n      definition.validateSchema = this.compile(metaSchema, true);\n    }\n  }\n\n  RULES.keywords[keyword] = RULES.all[keyword] = true;\n\n\n  function _addRule(keyword, dataType, definition) {\n    var ruleGroup;\n    for (var i=0; i<RULES.length; i++) {\n      var rg = RULES[i];\n      if (rg.type == dataType) {\n        ruleGroup = rg;\n        break;\n      }\n    }\n\n    if (!ruleGroup) {\n      ruleGroup = { type: dataType, rules: [] };\n      RULES.push(ruleGroup);\n    }\n\n    var rule = {\n      keyword: keyword,\n      definition: definition,\n      custom: true,\n      code: customRuleCode,\n      implements: definition.implements\n    };\n    ruleGroup.rules.push(rule);\n    RULES.custom[keyword] = rule;\n  }\n\n  return this;\n}\n\n\n/**\n * Get keyword\n * @this  Ajv\n * @param {String} keyword pre-defined or custom keyword.\n * @return {Object|Boolean} custom keyword definition, `true` if it is a predefined keyword, `false` otherwise.\n */\nfunction getKeyword(keyword) {\n  /* jshint validthis: true */\n  var rule = this.RULES.custom[keyword];\n  return rule ? rule.definition : this.RULES.keywords[keyword] || false;\n}\n\n\n/**\n * Remove keyword\n * @this  Ajv\n * @param {String} keyword pre-defined or custom keyword.\n * @return {Ajv} this for method chaining\n */\nfunction removeKeyword(keyword) {\n  /* jshint validthis: true */\n  var RULES = this.RULES;\n  delete RULES.keywords[keyword];\n  delete RULES.all[keyword];\n  delete RULES.custom[keyword];\n  for (var i=0; i<RULES.length; i++) {\n    var rules = RULES[i].rules;\n    for (var j=0; j<rules.length; j++) {\n      if (rules[j].keyword == keyword) {\n        rules.splice(j, 1);\n        break;\n      }\n    }\n  }\n  return this;\n}\n\n\n/**\n * Validate keyword definition\n * @this  Ajv\n * @param {Object} definition keyword definition object.\n * @param {Boolean} throwError true to throw exception if definition is invalid\n * @return {boolean} validation result\n */\nfunction validateKeyword(definition, throwError) {\n  validateKeyword.errors = null;\n  var v = this._validateKeyword = this._validateKeyword\n                                  || this.compile(definitionSchema, true);\n\n  if (v(definition)) return true;\n  validateKeyword.errors = v.errors;\n  if (throwError)\n    throw new Error('custom keyword definition is invalid: '  + this.errorsText(v.errors));\n  else\n    return false;\n}\n"]}