{"version":3,"sources":["punycode.es6.js"],"names":["maxInt","base","tMin","tMax","skew","damp","initialBias","initialN","delimiter","regexPunycode","regexNonASCII","regexSeparators","errors","baseMinusTMin","floor","Math","stringFromCharCode","String","fromCharCode","error","type","RangeError","map","array","callback","result","length","mapDomain","domain","parts","split","replace","labels","encoded","join","ucs2decode","string","output","counter","value","charCodeAt","extra","push","ucs2encode","codePoints","fromCodePoint","basicToDigit","codePoint","digitToBasic","digit","flag","adapt","delta","numPoints","firstTime","k","decode","input","inputLength","i","n","bias","basic","lastIndexOf","j","index","oldi","w","t","baseMinusT","out","splice","encode","currentValue","basicLength","handledCPCount","m","handledCPCountPlusOne","q","qMinusT","toUnicode","test","slice","toLowerCase","toASCII","punycode"],"mappings":"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","file":"punycode.es6.js","sourcesContent":["'use strict';\n\n/** Highest positive signed 32-bit float value */\nconst maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1\n\n/** Bootstring parameters */\nconst base = 36;\nconst tMin = 1;\nconst tMax = 26;\nconst skew = 38;\nconst damp = 700;\nconst initialBias = 72;\nconst initialN = 128; // 0x80\nconst delimiter = '-'; // '\\x2D'\n\n/** Regular expressions */\nconst regexPunycode = /^xn--/;\nconst regexNonASCII = /[^\\0-\\x7F]/; // Note: U+007F DEL is excluded too.\nconst regexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g; // RFC 3490 separators\n\n/** Error messages */\nconst errors = {\n\t'overflow': 'Overflow: input needs wider integers to process',\n\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t'invalid-input': 'Invalid input'\n};\n\n/** Convenience shortcuts */\nconst baseMinusTMin = base - tMin;\nconst floor = Math.floor;\nconst stringFromCharCode = String.fromCharCode;\n\n/*--------------------------------------------------------------------------*/\n\n/**\n * A generic error utility function.\n * @private\n * @param {String} type The error type.\n * @returns {Error} Throws a `RangeError` with the applicable error message.\n */\nfunction error(type) {\n\tthrow new RangeError(errors[type]);\n}\n\n/**\n * A generic `Array#map` utility function.\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} callback The function that gets called for every array\n * item.\n * @returns {Array} A new array of values returned by the callback function.\n */\nfunction map(array, callback) {\n\tconst result = [];\n\tlet length = array.length;\n\twhile (length--) {\n\t\tresult[length] = callback(array[length]);\n\t}\n\treturn result;\n}\n\n/**\n * A simple `Array#map`-like wrapper to work with domain name strings or email\n * addresses.\n * @private\n * @param {String} domain The domain name or email address.\n * @param {Function} callback The function that gets called for every\n * character.\n * @returns {String} A new string of characters returned by the callback\n * function.\n */\nfunction mapDomain(domain, callback) {\n\tconst parts = domain.split('@');\n\tlet result = '';\n\tif (parts.length > 1) {\n\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t// the local part (i.e. everything up to `@`) intact.\n\t\tresult = parts[0] + '@';\n\t\tdomain = parts[1];\n\t}\n\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\tdomain = domain.replace(regexSeparators, '\\x2E');\n\tconst labels = domain.split('.');\n\tconst encoded = map(labels, callback).join('.');\n\treturn result + encoded;\n}\n\n/**\n * Creates an array containing the numeric code points of each Unicode\n * character in the string. While JavaScript uses UCS-2 internally,\n * this function will convert a pair of surrogate halves (each of which\n * UCS-2 exposes as separate characters) into a single code point,\n * matching UTF-16.\n * @see `punycode.ucs2.encode`\n * @see <https://mathiasbynens.be/notes/javascript-encoding>\n * @memberOf punycode.ucs2\n * @name decode\n * @param {String} string The Unicode input string (UCS-2).\n * @returns {Array} The new array of code points.\n */\nfunction ucs2decode(string) {\n\tconst output = [];\n\tlet counter = 0;\n\tconst length = string.length;\n\twhile (counter < length) {\n\t\tconst value = string.charCodeAt(counter++);\n\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t// It's a high surrogate, and there is a next character.\n\t\t\tconst extra = string.charCodeAt(counter++);\n\t\t\tif ((extra & 0xFC00) == 0xDC00) { // Low surrogate.\n\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t} else {\n\t\t\t\t// It's an unmatched surrogate; only append this code unit, in case the\n\t\t\t\t// next code unit is the high surrogate of a surrogate pair.\n\t\t\t\toutput.push(value);\n\t\t\t\tcounter--;\n\t\t\t}\n\t\t} else {\n\t\t\toutput.push(value);\n\t\t}\n\t}\n\treturn output;\n}\n\n/**\n * Creates a string based on an array of numeric code points.\n * @see `punycode.ucs2.decode`\n * @memberOf punycode.ucs2\n * @name encode\n * @param {Array} codePoints The array of numeric code points.\n * @returns {String} The new Unicode string (UCS-2).\n */\nconst ucs2encode = codePoints => String.fromCodePoint(...codePoints);\n\n/**\n * Converts a basic code point into a digit/integer.\n * @see `digitToBasic()`\n * @private\n * @param {Number} codePoint The basic numeric code point value.\n * @returns {Number} The numeric value of a basic code point (for use in\n * representing integers) in the range `0` to `base - 1`, or `base` if\n * the code point does not represent a value.\n */\nconst basicToDigit = function(codePoint) {\n\tif (codePoint >= 0x30 && codePoint < 0x3A) {\n\t\treturn 26 + (codePoint - 0x30);\n\t}\n\tif (codePoint >= 0x41 && codePoint < 0x5B) {\n\t\treturn codePoint - 0x41;\n\t}\n\tif (codePoint >= 0x61 && codePoint < 0x7B) {\n\t\treturn codePoint - 0x61;\n\t}\n\treturn base;\n};\n\n/**\n * Converts a digit/integer into a basic code point.\n * @see `basicToDigit()`\n * @private\n * @param {Number} digit The numeric value of a basic code point.\n * @returns {Number} The basic code point whose value (when used for\n * representing integers) is `digit`, which needs to be in the range\n * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n * used; else, the lowercase form is used. The behavior is undefined\n * if `flag` is non-zero and `digit` has no uppercase form.\n */\nconst digitToBasic = function(digit, flag) {\n\t//  0..25 map to ASCII a..z or A..Z\n\t// 26..35 map to ASCII 0..9\n\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n};\n\n/**\n * Bias adaptation function as per section 3.4 of RFC 3492.\n * https://tools.ietf.org/html/rfc3492#section-3.4\n * @private\n */\nconst adapt = function(delta, numPoints, firstTime) {\n\tlet k = 0;\n\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\tdelta += floor(delta / numPoints);\n\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\tdelta = floor(delta / baseMinusTMin);\n\t}\n\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n};\n\n/**\n * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n * symbols.\n * @memberOf punycode\n * @param {String} input The Punycode string of ASCII-only symbols.\n * @returns {String} The resulting string of Unicode symbols.\n */\nconst decode = function(input) {\n\t// Don't use UCS-2.\n\tconst output = [];\n\tconst inputLength = input.length;\n\tlet i = 0;\n\tlet n = initialN;\n\tlet bias = initialBias;\n\n\t// Handle the basic code points: let `basic` be the number of input code\n\t// points before the last delimiter, or `0` if there is none, then copy\n\t// the first basic code points to the output.\n\n\tlet basic = input.lastIndexOf(delimiter);\n\tif (basic < 0) {\n\t\tbasic = 0;\n\t}\n\n\tfor (let j = 0; j < basic; ++j) {\n\t\t// if it's not a basic code point\n\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\terror('not-basic');\n\t\t}\n\t\toutput.push(input.charCodeAt(j));\n\t}\n\n\t// Main decoding loop: start just after the last delimiter if any basic code\n\t// points were copied; start at the beginning otherwise.\n\n\tfor (let index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t// `index` is the index of the next character to be consumed.\n\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t// which gets added to `i`. The overflow checking is easier\n\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t// value at the end to obtain `delta`.\n\t\tconst oldi = i;\n\t\tfor (let w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\tif (index >= inputLength) {\n\t\t\t\terror('invalid-input');\n\t\t\t}\n\n\t\t\tconst digit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\tif (digit >= base) {\n\t\t\t\terror('invalid-input');\n\t\t\t}\n\t\t\tif (digit > floor((maxInt - i) / w)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\ti += digit * w;\n\t\t\tconst t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\tif (digit < t) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tconst baseMinusT = base - t;\n\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tw *= baseMinusT;\n\n\t\t}\n\n\t\tconst out = output.length + 1;\n\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t// incrementing `n` each time, so we'll fix that now:\n\t\tif (floor(i / out) > maxInt - n) {\n\t\t\terror('overflow');\n\t\t}\n\n\t\tn += floor(i / out);\n\t\ti %= out;\n\n\t\t// Insert `n` at position `i` of the output.\n\t\toutput.splice(i++, 0, n);\n\n\t}\n\n\treturn String.fromCodePoint(...output);\n};\n\n/**\n * Converts a string of Unicode symbols (e.g. a domain name label) to a\n * Punycode string of ASCII-only symbols.\n * @memberOf punycode\n * @param {String} input The string of Unicode symbols.\n * @returns {String} The resulting Punycode string of ASCII-only symbols.\n */\nconst encode = function(input) {\n\tconst output = [];\n\n\t// Convert the input in UCS-2 to an array of Unicode code points.\n\tinput = ucs2decode(input);\n\n\t// Cache the length.\n\tconst inputLength = input.length;\n\n\t// Initialize the state.\n\tlet n = initialN;\n\tlet delta = 0;\n\tlet bias = initialBias;\n\n\t// Handle the basic code points.\n\tfor (const currentValue of input) {\n\t\tif (currentValue < 0x80) {\n\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t}\n\t}\n\n\tconst basicLength = output.length;\n\tlet handledCPCount = basicLength;\n\n\t// `handledCPCount` is the number of code points that have been handled;\n\t// `basicLength` is the number of basic code points.\n\n\t// Finish the basic string with a delimiter unless it's empty.\n\tif (basicLength) {\n\t\toutput.push(delimiter);\n\t}\n\n\t// Main encoding loop:\n\twhile (handledCPCount < inputLength) {\n\n\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t// larger one:\n\t\tlet m = maxInt;\n\t\tfor (const currentValue of input) {\n\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\tm = currentValue;\n\t\t\t}\n\t\t}\n\n\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t// but guard against overflow.\n\t\tconst handledCPCountPlusOne = handledCPCount + 1;\n\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\terror('overflow');\n\t\t}\n\n\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\tn = m;\n\n\t\tfor (const currentValue of input) {\n\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\t\t\tif (currentValue === n) {\n\t\t\t\t// Represent delta as a generalized variable-length integer.\n\t\t\t\tlet q = delta;\n\t\t\t\tfor (let k = base; /* no condition */; k += base) {\n\t\t\t\t\tconst t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tconst qMinusT = q - t;\n\t\t\t\t\tconst baseMinusT = base - t;\n\t\t\t\t\toutput.push(\n\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t);\n\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t}\n\n\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount === basicLength);\n\t\t\t\tdelta = 0;\n\t\t\t\t++handledCPCount;\n\t\t\t}\n\t\t}\n\n\t\t++delta;\n\t\t++n;\n\n\t}\n\treturn output.join('');\n};\n\n/**\n * Converts a Punycode string representing a domain name or an email address\n * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n * it doesn't matter if you call it on a string that has already been\n * converted to Unicode.\n * @memberOf punycode\n * @param {String} input The Punycoded domain name or email address to\n * convert to Unicode.\n * @returns {String} The Unicode representation of the given Punycode\n * string.\n */\nconst toUnicode = function(input) {\n\treturn mapDomain(input, function(string) {\n\t\treturn regexPunycode.test(string)\n\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t: string;\n\t});\n};\n\n/**\n * Converts a Unicode string representing a domain name or an email address to\n * Punycode. Only the non-ASCII parts of the domain name will be converted,\n * i.e. it doesn't matter if you call it with a domain that's already in\n * ASCII.\n * @memberOf punycode\n * @param {String} input The domain name or email address to convert, as a\n * Unicode string.\n * @returns {String} The Punycode representation of the given domain name or\n * email address.\n */\nconst toASCII = function(input) {\n\treturn mapDomain(input, function(string) {\n\t\treturn regexNonASCII.test(string)\n\t\t\t? 'xn--' + encode(string)\n\t\t\t: string;\n\t});\n};\n\n/*--------------------------------------------------------------------------*/\n\n/** Define the public API */\nconst punycode = {\n\t/**\n\t * A string representing the current Punycode.js version number.\n\t * @memberOf punycode\n\t * @type String\n\t */\n\t'version': '2.1.0',\n\t/**\n\t * An object of methods to convert from JavaScript's internal character\n\t * representation (UCS-2) to Unicode code points, and back.\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode\n\t * @type Object\n\t */\n\t'ucs2': {\n\t\t'decode': ucs2decode,\n\t\t'encode': ucs2encode\n\t},\n\t'decode': decode,\n\t'encode': encode,\n\t'toASCII': toASCII,\n\t'toUnicode': toUnicode\n};\n\nexport { ucs2decode, ucs2encode, decode, encode, toASCII, toUnicode };\nexport default punycode;\n"]}