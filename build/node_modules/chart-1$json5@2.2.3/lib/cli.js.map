{"version":3,"sources":["cli.js"],"names":["fs","require","path","pkg","JSON5","argv","parseArgs","version","help","usage","inFilename","defaults","readStream","createReadStream","process","stdin","json5","on","data","space","Number","value","parse","validate","json","JSON","stringify","writeStream","convert","outFile","parsedFilename","outFilename","format","Object","assign","base","basename","ext","createWriteStream","stdout","write","err","console","error","message","exit","args","slice","i","length","arg","push","log"],"mappings":"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","file":"cli.js","sourcesContent":["\n\nconst fs = require('fs')\nconst path = require('path')\nconst pkg = require('../package.json')\nconst JSON5 = require('./')\n\nconst argv = parseArgs()\n\nif (argv.version) {\n    version()\n} else if (argv.help) {\n    usage()\n} else {\n    const inFilename = argv.defaults[0]\n\n    let readStream\n    if (inFilename) {\n        readStream = fs.createReadStream(inFilename)\n    } else {\n        readStream = process.stdin\n    }\n\n    let json5 = ''\n    readStream.on('data', data => {\n        json5 += data\n    })\n\n    readStream.on('end', () => {\n        let space\n        if (argv.space === 't' || argv.space === 'tab') {\n            space = '\\t'\n        } else {\n            space = Number(argv.space)\n        }\n\n        let value\n        try {\n            value = JSON5.parse(json5)\n            if (!argv.validate) {\n                const json = JSON.stringify(value, null, space)\n\n                let writeStream\n\n                // --convert is for backward compatibility with v0.5.1. If\n                // specified with <file> and not --out-file, then a file with\n                // the same name but with a .json extension will be written.\n                if (argv.convert && inFilename && !argv.outFile) {\n                    const parsedFilename = path.parse(inFilename)\n                    const outFilename = path.format(\n                        Object.assign(\n                            parsedFilename,\n                            {base: path.basename(parsedFilename.base, parsedFilename.ext) + '.json'}\n                        )\n                    )\n\n                    writeStream = fs.createWriteStream(outFilename)\n                } else if (argv.outFile) {\n                    writeStream = fs.createWriteStream(argv.outFile)\n                } else {\n                    writeStream = process.stdout\n                }\n\n                writeStream.write(json)\n            }\n        } catch (err) {\n            console.error(err.message)\n            process.exit(1)\n        }\n    })\n}\n\nfunction parseArgs () {\n    let convert\n    let space\n    let validate\n    let outFile\n    let version\n    let help\n    const defaults = []\n\n    const args = process.argv.slice(2)\n    for (let i = 0; i < args.length; i++) {\n        const arg = args[i]\n        switch (arg) {\n        case '--convert':\n        case '-c':\n            convert = true\n            break\n\n        case '--space':\n        case '-s':\n            space = args[++i]\n            break\n\n        case '--validate':\n        case '-v':\n            validate = true\n            break\n\n        case '--out-file':\n        case '-o':\n            outFile = args[++i]\n            break\n\n        case '--version':\n        case '-V':\n            version = true\n            break\n\n        case '--help':\n        case '-h':\n            help = true\n            break\n\n        default:\n            defaults.push(arg)\n            break\n        }\n    }\n\n    return {\n        convert,\n        space,\n        validate,\n        outFile,\n        version,\n        help,\n        defaults,\n    }\n}\n\nfunction version () {\n    console.log(pkg.version)\n}\n\nfunction usage () {\n    console.log(\n        `\n  Usage: json5 [options] <file>\n\n  If <file> is not provided, then STDIN is used.\n\n  Options:\n\n    -s, --space              The number of spaces to indent or 't' for tabs\n    -o, --out-file [file]    Output to the specified file, otherwise STDOUT\n    -v, --validate           Validate JSON5 but do not output JSON\n    -V, --version            Output the version number\n    -h, --help               Output usage information`\n    )\n}\n"]}