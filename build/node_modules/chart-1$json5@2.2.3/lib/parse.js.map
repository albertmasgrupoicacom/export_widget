{"version":3,"sources":["parse.js"],"names":["util","require","source","parseState","stack","pos","line","column","token","key","root","module","exports","parse","text","reviver","String","undefined","lex","parseStates","type","internalize","holder","name","value","Array","isArray","i","length","replacement","Object","defineProperty","writable","enumerable","configurable","call","lexState","buffer","doubleQuote","sign","c","peek","lexStates","fromCodePoint","codePointAt","read","default","newToken","isSpaceSeparator","comment","invalidChar","multiLineComment","multiLineCommentAsterisk","singleLineComment","literal","Infinity","NaN","identifierNameStartEscape","u","unicodeEscape","isIdStartChar","invalidIdentifier","identifierName","isIdContinueChar","identifierNameEscape","zero","decimalInteger","isDigit","Number","decimalPointLeading","decimalPoint","decimalFraction","decimalExponent","decimalExponentSign","decimalExponentInteger","hexadecimal","isHexDigit","hexadecimalInteger","string","escape","separatorChar","start","beforePropertyName","afterPropertyName","beforePropertyValue","afterPropertyValue","beforeArrayValue","afterArrayValue","end","s","p","hexEscape","parseInt","count","invalidEOF","push","pop","parent","current","syntaxError","formatChar","console","warn","replacements","hexString","charCodeAt","toString","substring","message","err","SyntaxError","lineNumber","columnNumber"],"mappings":"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","file":"parse.js","sourcesContent":["const util = require('./util')\n\nlet source\nlet parseState\nlet stack\nlet pos\nlet line\nlet column\nlet token\nlet key\nlet root\n\nmodule.exports = function parse (text, reviver) {\n    source = String(text)\n    parseState = 'start'\n    stack = []\n    pos = 0\n    line = 1\n    column = 0\n    token = undefined\n    key = undefined\n    root = undefined\n\n    do {\n        token = lex()\n\n        // This code is unreachable.\n        // if (!parseStates[parseState]) {\n        //     throw invalidParseState()\n        // }\n\n        parseStates[parseState]()\n    } while (token.type !== 'eof')\n\n    if (typeof reviver === 'function') {\n        return internalize({'': root}, '', reviver)\n    }\n\n    return root\n}\n\nfunction internalize (holder, name, reviver) {\n    const value = holder[name]\n    if (value != null && typeof value === 'object') {\n        if (Array.isArray(value)) {\n            for (let i = 0; i < value.length; i++) {\n                const key = String(i)\n                const replacement = internalize(value, key, reviver)\n                if (replacement === undefined) {\n                    delete value[key]\n                } else {\n                    Object.defineProperty(value, key, {\n                        value: replacement,\n                        writable: true,\n                        enumerable: true,\n                        configurable: true,\n                    })\n                }\n            }\n        } else {\n            for (const key in value) {\n                const replacement = internalize(value, key, reviver)\n                if (replacement === undefined) {\n                    delete value[key]\n                } else {\n                    Object.defineProperty(value, key, {\n                        value: replacement,\n                        writable: true,\n                        enumerable: true,\n                        configurable: true,\n                    })\n                }\n            }\n        }\n    }\n\n    return reviver.call(holder, name, value)\n}\n\nlet lexState\nlet buffer\nlet doubleQuote\nlet sign\nlet c\n\nfunction lex () {\n    lexState = 'default'\n    buffer = ''\n    doubleQuote = false\n    sign = 1\n\n    for (;;) {\n        c = peek()\n\n        // This code is unreachable.\n        // if (!lexStates[lexState]) {\n        //     throw invalidLexState(lexState)\n        // }\n\n        const token = lexStates[lexState]()\n        if (token) {\n            return token\n        }\n    }\n}\n\nfunction peek () {\n    if (source[pos]) {\n        return String.fromCodePoint(source.codePointAt(pos))\n    }\n}\n\nfunction read () {\n    const c = peek()\n\n    if (c === '\\n') {\n        line++\n        column = 0\n    } else if (c) {\n        column += c.length\n    } else {\n        column++\n    }\n\n    if (c) {\n        pos += c.length\n    }\n\n    return c\n}\n\nconst lexStates = {\n    default () {\n        switch (c) {\n        case '\\t':\n        case '\\v':\n        case '\\f':\n        case ' ':\n        case '\\u00A0':\n        case '\\uFEFF':\n        case '\\n':\n        case '\\r':\n        case '\\u2028':\n        case '\\u2029':\n            read()\n            return\n\n        case '/':\n            read()\n            lexState = 'comment'\n            return\n\n        case undefined:\n            read()\n            return newToken('eof')\n        }\n\n        if (util.isSpaceSeparator(c)) {\n            read()\n            return\n        }\n\n        // This code is unreachable.\n        // if (!lexStates[parseState]) {\n        //     throw invalidLexState(parseState)\n        // }\n\n        return lexStates[parseState]()\n    },\n\n    comment () {\n        switch (c) {\n        case '*':\n            read()\n            lexState = 'multiLineComment'\n            return\n\n        case '/':\n            read()\n            lexState = 'singleLineComment'\n            return\n        }\n\n        throw invalidChar(read())\n    },\n\n    multiLineComment () {\n        switch (c) {\n        case '*':\n            read()\n            lexState = 'multiLineCommentAsterisk'\n            return\n\n        case undefined:\n            throw invalidChar(read())\n        }\n\n        read()\n    },\n\n    multiLineCommentAsterisk () {\n        switch (c) {\n        case '*':\n            read()\n            return\n\n        case '/':\n            read()\n            lexState = 'default'\n            return\n\n        case undefined:\n            throw invalidChar(read())\n        }\n\n        read()\n        lexState = 'multiLineComment'\n    },\n\n    singleLineComment () {\n        switch (c) {\n        case '\\n':\n        case '\\r':\n        case '\\u2028':\n        case '\\u2029':\n            read()\n            lexState = 'default'\n            return\n\n        case undefined:\n            read()\n            return newToken('eof')\n        }\n\n        read()\n    },\n\n    value () {\n        switch (c) {\n        case '{':\n        case '[':\n            return newToken('punctuator', read())\n\n        case 'n':\n            read()\n            literal('ull')\n            return newToken('null', null)\n\n        case 't':\n            read()\n            literal('rue')\n            return newToken('boolean', true)\n\n        case 'f':\n            read()\n            literal('alse')\n            return newToken('boolean', false)\n\n        case '-':\n        case '+':\n            if (read() === '-') {\n                sign = -1\n            }\n\n            lexState = 'sign'\n            return\n\n        case '.':\n            buffer = read()\n            lexState = 'decimalPointLeading'\n            return\n\n        case '0':\n            buffer = read()\n            lexState = 'zero'\n            return\n\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            buffer = read()\n            lexState = 'decimalInteger'\n            return\n\n        case 'I':\n            read()\n            literal('nfinity')\n            return newToken('numeric', Infinity)\n\n        case 'N':\n            read()\n            literal('aN')\n            return newToken('numeric', NaN)\n\n        case '\"':\n        case \"'\":\n            doubleQuote = (read() === '\"')\n            buffer = ''\n            lexState = 'string'\n            return\n        }\n\n        throw invalidChar(read())\n    },\n\n    identifierNameStartEscape () {\n        if (c !== 'u') {\n            throw invalidChar(read())\n        }\n\n        read()\n        const u = unicodeEscape()\n        switch (u) {\n        case '$':\n        case '_':\n            break\n\n        default:\n            if (!util.isIdStartChar(u)) {\n                throw invalidIdentifier()\n            }\n\n            break\n        }\n\n        buffer += u\n        lexState = 'identifierName'\n    },\n\n    identifierName () {\n        switch (c) {\n        case '$':\n        case '_':\n        case '\\u200C':\n        case '\\u200D':\n            buffer += read()\n            return\n\n        case '\\\\':\n            read()\n            lexState = 'identifierNameEscape'\n            return\n        }\n\n        if (util.isIdContinueChar(c)) {\n            buffer += read()\n            return\n        }\n\n        return newToken('identifier', buffer)\n    },\n\n    identifierNameEscape () {\n        if (c !== 'u') {\n            throw invalidChar(read())\n        }\n\n        read()\n        const u = unicodeEscape()\n        switch (u) {\n        case '$':\n        case '_':\n        case '\\u200C':\n        case '\\u200D':\n            break\n\n        default:\n            if (!util.isIdContinueChar(u)) {\n                throw invalidIdentifier()\n            }\n\n            break\n        }\n\n        buffer += u\n        lexState = 'identifierName'\n    },\n\n    sign () {\n        switch (c) {\n        case '.':\n            buffer = read()\n            lexState = 'decimalPointLeading'\n            return\n\n        case '0':\n            buffer = read()\n            lexState = 'zero'\n            return\n\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            buffer = read()\n            lexState = 'decimalInteger'\n            return\n\n        case 'I':\n            read()\n            literal('nfinity')\n            return newToken('numeric', sign * Infinity)\n\n        case 'N':\n            read()\n            literal('aN')\n            return newToken('numeric', NaN)\n        }\n\n        throw invalidChar(read())\n    },\n\n    zero () {\n        switch (c) {\n        case '.':\n            buffer += read()\n            lexState = 'decimalPoint'\n            return\n\n        case 'e':\n        case 'E':\n            buffer += read()\n            lexState = 'decimalExponent'\n            return\n\n        case 'x':\n        case 'X':\n            buffer += read()\n            lexState = 'hexadecimal'\n            return\n        }\n\n        return newToken('numeric', sign * 0)\n    },\n\n    decimalInteger () {\n        switch (c) {\n        case '.':\n            buffer += read()\n            lexState = 'decimalPoint'\n            return\n\n        case 'e':\n        case 'E':\n            buffer += read()\n            lexState = 'decimalExponent'\n            return\n        }\n\n        if (util.isDigit(c)) {\n            buffer += read()\n            return\n        }\n\n        return newToken('numeric', sign * Number(buffer))\n    },\n\n    decimalPointLeading () {\n        if (util.isDigit(c)) {\n            buffer += read()\n            lexState = 'decimalFraction'\n            return\n        }\n\n        throw invalidChar(read())\n    },\n\n    decimalPoint () {\n        switch (c) {\n        case 'e':\n        case 'E':\n            buffer += read()\n            lexState = 'decimalExponent'\n            return\n        }\n\n        if (util.isDigit(c)) {\n            buffer += read()\n            lexState = 'decimalFraction'\n            return\n        }\n\n        return newToken('numeric', sign * Number(buffer))\n    },\n\n    decimalFraction () {\n        switch (c) {\n        case 'e':\n        case 'E':\n            buffer += read()\n            lexState = 'decimalExponent'\n            return\n        }\n\n        if (util.isDigit(c)) {\n            buffer += read()\n            return\n        }\n\n        return newToken('numeric', sign * Number(buffer))\n    },\n\n    decimalExponent () {\n        switch (c) {\n        case '+':\n        case '-':\n            buffer += read()\n            lexState = 'decimalExponentSign'\n            return\n        }\n\n        if (util.isDigit(c)) {\n            buffer += read()\n            lexState = 'decimalExponentInteger'\n            return\n        }\n\n        throw invalidChar(read())\n    },\n\n    decimalExponentSign () {\n        if (util.isDigit(c)) {\n            buffer += read()\n            lexState = 'decimalExponentInteger'\n            return\n        }\n\n        throw invalidChar(read())\n    },\n\n    decimalExponentInteger () {\n        if (util.isDigit(c)) {\n            buffer += read()\n            return\n        }\n\n        return newToken('numeric', sign * Number(buffer))\n    },\n\n    hexadecimal () {\n        if (util.isHexDigit(c)) {\n            buffer += read()\n            lexState = 'hexadecimalInteger'\n            return\n        }\n\n        throw invalidChar(read())\n    },\n\n    hexadecimalInteger () {\n        if (util.isHexDigit(c)) {\n            buffer += read()\n            return\n        }\n\n        return newToken('numeric', sign * Number(buffer))\n    },\n\n    string () {\n        switch (c) {\n        case '\\\\':\n            read()\n            buffer += escape()\n            return\n\n        case '\"':\n            if (doubleQuote) {\n                read()\n                return newToken('string', buffer)\n            }\n\n            buffer += read()\n            return\n\n        case \"'\":\n            if (!doubleQuote) {\n                read()\n                return newToken('string', buffer)\n            }\n\n            buffer += read()\n            return\n\n        case '\\n':\n        case '\\r':\n            throw invalidChar(read())\n\n        case '\\u2028':\n        case '\\u2029':\n            separatorChar(c)\n            break\n\n        case undefined:\n            throw invalidChar(read())\n        }\n\n        buffer += read()\n    },\n\n    start () {\n        switch (c) {\n        case '{':\n        case '[':\n            return newToken('punctuator', read())\n\n        // This code is unreachable since the default lexState handles eof.\n        // case undefined:\n        //     return newToken('eof')\n        }\n\n        lexState = 'value'\n    },\n\n    beforePropertyName () {\n        switch (c) {\n        case '$':\n        case '_':\n            buffer = read()\n            lexState = 'identifierName'\n            return\n\n        case '\\\\':\n            read()\n            lexState = 'identifierNameStartEscape'\n            return\n\n        case '}':\n            return newToken('punctuator', read())\n\n        case '\"':\n        case \"'\":\n            doubleQuote = (read() === '\"')\n            lexState = 'string'\n            return\n        }\n\n        if (util.isIdStartChar(c)) {\n            buffer += read()\n            lexState = 'identifierName'\n            return\n        }\n\n        throw invalidChar(read())\n    },\n\n    afterPropertyName () {\n        if (c === ':') {\n            return newToken('punctuator', read())\n        }\n\n        throw invalidChar(read())\n    },\n\n    beforePropertyValue () {\n        lexState = 'value'\n    },\n\n    afterPropertyValue () {\n        switch (c) {\n        case ',':\n        case '}':\n            return newToken('punctuator', read())\n        }\n\n        throw invalidChar(read())\n    },\n\n    beforeArrayValue () {\n        if (c === ']') {\n            return newToken('punctuator', read())\n        }\n\n        lexState = 'value'\n    },\n\n    afterArrayValue () {\n        switch (c) {\n        case ',':\n        case ']':\n            return newToken('punctuator', read())\n        }\n\n        throw invalidChar(read())\n    },\n\n    end () {\n        // This code is unreachable since it's handled by the default lexState.\n        // if (c === undefined) {\n        //     read()\n        //     return newToken('eof')\n        // }\n\n        throw invalidChar(read())\n    },\n}\n\nfunction newToken (type, value) {\n    return {\n        type,\n        value,\n        line,\n        column,\n    }\n}\n\nfunction literal (s) {\n    for (const c of s) {\n        const p = peek()\n\n        if (p !== c) {\n            throw invalidChar(read())\n        }\n\n        read()\n    }\n}\n\nfunction escape () {\n    const c = peek()\n    switch (c) {\n    case 'b':\n        read()\n        return '\\b'\n\n    case 'f':\n        read()\n        return '\\f'\n\n    case 'n':\n        read()\n        return '\\n'\n\n    case 'r':\n        read()\n        return '\\r'\n\n    case 't':\n        read()\n        return '\\t'\n\n    case 'v':\n        read()\n        return '\\v'\n\n    case '0':\n        read()\n        if (util.isDigit(peek())) {\n            throw invalidChar(read())\n        }\n\n        return '\\0'\n\n    case 'x':\n        read()\n        return hexEscape()\n\n    case 'u':\n        read()\n        return unicodeEscape()\n\n    case '\\n':\n    case '\\u2028':\n    case '\\u2029':\n        read()\n        return ''\n\n    case '\\r':\n        read()\n        if (peek() === '\\n') {\n            read()\n        }\n\n        return ''\n\n    case '1':\n    case '2':\n    case '3':\n    case '4':\n    case '5':\n    case '6':\n    case '7':\n    case '8':\n    case '9':\n        throw invalidChar(read())\n\n    case undefined:\n        throw invalidChar(read())\n    }\n\n    return read()\n}\n\nfunction hexEscape () {\n    let buffer = ''\n    let c = peek()\n\n    if (!util.isHexDigit(c)) {\n        throw invalidChar(read())\n    }\n\n    buffer += read()\n\n    c = peek()\n    if (!util.isHexDigit(c)) {\n        throw invalidChar(read())\n    }\n\n    buffer += read()\n\n    return String.fromCodePoint(parseInt(buffer, 16))\n}\n\nfunction unicodeEscape () {\n    let buffer = ''\n    let count = 4\n\n    while (count-- > 0) {\n        const c = peek()\n        if (!util.isHexDigit(c)) {\n            throw invalidChar(read())\n        }\n\n        buffer += read()\n    }\n\n    return String.fromCodePoint(parseInt(buffer, 16))\n}\n\nconst parseStates = {\n    start () {\n        if (token.type === 'eof') {\n            throw invalidEOF()\n        }\n\n        push()\n    },\n\n    beforePropertyName () {\n        switch (token.type) {\n        case 'identifier':\n        case 'string':\n            key = token.value\n            parseState = 'afterPropertyName'\n            return\n\n        case 'punctuator':\n            // This code is unreachable since it's handled by the lexState.\n            // if (token.value !== '}') {\n            //     throw invalidToken()\n            // }\n\n            pop()\n            return\n\n        case 'eof':\n            throw invalidEOF()\n        }\n\n        // This code is unreachable since it's handled by the lexState.\n        // throw invalidToken()\n    },\n\n    afterPropertyName () {\n        // This code is unreachable since it's handled by the lexState.\n        // if (token.type !== 'punctuator' || token.value !== ':') {\n        //     throw invalidToken()\n        // }\n\n        if (token.type === 'eof') {\n            throw invalidEOF()\n        }\n\n        parseState = 'beforePropertyValue'\n    },\n\n    beforePropertyValue () {\n        if (token.type === 'eof') {\n            throw invalidEOF()\n        }\n\n        push()\n    },\n\n    beforeArrayValue () {\n        if (token.type === 'eof') {\n            throw invalidEOF()\n        }\n\n        if (token.type === 'punctuator' && token.value === ']') {\n            pop()\n            return\n        }\n\n        push()\n    },\n\n    afterPropertyValue () {\n        // This code is unreachable since it's handled by the lexState.\n        // if (token.type !== 'punctuator') {\n        //     throw invalidToken()\n        // }\n\n        if (token.type === 'eof') {\n            throw invalidEOF()\n        }\n\n        switch (token.value) {\n        case ',':\n            parseState = 'beforePropertyName'\n            return\n\n        case '}':\n            pop()\n        }\n\n        // This code is unreachable since it's handled by the lexState.\n        // throw invalidToken()\n    },\n\n    afterArrayValue () {\n        // This code is unreachable since it's handled by the lexState.\n        // if (token.type !== 'punctuator') {\n        //     throw invalidToken()\n        // }\n\n        if (token.type === 'eof') {\n            throw invalidEOF()\n        }\n\n        switch (token.value) {\n        case ',':\n            parseState = 'beforeArrayValue'\n            return\n\n        case ']':\n            pop()\n        }\n\n        // This code is unreachable since it's handled by the lexState.\n        // throw invalidToken()\n    },\n\n    end () {\n        // This code is unreachable since it's handled by the lexState.\n        // if (token.type !== 'eof') {\n        //     throw invalidToken()\n        // }\n    },\n}\n\nfunction push () {\n    let value\n\n    switch (token.type) {\n    case 'punctuator':\n        switch (token.value) {\n        case '{':\n            value = {}\n            break\n\n        case '[':\n            value = []\n            break\n        }\n\n        break\n\n    case 'null':\n    case 'boolean':\n    case 'numeric':\n    case 'string':\n        value = token.value\n        break\n\n    // This code is unreachable.\n    // default:\n    //     throw invalidToken()\n    }\n\n    if (root === undefined) {\n        root = value\n    } else {\n        const parent = stack[stack.length - 1]\n        if (Array.isArray(parent)) {\n            parent.push(value)\n        } else {\n            Object.defineProperty(parent, key, {\n                value,\n                writable: true,\n                enumerable: true,\n                configurable: true,\n            })\n        }\n    }\n\n    if (value !== null && typeof value === 'object') {\n        stack.push(value)\n\n        if (Array.isArray(value)) {\n            parseState = 'beforeArrayValue'\n        } else {\n            parseState = 'beforePropertyName'\n        }\n    } else {\n        const current = stack[stack.length - 1]\n        if (current == null) {\n            parseState = 'end'\n        } else if (Array.isArray(current)) {\n            parseState = 'afterArrayValue'\n        } else {\n            parseState = 'afterPropertyValue'\n        }\n    }\n}\n\nfunction pop () {\n    stack.pop()\n\n    const current = stack[stack.length - 1]\n    if (current == null) {\n        parseState = 'end'\n    } else if (Array.isArray(current)) {\n        parseState = 'afterArrayValue'\n    } else {\n        parseState = 'afterPropertyValue'\n    }\n}\n\n// This code is unreachable.\n// function invalidParseState () {\n//     return new Error(`JSON5: invalid parse state '${parseState}'`)\n// }\n\n// This code is unreachable.\n// function invalidLexState (state) {\n//     return new Error(`JSON5: invalid lex state '${state}'`)\n// }\n\nfunction invalidChar (c) {\n    if (c === undefined) {\n        return syntaxError(`JSON5: invalid end of input at ${line}:${column}`)\n    }\n\n    return syntaxError(`JSON5: invalid character '${formatChar(c)}' at ${line}:${column}`)\n}\n\nfunction invalidEOF () {\n    return syntaxError(`JSON5: invalid end of input at ${line}:${column}`)\n}\n\n// This code is unreachable.\n// function invalidToken () {\n//     if (token.type === 'eof') {\n//         return syntaxError(`JSON5: invalid end of input at ${line}:${column}`)\n//     }\n\n//     const c = String.fromCodePoint(token.value.codePointAt(0))\n//     return syntaxError(`JSON5: invalid character '${formatChar(c)}' at ${line}:${column}`)\n// }\n\nfunction invalidIdentifier () {\n    column -= 5\n    return syntaxError(`JSON5: invalid identifier character at ${line}:${column}`)\n}\n\nfunction separatorChar (c) {\n    console.warn(`JSON5: '${formatChar(c)}' in strings is not valid ECMAScript; consider escaping`)\n}\n\nfunction formatChar (c) {\n    const replacements = {\n        \"'\": \"\\\\'\",\n        '\"': '\\\\\"',\n        '\\\\': '\\\\\\\\',\n        '\\b': '\\\\b',\n        '\\f': '\\\\f',\n        '\\n': '\\\\n',\n        '\\r': '\\\\r',\n        '\\t': '\\\\t',\n        '\\v': '\\\\v',\n        '\\0': '\\\\0',\n        '\\u2028': '\\\\u2028',\n        '\\u2029': '\\\\u2029',\n    }\n\n    if (replacements[c]) {\n        return replacements[c]\n    }\n\n    if (c < ' ') {\n        const hexString = c.charCodeAt(0).toString(16)\n        return '\\\\x' + ('00' + hexString).substring(hexString.length)\n    }\n\n    return c\n}\n\nfunction syntaxError (message) {\n    const err = new SyntaxError(message)\n    err.lineNumber = line\n    err.columnNumber = column\n    return err\n}\n"]}