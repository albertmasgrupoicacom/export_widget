'use strict';

Liferay.Loader.define('chart-1$locate-path@5.0.0/index', ['module', 'exports', 'require', 'chart-1$path', 'chart-1$fs', 'chart-1$util', 'chart-1$p-locate'], function (module, exports, require) {
	var define = undefined;
	var global = window;
	{
		var _extends = Object.assign || function (target) {
			for (var i = 1; i < arguments.length; i++) {
				var source = arguments[i];

				for (var key in source) {
					if (Object.prototype.hasOwnProperty.call(source, key)) {
						target[key] = source[key];
					}
				}
			}

			return target;
		};

		const path = require('chart-1$path');
		const fs = require('chart-1$fs');
		const { promisify } = require('chart-1$util');
		const pLocate = require('chart-1$p-locate');

		const fsStat = promisify(fs.stat);
		const fsLStat = promisify(fs.lstat);

		const typeMappings = {
			directory: 'isDirectory',
			file: 'isFile'
		};

		function checkType({ type }) {
			if (type in typeMappings) {
				return;
			}

			throw new Error(`Invalid type specified: ${type}`);
		}

		const matchType = (type, stat) => type === undefined || stat[typeMappings[type]]();

		module.exports = async (paths, options) => {
			options = _extends({
				cwd: process.cwd(),
				type: 'file',
				allowSymlinks: true
			}, options);
			checkType(options);
			const statFn = options.allowSymlinks ? fsStat : fsLStat;

			return pLocate(paths, async path_ => {
				try {
					const stat = await statFn(path.resolve(options.cwd, path_));
					return matchType(options.type, stat);
				} catch (_) {
					return false;
				}
			}, options);
		};

		module.exports.sync = (paths, options) => {
			options = _extends({
				cwd: process.cwd(),
				allowSymlinks: true,
				type: 'file'
			}, options);
			checkType(options);
			const statFn = options.allowSymlinks ? fs.statSync : fs.lstatSync;

			for (const path_ of paths) {
				try {
					const stat = statFn(path.resolve(options.cwd, path_));

					if (matchType(options.type, stat)) {
						return path_;
					}
				} catch (_) {}
			}
		};
	}
});
//# sourceMappingURL=index.js.map