'use strict';

Liferay.Loader.define('chart-1$find-cache-dir@3.3.2/index', ['module', 'exports', 'require', 'chart-1$path', 'chart-1$fs', 'chart-1$commondir', 'chart-1$pkg-dir', 'chart-1$make-dir'], function (module, exports, require) {
	var define = undefined;
	var global = window;
	{
		const path = require('chart-1$path');
		const fs = require('chart-1$fs');
		const commonDir = require('chart-1$commondir');
		const pkgDir = require('chart-1$pkg-dir');
		const makeDir = require('chart-1$make-dir');

		const { env, cwd } = process;

		const isWritable = path => {
			try {
				fs.accessSync(path, fs.constants.W_OK);
				return true;
			} catch (_) {
				return false;
			}
		};

		function useDirectory(directory, options) {
			if (options.create) {
				makeDir.sync(directory);
			}

			if (options.thunk) {
				return (...arguments_) => path.join(directory, ...arguments_);
			}

			return directory;
		}

		function getNodeModuleDirectory(directory) {
			const nodeModules = path.join(directory, 'node_modules');

			if (!isWritable(nodeModules) && (fs.existsSync(nodeModules) || !isWritable(path.join(directory)))) {
				return;
			}

			return nodeModules;
		}

		module.exports = (options = {}) => {
			if (env.CACHE_DIR && !['true', 'false', '1', '0'].includes(env.CACHE_DIR)) {
				return useDirectory(path.join(env.CACHE_DIR, options.name), options);
			}

			let { cwd: directory = cwd() } = options;

			if (options.files) {
				directory = commonDir(directory, options.files);
			}

			directory = pkgDir.sync(directory);

			if (!directory) {
				return;
			}

			const nodeModules = getNodeModuleDirectory(directory);
			if (!nodeModules) {
				return undefined;
			}

			return useDirectory(path.join(directory, 'node_modules', '.cache', options.name), options);
		};
	}
});
//# sourceMappingURL=index.js.map