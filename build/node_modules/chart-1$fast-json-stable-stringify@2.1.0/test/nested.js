'use strict';

Liferay.Loader.define('chart-1$fast-json-stable-stringify@2.1.0/test/nested', ['module', 'exports', 'require', 'chart-1$tape', '..'], function (module, exports, require) {
    var define = undefined;
    var global = window;
    {
        var test = require('chart-1$tape');
        var stringify = require('..');

        test('nested', function (t) {
            t.plan(1);

            t.equal(stringify({ c: 8, b: [{ z: 6, y: 5, x: 4 }, 7], a: 3 }), '{"a":3,"b":[{"x":4,"y":5,"z":6},7],"c":8}');
        });

        test('cyclic (default)', function (t) {
            t.plan(1);
            var one = { a: 1 };

            one.two = { a: 2, one: one };
            try {
                stringify(one);
            } catch (ex) {
                t.equal(ex.toString(), 'TypeError: Converting circular structure to JSON');
            }
        });

        test('cyclic (specifically allowed)', function (t) {
            t.plan(1);
            var one = { a: 1 };

            one.two = { a: 2, one: one };
            t.equal(stringify(one, { cycles: true }), '{"a":1,"two":{"a":2,"one":"__cycle__"}}');
        });

        test('repeated non-cyclic value', function (t) {
            t.plan(1);
            var one = { x: 1 };

            t.equal(stringify({ a: one, b: one }), '{"a":{"x":1},"b":{"x":1}}');
        });

        test('acyclic but with reused obj-property pointers', function (t) {
            t.plan(1);
            var x = { a: 1 };

            t.equal(stringify({ b: x, c: x }), '{"b":{"a":1},"c":{"a":1}}');
        });
    }
});
//# sourceMappingURL=nested.js.map