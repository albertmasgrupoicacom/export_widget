{"version":3,"sources":["nested.js"],"names":["test","require","stringify","t","plan","equal","c","b","z","y","x","a","one","two","ex","toString","cycles"],"mappings":"AAAA;;;;;;AAEA,YAAIA,OAAOC,QAAQ,cAAR,CAAX;AACA,YAAIC,YAAYD,QAAQ,IAAR,CAAhB;;AAEAD,aAAK,QAAL,EAAe,UAAUG,CAAV,EAAa;AACxBA,cAAEC,IAAF,CAAO,CAAP;;AAEAD,cAAEE,KAAF,CAAQH,UADE,EAAEI,GAAG,CAAL,EAAQC,GAAG,CAAC,EAACC,GAAE,CAAH,EAAKC,GAAE,CAAP,EAASC,GAAE,CAAX,EAAD,EAAe,CAAf,CAAX,EAA8BC,GAAG,CAAjC,EACF,CAAR,EAAwB,2CAAxB;AACH,SAJD;;AAMAX,aAAK,kBAAL,EAAyB,UAAUG,CAAV,EAAa;AAClCA,cAAEC,IAAF,CAAO,CAAP;AACA,gBAAIQ,MAAM,EAAED,GAAG,CAAL,EAAV;;AAEAC,gBAAIC,GAAJ,GADU,EAAEF,GAAG,CAAL,EAAQC,KAAKA,GAAb,EACV;AACA,gBAAI;AACAV,0BAAUU,GAAV;AACH,aAFD,CAEE,OAAOE,EAAP,EAAW;AACTX,kBAAEE,KAAF,CAAQS,GAAGC,QAAH,EAAR,EAAuB,kDAAvB;AACH;AACJ,SAVD;;AAYAf,aAAK,+BAAL,EAAsC,UAAUG,CAAV,EAAa;AAC/CA,cAAEC,IAAF,CAAO,CAAP;AACA,gBAAIQ,MAAM,EAAED,GAAG,CAAL,EAAV;;AAEAC,gBAAIC,GAAJ,GADU,EAAEF,GAAG,CAAL,EAAQC,KAAKA,GAAb,EACV;AACAT,cAAEE,KAAF,CAAQH,UAAUU,GAAV,EAAe,EAACI,QAAO,IAAR,EAAf,CAAR,EAAuC,yCAAvC;AACH,SAND;;AAQAhB,aAAK,2BAAL,EAAkC,UAASG,CAAT,EAAY;AAC1CA,cAAEC,IAAF,CAAO,CAAP;AACA,gBAAIQ,MAAM,EAAEF,GAAG,CAAL,EAAV;;AAEAP,cAAEE,KAAF,CAAQH,UADE,EAAES,GAAGC,GAAL,EAAUL,GAAGK,GAAb,EACF,CAAR,EAAwB,2BAAxB;AACH,SALD;;AAOAZ,aAAK,+CAAL,EAAsD,UAAUG,CAAV,EAAa;AAC/DA,cAAEC,IAAF,CAAO,CAAP;AACA,gBAAIM,IAAI,EAAEC,GAAG,CAAL,EAAR;;AAEAR,cAAEE,KAAF,CAAQH,UADA,EAAEK,GAAGG,CAAL,EAAQJ,GAAGI,CAAX,EACA,CAAR,EAAsB,2BAAtB;AACH,SALD","file":"nested.js","sourcesContent":["'use strict';\n\nvar test = require('tape');\nvar stringify = require('../');\n\ntest('nested', function (t) {\n    t.plan(1);\n    var obj = { c: 8, b: [{z:6,y:5,x:4},7], a: 3 };\n    t.equal(stringify(obj), '{\"a\":3,\"b\":[{\"x\":4,\"y\":5,\"z\":6},7],\"c\":8}');\n});\n\ntest('cyclic (default)', function (t) {\n    t.plan(1);\n    var one = { a: 1 };\n    var two = { a: 2, one: one };\n    one.two = two;\n    try {\n        stringify(one);\n    } catch (ex) {\n        t.equal(ex.toString(), 'TypeError: Converting circular structure to JSON');\n    }\n});\n\ntest('cyclic (specifically allowed)', function (t) {\n    t.plan(1);\n    var one = { a: 1 };\n    var two = { a: 2, one: one };\n    one.two = two;\n    t.equal(stringify(one, {cycles:true}), '{\"a\":1,\"two\":{\"a\":2,\"one\":\"__cycle__\"}}');\n});\n\ntest('repeated non-cyclic value', function(t) {\n    t.plan(1);\n    var one = { x: 1 };\n    var two = { a: one, b: one };\n    t.equal(stringify(two), '{\"a\":{\"x\":1},\"b\":{\"x\":1}}');\n});\n\ntest('acyclic but with reused obj-property pointers', function (t) {\n    t.plan(1);\n    var x = { a: 1 };\n    var y = { b: x, c: x };\n    t.equal(stringify(y), '{\"b\":{\"a\":1},\"c\":{\"a\":1}}');\n});\n"]}