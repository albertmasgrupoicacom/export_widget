{"version":3,"sources":["_bind.js"],"names":["aFunction","require","isObject","invoke","arraySlice","slice","factories","construct","F","len","args","n","i","Function","join","module","exports","bind","that","fn","partArgs","call","arguments","bound","concat","length","prototype"],"mappings":"AAAA;;;;;;AACA,QAAIA,YAAYC,QAAQ,eAAR,CAAhB;AACA,QAAIC,WAAWD,QAAQ,cAAR,CAAf;AACA,QAAIE,SAASF,QAAQ,WAAR,CAAb;AACA,QAAIG,aAAa,GAAGC,KAApB;AACA,QAAIC,YAAY,EAAhB;;AAEA,QAAIC,YAAY,UAAUC,CAAV,EAAaC,GAAb,EAAkBC,IAAlB,EAAwB;AACtC,UAAI,EAAED,OAAOH,SAAT,CAAJ,EAAyB;AACvB,aAAK,IAAIK,IAAI,EAAR,EAAYC,IAAI,CAArB,EAAwBA,IAAIH,GAA5B,EAAiCG,GAAjC,EAAsCD,EAAEC,CAAF,IAAO,OAAOA,CAAP,GAAW,GAAlB;AACtC;AACAN,kBAAUG,GAAV,IAAiBI,SAAS,KAAT,EAAgB,kBAAkBF,EAAEG,IAAF,CAAO,GAAP,CAAlB,GAAgC,GAAhD,CAAjB;AACD,OAAC,OAAOR,UAAUG,GAAV,EAAeD,CAAf,EAAkBE,IAAlB,CAAP;AACH,KAND;;AAQAK,WAAOC,OAAP,GAAiBH,SAASI,IAAT,IAAiB,SAASA,IAAT,CAAcC,IAAd,CAAmB,eAAnB,EAAoC;AACpE,UAAIC,KAAKnB,UAAU,IAAV,CAAT;AACA,UAAIoB,WAAWhB,WAAWiB,IAAX,CAAgBC,SAAhB,EAA2B,CAA3B,CAAf;AACA,UAAIC,QAAQ,YAAU,aAAe;AACnC,YAAIb,OAAOU,SAASI,MAAT,CAAgBpB,WAAWiB,IAAX,CAAgBC,SAAhB,CAAhB,CAAX;AACA,eAAO,gBAAgBC,KAAhB,GAAwBhB,UAAUY,EAAV,EAAcT,KAAKe,MAAnB,EAA2Bf,IAA3B,CAAxB,GAA2DP,OAAOgB,EAAP,EAAWT,IAAX,EAAiBQ,IAAjB,CAAlE;AACD,OAHD;AAIA,UAAIhB,SAASiB,GAAGO,SAAZ,CAAJ,EAA4BH,MAAMG,SAAN,GAAkBP,GAAGO,SAArB;AAC5B,aAAOH,KAAP;AACD,KATD","file":"_bind.js","sourcesContent":["'use strict';\nvar aFunction = require('./_a-function');\nvar isObject = require('./_is-object');\nvar invoke = require('./_invoke');\nvar arraySlice = [].slice;\nvar factories = {};\n\nvar construct = function (F, len, args) {\n  if (!(len in factories)) {\n    for (var n = [], i = 0; i < len; i++) n[i] = 'a[' + i + ']';\n    // eslint-disable-next-line no-new-func\n    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');\n  } return factories[len](F, args);\n};\n\nmodule.exports = Function.bind || function bind(that /* , ...args */) {\n  var fn = aFunction(this);\n  var partArgs = arraySlice.call(arguments, 1);\n  var bound = function (/* args... */) {\n    var args = partArgs.concat(arraySlice.call(arguments));\n    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);\n  };\n  if (isObject(fn.prototype)) bound.prototype = fn.prototype;\n  return bound;\n};\n"]}