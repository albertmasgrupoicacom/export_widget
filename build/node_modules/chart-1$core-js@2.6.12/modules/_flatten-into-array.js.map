{"version":3,"sources":["_flatten-into-array.js"],"names":["isArray","require","isObject","toLength","ctx","IS_CONCAT_SPREADABLE","flattenIntoArray","target","original","source","sourceLen","start","depth","mapper","thisArg","targetIndex","sourceIndex","mapFn","element","spreadable","undefined","length","TypeError","module","exports"],"mappings":"AAAA;AACA;;;;;;AACA,QAAIA,UAAUC,QAAQ,aAAR,CAAd;AACA,QAAIC,WAAWD,QAAQ,cAAR,CAAf;AACA,QAAIE,WAAWF,QAAQ,cAAR,CAAf;AACA,QAAIG,MAAMH,QAAQ,QAAR,CAAV;AACA,QAAII,uBAAuBJ,QAAQ,QAAR,EAAkB,oBAAlB,CAA3B;;AAEA,aAASK,gBAAT,CAA0BC,MAA1B,EAAkCC,QAAlC,EAA4CC,MAA5C,EAAoDC,SAApD,EAA+DC,KAA/D,EAAsEC,KAAtE,EAA6EC,MAA7E,EAAqFC,OAArF,EAA8F;AAC5F,UAAIC,cAAcJ,KAAlB;AACA,UAAIK,cAAc,CAAlB;AACA,UAAIC,QAAQJ,SAAST,IAAIS,MAAJ,EAAYC,OAAZ,EAAqB,CAArB,CAAT,GAAmC,KAA/C;AACA,UAAII,OAAJ,EAAaC,UAAb;;AAEA,aAAOH,cAAcN,SAArB,EAAgC;AAC9B,YAAIM,eAAeP,MAAnB,EAA2B;AACzBS,oBAAUD,QAAQA,MAAMR,OAAOO,WAAP,CAAN,EAA2BA,WAA3B,EAAwCR,QAAxC,CAAR,GAA4DC,OAAOO,WAAP,CAAtE;;AAEAG,uBAAa,KAAb;AACA,cAAIjB,SAASgB,OAAT,CAAJ,EAAuB;AACrBC,yBAAaD,QAAQb,oBAAR,CAAb;AACAc,yBAAaA,eAAeC,SAAf,GAA2B,CAAC,CAACD,UAA7B,GAA0CnB,QAAQkB,OAAR,CAAvD;AACD;;AAED,cAAIC,cAAcP,QAAQ,CAA1B,EAA6B;AAC3BG,0BAAcT,iBAAiBC,MAAjB,EAAyBC,QAAzB,EAAmCU,OAAnC,EAA4Cf,SAASe,QAAQG,MAAjB,CAA5C,EAAsEN,WAAtE,EAAmFH,QAAQ,CAA3F,IAAgG,CAA9G;AACD,WAFD,MAEO;AACL,gBAAIG,eAAe,gBAAnB,EAAqC,MAAMO,WAAN;AACrCf,mBAAOQ,WAAP,IAAsBG,OAAtB;AACD;;AAEDH;AACD;AACDC;AACD;AACD,aAAOD,WAAP;AACD;;AAEDQ,WAAOC,OAAP,GAAiBlB,gBAAjB","file":"_flatten-into-array.js","sourcesContent":["'use strict';\n// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray\nvar isArray = require('./_is-array');\nvar isObject = require('./_is-object');\nvar toLength = require('./_to-length');\nvar ctx = require('./_ctx');\nvar IS_CONCAT_SPREADABLE = require('./_wks')('isConcatSpreadable');\n\nfunction flattenIntoArray(target, original, source, sourceLen, start, depth, mapper, thisArg) {\n  var targetIndex = start;\n  var sourceIndex = 0;\n  var mapFn = mapper ? ctx(mapper, thisArg, 3) : false;\n  var element, spreadable;\n\n  while (sourceIndex < sourceLen) {\n    if (sourceIndex in source) {\n      element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];\n\n      spreadable = false;\n      if (isObject(element)) {\n        spreadable = element[IS_CONCAT_SPREADABLE];\n        spreadable = spreadable !== undefined ? !!spreadable : isArray(element);\n      }\n\n      if (spreadable && depth > 0) {\n        targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;\n      } else {\n        if (targetIndex >= 0x1fffffffffffff) throw TypeError();\n        target[targetIndex] = element;\n      }\n\n      targetIndex++;\n    }\n    sourceIndex++;\n  }\n  return targetIndex;\n}\n\nmodule.exports = flattenIntoArray;\n"]}