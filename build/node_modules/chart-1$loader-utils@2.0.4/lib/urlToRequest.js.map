{"version":3,"sources":["urlToRequest.js"],"names":["matchNativeWin32Path","urlToRequest","url","root","moduleRequestRegex","request","test","undefined","replace","slice","Error","module","exports"],"mappings":"AAAA;;AAEA;;;;;;AACA,UAAMA,uBAAuB,qBAA7B;;AAEA,aAASC,YAAT,CAAsBC,GAAtB,EAA2BC,IAA3B,EAAiC;AAC/B;AACA,UAAID,QAAQ,EAAZ,EAAgB;AACd,eAAO,EAAP;AACD;;AAED,YAAME,qBAAqB,SAA3B;AACA,UAAIC,OAAJ;;AAEA,UAAIL,qBAAqBM,IAArB,CAA0BJ,GAA1B,CAAJ,EAAoC;AAClC;AACAG,kBAAUH,GAAV;AACD,OAHD,MAGO,IAAIC,SAASI,SAAT,IAAsBJ,SAAS,KAA/B,IAAwC,MAAMG,IAAN,CAAWJ,GAAX,CAA5C,EAA6D;AAClE;AACA,gBAAQ,OAAOC,IAAf;AACE;AACA,eAAK,QAAL;AACE;AACA,gBAAIC,mBAAmBE,IAAnB,CAAwBH,IAAxB,CAAJ,EAAmC;AACjCE,wBAAUF,KAAKK,OAAL,CAAa,UAAb,EAAyB,KAAzB,IAAkCN,IAAIO,KAAJ,CAAU,CAAV,CAA5C;AACD,aAFD,MAEO;AACLJ,wBAAUF,OAAOD,GAAjB;AACD;AACD;AACF;AACA;AACA,eAAK,SAAL;AACEG,sBAAUH,GAAV;AACA;AACF;AACE,kBAAM,IAAIQ,KAAJ,CACJ,iEACER,GADF,GAEE,WAFF,GAGEC,IAHF,GAIE,GALE,CAAN;AAhBJ;AAwBD,OA1BM,MA0BA,IAAI,WAAWG,IAAX,CAAgBJ,GAAhB,CAAJ,EAA0B;AAC/B;AACAG,kBAAUH,GAAV;AACD,OAHM,MAGA;AACL;AACAG,kBAAU,OAAOH,GAAjB;AACD;;AAED;AACA,UAAIE,mBAAmBE,IAAnB,CAAwBD,OAAxB,CAAJ,EAAsC;AACpCA,kBAAUA,QAAQG,OAAR,CAAgBJ,kBAAhB,EAAoC,EAApC,CAAV;AACD;;AAED,aAAOC,OAAP;AACD;;AAEDM,WAAOC,OAAP,GAAiBX,YAAjB","file":"urlToRequest.js","sourcesContent":["'use strict';\n\n// we can't use path.win32.isAbsolute because it also matches paths starting with a forward slash\nconst matchNativeWin32Path = /^[A-Z]:[/\\\\]|^\\\\\\\\/i;\n\nfunction urlToRequest(url, root) {\n  // Do not rewrite an empty url\n  if (url === '') {\n    return '';\n  }\n\n  const moduleRequestRegex = /^[^?]*~/;\n  let request;\n\n  if (matchNativeWin32Path.test(url)) {\n    // absolute windows path, keep it\n    request = url;\n  } else if (root !== undefined && root !== false && /^\\//.test(url)) {\n    // if root is set and the url is root-relative\n    switch (typeof root) {\n      // 1. root is a string: root is prefixed to the url\n      case 'string':\n        // special case: `~` roots convert to module request\n        if (moduleRequestRegex.test(root)) {\n          request = root.replace(/([^~/])$/, '$1/') + url.slice(1);\n        } else {\n          request = root + url;\n        }\n        break;\n      // 2. root is `true`: absolute paths are allowed\n      //    *nix only, windows-style absolute paths are always allowed as they doesn't start with a `/`\n      case 'boolean':\n        request = url;\n        break;\n      default:\n        throw new Error(\n          \"Unexpected parameters to loader-utils 'urlToRequest': url = \" +\n            url +\n            ', root = ' +\n            root +\n            '.'\n        );\n    }\n  } else if (/^\\.\\.?\\//.test(url)) {\n    // A relative url stays\n    request = url;\n  } else {\n    // every other url is threaded like a relative url\n    request = './' + url;\n  }\n\n  // A `~` makes the url an module\n  if (moduleRequestRegex.test(request)) {\n    request = request.replace(moduleRequestRegex, '');\n  }\n\n  return request;\n}\n\nmodule.exports = urlToRequest;\n"]}