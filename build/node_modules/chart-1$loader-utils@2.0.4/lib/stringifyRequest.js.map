{"version":3,"sources":["stringifyRequest.js"],"names":["path","require","matchRelativePath","isAbsolutePath","str","posix","isAbsolute","win32","isRelativePath","test","stringifyRequest","loaderContext","request","splitted","split","context","options","JSON","stringify","map","part","splittedPart","match","query","singlePath","relative","replace","join","module","exports"],"mappings":"AAAA;;;;;;AAEA,UAAMA,OAAOC,QAAQ,cAAR,CAAb;;AAEA,UAAMC,oBAAoB,aAA1B;;AAEA,aAASC,cAAT,CAAwBC,GAAxB,EAA6B;AAC3B,aAAOJ,KAAKK,KAAL,CAAWC,UAAX,CAAsBF,GAAtB,KAA8BJ,KAAKO,KAAL,CAAWD,UAAX,CAAsBF,GAAtB,CAArC;AACD;;AAED,aAASI,cAAT,CAAwBJ,GAAxB,EAA6B;AAC3B,aAAOF,kBAAkBO,IAAlB,CAAuBL,GAAvB,CAAP;AACD;;AAED,aAASM,gBAAT,CAA0BC,aAA1B,EAAyCC,OAAzC,EAAkD;AAChD,YAAMC,WAAWD,QAAQE,KAAR,CAAc,GAAd,CAAjB;AACA,YAAMC,UACJJ,cAAcI,OAAd,IACCJ,cAAcK,OAAd,IAAyBL,cAAcK,OAAd,CAAsBD,OAFlD;;AAIA,aAAOE,KAAKC,SAAL,CACLL,SACGM,GADH,CACQC,IAAD,IAAU;AACb;AACA,cAAMC,eAAeD,KAAKE,KAAL,CAAW,cAAX,CAArB;AACA,cAAMC,QAAQF,eAAeA,aAAa,CAAb,CAAf,GAAiC,EAA/C;AACA,YAAIG,aAAaH,eAAeA,aAAa,CAAb,CAAf,GAAiCD,IAAlD;;AAEA,YAAIjB,eAAeqB,UAAf,KAA8BT,OAAlC,EAA2C;AACzCS,uBAAaxB,KAAKyB,QAAL,CAAcV,OAAd,EAAuBS,UAAvB,CAAb;;AAEA,cAAIrB,eAAeqB,UAAf,CAAJ,EAAgC;AAC9B;AACA;AACA;AACA,mBAAOA,aAAaD,KAApB;AACD;;AAED,cAAIf,eAAegB,UAAf,MAA+B,KAAnC,EAA0C;AACxC;AACAA,yBAAa,OAAOA,UAApB;AACD;AACF;;AAED,eAAOA,WAAWE,OAAX,CAAmB,KAAnB,EAA0B,GAA1B,IAAiCH,KAAxC;AACD,OAxBH,EAyBGI,IAzBH,CAyBQ,GAzBR,CADK,CAAP;AA4BD;;AAEDC,WAAOC,OAAP,GAAiBnB,gBAAjB","file":"stringifyRequest.js","sourcesContent":["'use strict';\n\nconst path = require('path');\n\nconst matchRelativePath = /^\\.\\.?[/\\\\]/;\n\nfunction isAbsolutePath(str) {\n  return path.posix.isAbsolute(str) || path.win32.isAbsolute(str);\n}\n\nfunction isRelativePath(str) {\n  return matchRelativePath.test(str);\n}\n\nfunction stringifyRequest(loaderContext, request) {\n  const splitted = request.split('!');\n  const context =\n    loaderContext.context ||\n    (loaderContext.options && loaderContext.options.context);\n\n  return JSON.stringify(\n    splitted\n      .map((part) => {\n        // First, separate singlePath from query, because the query might contain paths again\n        const splittedPart = part.match(/^(.*?)(\\?.*)/);\n        const query = splittedPart ? splittedPart[2] : '';\n        let singlePath = splittedPart ? splittedPart[1] : part;\n\n        if (isAbsolutePath(singlePath) && context) {\n          singlePath = path.relative(context, singlePath);\n\n          if (isAbsolutePath(singlePath)) {\n            // If singlePath still matches an absolute path, singlePath was on a different drive than context.\n            // In this case, we leave the path platform-specific without replacing any separators.\n            // @see https://github.com/webpack/loader-utils/pull/14\n            return singlePath + query;\n          }\n\n          if (isRelativePath(singlePath) === false) {\n            // Ensure that the relative path starts at least with ./ otherwise it would be a request into the modules directory (like node_modules).\n            singlePath = './' + singlePath;\n          }\n        }\n\n        return singlePath.replace(/\\\\/g, '/') + query;\n      })\n      .join('!')\n  );\n}\n\nmodule.exports = stringifyRequest;\n"]}