{"version":3,"sources":["BatchedHash.js"],"names":["MAX_SHORT_STRING","require","BatchedHash","constructor","hash","string","undefined","encoding","update","data","inputEncoding","length","startsWith","digest","module","exports"],"mappings":";;;;AAAA,UAAMA,mBAAmBC,QAAQ,aAAR,EAAuBD,gBAAhD;;AAEA,UAAME,WAAN,CAAkB;AAChBC,kBAAYC,IAAZ,EAAkB;AAChB,aAAKC,MAAL,GAAcC,SAAd;AACA,aAAKC,QAAL,GAAgBD,SAAhB;AACA,aAAKF,IAAL,GAAYA,IAAZ;AACD;;AAED;;;;;;AAMAI,aAAOC,IAAP,EAAaC,aAAb,EAA4B;AAC1B,YAAI,KAAKL,MAAL,KAAgBC,SAApB,EAA+B;AAC7B,cACE,OAAOG,IAAP,KAAgB,QAAhB,IACAC,kBAAkB,KAAKH,QADvB,IAEA,KAAKF,MAAL,CAAYM,MAAZ,GAAqBF,KAAKE,MAA1B,GAAmCX,gBAHrC,EAIE;AACA,iBAAKK,MAAL,IAAeI,IAAf;;AAEA,mBAAO,IAAP;AACD;;AAED,eAAKL,IAAL,CAAUI,MAAV,CAAiB,KAAKH,MAAtB,EAA8B,KAAKE,QAAnC;AACA,eAAKF,MAAL,GAAcC,SAAd;AACD;;AAED,YAAI,OAAOG,IAAP,KAAgB,QAApB,EAA8B;AAC5B,cACEA,KAAKE,MAAL,GAAcX,gBAAd;AACA;AACC,WAACU,aAAD,IAAkB,CAACA,cAAcE,UAAd,CAAyB,IAAzB,CAFpB,CADF,EAIE;AACA,iBAAKP,MAAL,GAAcI,IAAd;AACA,iBAAKF,QAAL,GAAgBG,aAAhB;AACD,WAPD,MAOO;AACL,iBAAKN,IAAL,CAAUI,MAAV,CAAiBC,IAAjB,EAAuBC,aAAvB;AACD;AACF,SAXD,MAWO;AACL,eAAKN,IAAL,CAAUI,MAAV,CAAiBC,IAAjB;AACD;;AAED,eAAO,IAAP;AACD;;AAED;;;;;AAKAI,aAAON,QAAP,EAAiB;AACf,YAAI,KAAKF,MAAL,KAAgBC,SAApB,EAA+B;AAC7B,eAAKF,IAAL,CAAUI,MAAV,CAAiB,KAAKH,MAAtB,EAA8B,KAAKE,QAAnC;AACD;;AAED,eAAO,KAAKH,IAAL,CAAUS,MAAV,CAAiBN,QAAjB,CAAP;AACD;AA1De;;AA6DlBO,WAAOC,OAAP,GAAiBb,WAAjB","file":"BatchedHash.js","sourcesContent":["const MAX_SHORT_STRING = require('./wasm-hash').MAX_SHORT_STRING;\n\nclass BatchedHash {\n  constructor(hash) {\n    this.string = undefined;\n    this.encoding = undefined;\n    this.hash = hash;\n  }\n\n  /**\n   * Update hash {@link https://nodejs.org/api/crypto.html#crypto_hash_update_data_inputencoding}\n   * @param {string|Buffer} data data\n   * @param {string=} inputEncoding data encoding\n   * @returns {this} updated hash\n   */\n  update(data, inputEncoding) {\n    if (this.string !== undefined) {\n      if (\n        typeof data === 'string' &&\n        inputEncoding === this.encoding &&\n        this.string.length + data.length < MAX_SHORT_STRING\n      ) {\n        this.string += data;\n\n        return this;\n      }\n\n      this.hash.update(this.string, this.encoding);\n      this.string = undefined;\n    }\n\n    if (typeof data === 'string') {\n      if (\n        data.length < MAX_SHORT_STRING &&\n        // base64 encoding is not valid since it may contain padding chars\n        (!inputEncoding || !inputEncoding.startsWith('ba'))\n      ) {\n        this.string = data;\n        this.encoding = inputEncoding;\n      } else {\n        this.hash.update(data, inputEncoding);\n      }\n    } else {\n      this.hash.update(data);\n    }\n\n    return this;\n  }\n\n  /**\n   * Calculates the digest {@link https://nodejs.org/api/crypto.html#crypto_hash_digest_encoding}\n   * @param {string=} encoding encoding of the return value\n   * @returns {string|Buffer} digest\n   */\n  digest(encoding) {\n    if (this.string !== undefined) {\n      this.hash.update(this.string, this.encoding);\n    }\n\n    return this.hash.digest(encoding);\n  }\n}\n\nmodule.exports = BatchedHash;\n"]}