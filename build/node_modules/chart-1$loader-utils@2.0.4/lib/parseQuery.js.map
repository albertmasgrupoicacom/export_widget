{"version":3,"sources":["parseQuery.js"],"names":["JSON5","require","specialValues","null","true","false","parseQuery","query","substr","Error","parse","queryArgs","split","result","Object","create","forEach","arg","idx","indexOf","name","value","decodeURIComponent","hasOwnProperty","length","Array","isArray","push","module","exports"],"mappings":"AAAA;;;;;;AAEA,UAAMA,QAAQC,QAAQ,eAAR,CAAd;;AAEA,UAAMC,gBAAgB;AACpBC,YAAM,IADc;AAEpBC,YAAM,IAFc;AAGpBC,aAAO;AAHa,KAAtB;;AAMA,aAASC,UAAT,CAAoBC,KAApB,EAA2B;AACzB,UAAIA,MAAMC,MAAN,CAAa,CAAb,EAAgB,CAAhB,MAAuB,GAA3B,EAAgC;AAC9B,cAAM,IAAIC,KAAJ,CACJ,iEADI,CAAN;AAGD;;AAEDF,cAAQA,MAAMC,MAAN,CAAa,CAAb,CAAR;;AAEA,UAAI,CAACD,KAAL,EAAY;AACV,eAAO,EAAP;AACD;;AAED,UAAIA,MAAMC,MAAN,CAAa,CAAb,EAAgB,CAAhB,MAAuB,GAAvB,IAA8BD,MAAMC,MAAN,CAAa,CAAC,CAAd,MAAqB,GAAvD,EAA4D;AAC1D,eAAOR,MAAMU,KAAN,CAAYH,KAAZ,CAAP;AACD;;AAED,YAAMI,YAAYJ,MAAMK,KAAN,CAAY,OAAZ,CAAlB;AACA,YAAMC,SAASC,OAAOC,MAAP,CAAc,IAAd,CAAf;;AAEAJ,gBAAUK,OAAV,CAAmBC,GAAD,IAAS;AACzB,cAAMC,MAAMD,IAAIE,OAAJ,CAAY,GAAZ,CAAZ;;AAEA,YAAID,OAAO,CAAX,EAAc;AACZ,cAAIE,OAAOH,IAAIT,MAAJ,CAAW,CAAX,EAAcU,GAAd,CAAX;AACA,cAAIG,QAAQC,mBAAmBL,IAAIT,MAAJ,CAAWU,MAAM,CAAjB,CAAnB,CAAZ;;AAEA;AACA,cAAIhB,cAAcqB,cAAd,CAA6BF,KAA7B,CAAJ,EAAyC;AACvCA,oBAAQnB,cAAcmB,KAAd,CAAR;AACD;;AAED,cAAID,KAAKZ,MAAL,CAAY,CAAC,CAAb,MAAoB,IAAxB,EAA8B;AAC5BY,mBAAOE,mBAAmBF,KAAKZ,MAAL,CAAY,CAAZ,EAAeY,KAAKI,MAAL,GAAc,CAA7B,CAAnB,CAAP;;AAEA,gBAAI,CAACC,MAAMC,OAAN,CAAcb,OAAOO,IAAP,CAAd,CAAL,EAAkC;AAChCP,qBAAOO,IAAP,IAAe,EAAf;AACD;;AAEDP,mBAAOO,IAAP,EAAaO,IAAb,CAAkBN,KAAlB;AACD,WARD,MAQO;AACLD,mBAAOE,mBAAmBF,IAAnB,CAAP;AACAP,mBAAOO,IAAP,IAAeC,KAAf;AACD;AACF,SArBD,MAqBO;AACL,cAAIJ,IAAIT,MAAJ,CAAW,CAAX,EAAc,CAAd,MAAqB,GAAzB,EAA8B;AAC5BK,mBAAOS,mBAAmBL,IAAIT,MAAJ,CAAW,CAAX,CAAnB,CAAP,IAA4C,KAA5C;AACD,WAFD,MAEO,IAAIS,IAAIT,MAAJ,CAAW,CAAX,EAAc,CAAd,MAAqB,GAAzB,EAA8B;AACnCK,mBAAOS,mBAAmBL,IAAIT,MAAJ,CAAW,CAAX,CAAnB,CAAP,IAA4C,IAA5C;AACD,WAFM,MAEA;AACLK,mBAAOS,mBAAmBL,GAAnB,CAAP,IAAkC,IAAlC;AACD;AACF;AACF,OAjCD;;AAmCA,aAAOJ,MAAP;AACD;;AAEDe,WAAOC,OAAP,GAAiBvB,UAAjB","file":"parseQuery.js","sourcesContent":["'use strict';\n\nconst JSON5 = require('json5');\n\nconst specialValues = {\n  null: null,\n  true: true,\n  false: false,\n};\n\nfunction parseQuery(query) {\n  if (query.substr(0, 1) !== '?') {\n    throw new Error(\n      \"A valid query string passed to parseQuery should begin with '?'\"\n    );\n  }\n\n  query = query.substr(1);\n\n  if (!query) {\n    return {};\n  }\n\n  if (query.substr(0, 1) === '{' && query.substr(-1) === '}') {\n    return JSON5.parse(query);\n  }\n\n  const queryArgs = query.split(/[,&]/g);\n  const result = Object.create(null);\n\n  queryArgs.forEach((arg) => {\n    const idx = arg.indexOf('=');\n\n    if (idx >= 0) {\n      let name = arg.substr(0, idx);\n      let value = decodeURIComponent(arg.substr(idx + 1));\n\n      // eslint-disable-next-line no-prototype-builtins\n      if (specialValues.hasOwnProperty(value)) {\n        value = specialValues[value];\n      }\n\n      if (name.substr(-2) === '[]') {\n        name = decodeURIComponent(name.substr(0, name.length - 2));\n\n        if (!Array.isArray(result[name])) {\n          result[name] = [];\n        }\n\n        result[name].push(value);\n      } else {\n        name = decodeURIComponent(name);\n        result[name] = value;\n      }\n    } else {\n      if (arg.substr(0, 1) === '-') {\n        result[decodeURIComponent(arg.substr(1))] = false;\n      } else if (arg.substr(0, 1) === '+') {\n        result[decodeURIComponent(arg.substr(1))] = true;\n      } else {\n        result[decodeURIComponent(arg)] = true;\n      }\n    }\n  });\n\n  return result;\n}\n\nmodule.exports = parseQuery;\n"]}