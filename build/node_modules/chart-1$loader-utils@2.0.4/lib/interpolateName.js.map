{"version":3,"sources":["interpolateName.js"],"names":["path","require","emojisList","getHashDigest","emojiRegex","emojiList","filter","emoji","test","emojiCache","encodeStringToEmoji","content","length","emojis","Error","index","Math","floor","random","push","splice","emojiEncoding","join","interpolateName","loaderContext","name","options","filename","hasQuery","resourceQuery","resourcePath","undefined","context","regExp","ext","basename","directory","folder","query","parsed","parse","substr","dir","sep","relative","replace","hashIdx","indexOf","url","all","hashType","digestType","maxLength","parseInt","match","RegExp","forEach","matched","i","customInterpolateName","call","module","exports"],"mappings":"AAAA;;;;;;AAEA,UAAMA,OAAOC,QAAQ,cAAR,CAAb;AACA,UAAMC,aAAaD,QAAQ,qBAAR,CAAnB;AACA,UAAME,gBAAgBF,QAAQ,iBAAR,CAAtB;;AAEA,UAAMG,aAAa,kBAAnB;AACA,UAAMC,YAAYH,WAAWI,MAAX,CAAmBC,KAAD,IAAWH,WAAWI,IAAX,CAAgBD,KAAhB,CAA7B,CAAlB;AACA,UAAME,aAAa,EAAnB;;AAEA,aAASC,mBAAT,CAA6BC,OAA7B,EAAsCC,MAAtC,EAA8C;AAC5C,UAAIH,WAAWE,OAAX,CAAJ,EAAyB;AACvB,eAAOF,WAAWE,OAAX,CAAP;AACD;;AAEDC,eAASA,UAAU,CAAnB;;AAEA,YAAMC,SAAS,EAAf;;AAEA,SAAG;AACD,YAAI,CAACR,UAAUO,MAAf,EAAuB;AACrB,gBAAM,IAAIE,KAAJ,CAAU,kBAAV,CAAN;AACD;;AAED,cAAMC,QAAQC,KAAKC,KAAL,CAAWD,KAAKE,MAAL,KAAgBb,UAAUO,MAArC,CAAd;;AAEAC,eAAOM,IAAP,CAAYd,UAAUU,KAAV,CAAZ;AACAV,kBAAUe,MAAV,CAAiBL,KAAjB,EAAwB,CAAxB;AACD,OATD,QASS,EAAEH,MAAF,GAAW,CATpB;;AAWA,YAAMS,gBAAgBR,OAAOS,IAAP,CAAY,EAAZ,CAAtB;;AAEAb,iBAAWE,OAAX,IAAsBU,aAAtB;;AAEA,aAAOA,aAAP;AACD;;AAED,aAASE,eAAT,CAAyBC,aAAzB,EAAwCC,IAAxC,EAA8CC,OAA9C,EAAuD;AACrD,UAAIC,QAAJ;;AAEA,YAAMC,WACJJ,cAAcK,aAAd,IAA+BL,cAAcK,aAAd,CAA4BjB,MAA5B,GAAqC,CADtE;;AAGA,UAAI,OAAOa,IAAP,KAAgB,UAApB,EAAgC;AAC9BE,mBAAWF,KACTD,cAAcM,YADL,EAETF,WAAWJ,cAAcK,aAAzB,GAAyCE,SAFhC,CAAX;AAID,OALD,MAKO;AACLJ,mBAAWF,QAAQ,cAAnB;AACD;;AAED,YAAMO,UAAUN,QAAQM,OAAxB;AACA,YAAMrB,UAAUe,QAAQf,OAAxB;AACA,YAAMsB,SAASP,QAAQO,MAAvB;;AAEA,UAAIC,MAAM,KAAV;AACA,UAAIC,WAAW,MAAf;AACA,UAAIC,YAAY,EAAhB;AACA,UAAIC,SAAS,EAAb;AACA,UAAIC,QAAQ,EAAZ;;AAEA,UAAId,cAAcM,YAAlB,EAAgC;AAC9B,cAAMS,SAASvC,KAAKwC,KAAL,CAAWhB,cAAcM,YAAzB,CAAf;AACA,YAAIA,eAAeN,cAAcM,YAAjC;;AAEA,YAAIS,OAAOL,GAAX,EAAgB;AACdA,gBAAMK,OAAOL,GAAP,CAAWO,MAAX,CAAkB,CAAlB,CAAN;AACD;;AAED,YAAIF,OAAOG,GAAX,EAAgB;AACdP,qBAAWI,OAAOd,IAAlB;AACAK,yBAAeS,OAAOG,GAAP,GAAa1C,KAAK2C,GAAjC;AACD;;AAED,YAAI,OAAOX,OAAP,KAAmB,WAAvB,EAAoC;AAClCI,sBAAYpC,KACT4C,QADS,CACAZ,OADA,EACSF,eAAe,GADxB,EAETe,OAFS,CAED,KAFC,EAEM,GAFN,EAGTA,OAHS,CAGD,YAHC,EAGa,KAHb,CAAZ;AAIAT,sBAAYA,UAAUK,MAAV,CAAiB,CAAjB,EAAoBL,UAAUxB,MAAV,GAAmB,CAAvC,CAAZ;AACD,SAND,MAMO;AACLwB,sBAAYN,aAAae,OAAb,CAAqB,KAArB,EAA4B,GAA5B,EAAiCA,OAAjC,CAAyC,YAAzC,EAAuD,KAAvD,CAAZ;AACD;;AAED,YAAIT,UAAUxB,MAAV,KAAqB,CAAzB,EAA4B;AAC1BwB,sBAAY,EAAZ;AACD,SAFD,MAEO,IAAIA,UAAUxB,MAAV,GAAmB,CAAvB,EAA0B;AAC/ByB,mBAASrC,KAAKmC,QAAL,CAAcC,SAAd,CAAT;AACD;AACF;;AAED,UAAIZ,cAAcK,aAAd,IAA+BL,cAAcK,aAAd,CAA4BjB,MAA5B,GAAqC,CAAxE,EAA2E;AACzE0B,gBAAQd,cAAcK,aAAtB;;AAEA,cAAMiB,UAAUR,MAAMS,OAAN,CAAc,GAAd,CAAhB;;AAEA,YAAID,WAAW,CAAf,EAAkB;AAChBR,kBAAQA,MAAMG,MAAN,CAAa,CAAb,EAAgBK,OAAhB,CAAR;AACD;AACF;;AAED,UAAIE,MAAMrB,QAAV;;AAEA,UAAIhB,OAAJ,EAAa;AACX;AACAqC,cAAMA;AACJ;AACA;AAFI,SAGHH,OAHG,CAIF,wEAJE,EAKF,CAACI,GAAD,EAAMC,QAAN,EAAgBC,UAAhB,EAA4BC,SAA5B,KACEjD,cAAcQ,OAAd,EAAuBuC,QAAvB,EAAiCC,UAAjC,EAA6CE,SAASD,SAAT,EAAoB,EAApB,CAA7C,CANA,EAQHP,OARG,CAQK,wBARL,EAQ+B,CAACI,GAAD,EAAMrC,MAAN,KACjCF,oBAAoBC,OAApB,EAA6B0C,SAASzC,MAAT,EAAiB,EAAjB,CAA7B,CATE,CAAN;AAWD;;AAEDoC,YAAMA,IACHH,OADG,CACK,WADL,EACkB,MAAMX,GADxB,EAEHW,OAFG,CAEK,YAFL,EAEmB,MAAMV,QAFzB,EAGHU,OAHG,CAGK,YAHL,EAGmB,MAAMT,SAHzB,EAIHS,OAJG,CAIK,cAJL,EAIqB,MAAMR,MAJ3B,EAKHQ,OALG,CAKK,aALL,EAKoB,MAAMP,KAL1B,CAAN;;AAOA,UAAIL,UAAUT,cAAcM,YAA5B,EAA0C;AACxC,cAAMwB,QAAQ9B,cAAcM,YAAd,CAA2BwB,KAA3B,CAAiC,IAAIC,MAAJ,CAAWtB,MAAX,CAAjC,CAAd;;AAEAqB,iBACEA,MAAME,OAAN,CAAc,CAACC,OAAD,EAAUC,CAAV,KAAgB;AAC5BV,gBAAMA,IAAIH,OAAJ,CAAY,IAAIU,MAAJ,CAAW,QAAQG,CAAR,GAAY,KAAvB,EAA8B,IAA9B,CAAZ,EAAiDD,OAAjD,CAAN;AACD,SAFD,CADF;AAID;;AAED,UACE,OAAOjC,cAAcE,OAArB,KAAiC,QAAjC,IACA,OAAOF,cAAcE,OAAd,CAAsBiC,qBAA7B,KAAuD,UAFzD,EAGE;AACAX,cAAMxB,cAAcE,OAAd,CAAsBiC,qBAAtB,CAA4CC,IAA5C,CACJpC,aADI,EAEJwB,GAFI,EAGJvB,IAHI,EAIJC,OAJI,CAAN;AAMD;;AAED,aAAOsB,GAAP;AACD;;AAEDa,WAAOC,OAAP,GAAiBvC,eAAjB","file":"interpolateName.js","sourcesContent":["'use strict';\n\nconst path = require('path');\nconst emojisList = require('emojis-list');\nconst getHashDigest = require('./getHashDigest');\n\nconst emojiRegex = /[\\uD800-\\uDFFF]./;\nconst emojiList = emojisList.filter((emoji) => emojiRegex.test(emoji));\nconst emojiCache = {};\n\nfunction encodeStringToEmoji(content, length) {\n  if (emojiCache[content]) {\n    return emojiCache[content];\n  }\n\n  length = length || 1;\n\n  const emojis = [];\n\n  do {\n    if (!emojiList.length) {\n      throw new Error('Ran out of emoji');\n    }\n\n    const index = Math.floor(Math.random() * emojiList.length);\n\n    emojis.push(emojiList[index]);\n    emojiList.splice(index, 1);\n  } while (--length > 0);\n\n  const emojiEncoding = emojis.join('');\n\n  emojiCache[content] = emojiEncoding;\n\n  return emojiEncoding;\n}\n\nfunction interpolateName(loaderContext, name, options) {\n  let filename;\n\n  const hasQuery =\n    loaderContext.resourceQuery && loaderContext.resourceQuery.length > 1;\n\n  if (typeof name === 'function') {\n    filename = name(\n      loaderContext.resourcePath,\n      hasQuery ? loaderContext.resourceQuery : undefined\n    );\n  } else {\n    filename = name || '[hash].[ext]';\n  }\n\n  const context = options.context;\n  const content = options.content;\n  const regExp = options.regExp;\n\n  let ext = 'bin';\n  let basename = 'file';\n  let directory = '';\n  let folder = '';\n  let query = '';\n\n  if (loaderContext.resourcePath) {\n    const parsed = path.parse(loaderContext.resourcePath);\n    let resourcePath = loaderContext.resourcePath;\n\n    if (parsed.ext) {\n      ext = parsed.ext.substr(1);\n    }\n\n    if (parsed.dir) {\n      basename = parsed.name;\n      resourcePath = parsed.dir + path.sep;\n    }\n\n    if (typeof context !== 'undefined') {\n      directory = path\n        .relative(context, resourcePath + '_')\n        .replace(/\\\\/g, '/')\n        .replace(/\\.\\.(\\/)?/g, '_$1');\n      directory = directory.substr(0, directory.length - 1);\n    } else {\n      directory = resourcePath.replace(/\\\\/g, '/').replace(/\\.\\.(\\/)?/g, '_$1');\n    }\n\n    if (directory.length === 1) {\n      directory = '';\n    } else if (directory.length > 1) {\n      folder = path.basename(directory);\n    }\n  }\n\n  if (loaderContext.resourceQuery && loaderContext.resourceQuery.length > 1) {\n    query = loaderContext.resourceQuery;\n\n    const hashIdx = query.indexOf('#');\n\n    if (hashIdx >= 0) {\n      query = query.substr(0, hashIdx);\n    }\n  }\n\n  let url = filename;\n\n  if (content) {\n    // Match hash template\n    url = url\n      // `hash` and `contenthash` are same in `loader-utils` context\n      // let's keep `hash` for backward compatibility\n      .replace(\n        /\\[(?:([^[:\\]]+):)?(?:hash|contenthash)(?::([a-z]+\\d*))?(?::(\\d+))?\\]/gi,\n        (all, hashType, digestType, maxLength) =>\n          getHashDigest(content, hashType, digestType, parseInt(maxLength, 10))\n      )\n      .replace(/\\[emoji(?::(\\d+))?\\]/gi, (all, length) =>\n        encodeStringToEmoji(content, parseInt(length, 10))\n      );\n  }\n\n  url = url\n    .replace(/\\[ext\\]/gi, () => ext)\n    .replace(/\\[name\\]/gi, () => basename)\n    .replace(/\\[path\\]/gi, () => directory)\n    .replace(/\\[folder\\]/gi, () => folder)\n    .replace(/\\[query\\]/gi, () => query);\n\n  if (regExp && loaderContext.resourcePath) {\n    const match = loaderContext.resourcePath.match(new RegExp(regExp));\n\n    match &&\n      match.forEach((matched, i) => {\n        url = url.replace(new RegExp('\\\\[' + i + '\\\\]', 'ig'), matched);\n      });\n  }\n\n  if (\n    typeof loaderContext.options === 'object' &&\n    typeof loaderContext.options.customInterpolateName === 'function'\n  ) {\n    url = loaderContext.options.customInterpolateName.call(\n      loaderContext,\n      url,\n      name,\n      options\n    );\n  }\n\n  return url;\n}\n\nmodule.exports = interpolateName;\n"]}