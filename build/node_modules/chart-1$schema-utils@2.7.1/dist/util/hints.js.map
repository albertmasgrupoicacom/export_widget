{"version":3,"sources":["hints.js"],"names":["Range","require","module","exports","stringHints","schema","logic","hints","type","currentSchema","tmpLength","minLength","tmpFormat","formatMinimum","tmpExclusive","formatExclusiveMaximum","maxLength","formatMaximum","formatExclusiveMinimum","length","Math","max","push","pattern","JSON","stringify","format","concat","numberHints","range","minimum","left","exclusiveMinimum","maximum","right","exclusiveMaximum","rangeFormat","multipleOf"],"mappings":"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","file":"hints.js","sourcesContent":["\"use strict\";\n\nconst Range = require('./Range');\n/** @typedef {import(\"../validate\").Schema} Schema */\n\n/**\n * @param {Schema} schema\n * @param {boolean} logic\n * @return {string[]}\n */\n\n\nmodule.exports.stringHints = function stringHints(schema, logic) {\n  const hints = [];\n  let type = 'string';\n  const currentSchema = { ...schema\n  };\n\n  if (!logic) {\n    const tmpLength = currentSchema.minLength;\n    const tmpFormat = currentSchema.formatMinimum;\n    const tmpExclusive = currentSchema.formatExclusiveMaximum;\n    currentSchema.minLength = currentSchema.maxLength;\n    currentSchema.maxLength = tmpLength;\n    currentSchema.formatMinimum = currentSchema.formatMaximum;\n    currentSchema.formatMaximum = tmpFormat;\n    currentSchema.formatExclusiveMaximum = !currentSchema.formatExclusiveMinimum;\n    currentSchema.formatExclusiveMinimum = !tmpExclusive;\n  }\n\n  if (typeof currentSchema.minLength === 'number') {\n    if (currentSchema.minLength === 1) {\n      type = 'non-empty string';\n    } else {\n      const length = Math.max(currentSchema.minLength - 1, 0);\n      hints.push(`should be longer than ${length} character${length > 1 ? 's' : ''}`);\n    }\n  }\n\n  if (typeof currentSchema.maxLength === 'number') {\n    if (currentSchema.maxLength === 0) {\n      type = 'empty string';\n    } else {\n      const length = currentSchema.maxLength + 1;\n      hints.push(`should be shorter than ${length} character${length > 1 ? 's' : ''}`);\n    }\n  }\n\n  if (currentSchema.pattern) {\n    hints.push(`should${logic ? '' : ' not'} match pattern ${JSON.stringify(currentSchema.pattern)}`);\n  }\n\n  if (currentSchema.format) {\n    hints.push(`should${logic ? '' : ' not'} match format ${JSON.stringify(currentSchema.format)}`);\n  }\n\n  if (currentSchema.formatMinimum) {\n    hints.push(`should be ${currentSchema.formatExclusiveMinimum ? '>' : '>='} ${JSON.stringify(currentSchema.formatMinimum)}`);\n  }\n\n  if (currentSchema.formatMaximum) {\n    hints.push(`should be ${currentSchema.formatExclusiveMaximum ? '<' : '<='} ${JSON.stringify(currentSchema.formatMaximum)}`);\n  }\n\n  return [type].concat(hints);\n};\n/**\n * @param {Schema} schema\n * @param {boolean} logic\n * @return {string[]}\n */\n\n\nmodule.exports.numberHints = function numberHints(schema, logic) {\n  const hints = [schema.type === 'integer' ? 'integer' : 'number'];\n  const range = new Range();\n\n  if (typeof schema.minimum === 'number') {\n    range.left(schema.minimum);\n  }\n\n  if (typeof schema.exclusiveMinimum === 'number') {\n    range.left(schema.exclusiveMinimum, true);\n  }\n\n  if (typeof schema.maximum === 'number') {\n    range.right(schema.maximum);\n  }\n\n  if (typeof schema.exclusiveMaximum === 'number') {\n    range.right(schema.exclusiveMaximum, true);\n  }\n\n  const rangeFormat = range.format(logic);\n\n  if (rangeFormat) {\n    hints.push(rangeFormat);\n  }\n\n  if (typeof schema.multipleOf === 'number') {\n    hints.push(`should${logic ? '' : ' not'} be multiple of ${schema.multipleOf}`);\n  }\n\n  return hints;\n};"]}