{"version":3,"sources":["transform.js"],"names":["asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","args","arguments","apply","err","undefined","babel","require","promisify","LoaderError","transform","module","exports","_ref","source","options","result","message","codeFrame","ast","code","map","metadata","sourceType","externalDependencies","sourcesContent","length","Array","from","_x","_x2","version"],"mappings":"AAAA;;;;;;AAEA,aAASA,kBAAT,CAA4BC,GAA5B,EAAiCC,OAAjC,EAA0CC,MAA1C,EAAkDC,KAAlD,EAAyDC,MAAzD,EAAiEC,GAAjE,EAAsEC,GAAtE,EAA2E;AAAE,UAAI;AAAE,YAAIC,OAAOP,IAAIK,GAAJ,EAASC,GAAT,CAAX,CAA0B,IAAIE,QAAQD,KAAKC,KAAjB;AAAyB,OAAzD,CAA0D,OAAOC,KAAP,EAAc;AAAEP,eAAOO,KAAP,EAAe;AAAS,OAAC,IAAIF,KAAKG,IAAT,EAAe;AAAET,gBAAQO,KAAR;AAAiB,OAAlC,MAAwC;AAAEG,gBAAQV,OAAR,CAAgBO,KAAhB,EAAuBI,IAAvB,CAA4BT,KAA5B,EAAmCC,MAAnC;AAA6C;AAAE;AACzQ,aAASS,iBAAT,CAA2BC,EAA3B,EAA+B;AAAE,aAAO,YAAY;AAAE,YAAIC,OAAO,IAAX;AAAA,YAAiBC,OAAOC,SAAxB,CAAmC,OAAO,IAAIN,OAAJ,CAAY,UAAUV,OAAV,EAAmBC,MAAnB,EAA2B;AAAE,cAAIF,MAAMc,GAAGI,KAAH,CAASH,IAAT,EAAeC,IAAf,CAAV,CAAgC,SAASb,KAAT,CAAeK,KAAf,EAAsB;AAAET,+BAAmBC,GAAnB,EAAwBC,OAAxB,EAAiCC,MAAjC,EAAyCC,KAAzC,EAAgDC,MAAhD,EAAwD,MAAxD,EAAgEI,KAAhE;AAAyE,WAAC,SAASJ,MAAT,CAAgBe,GAAhB,EAAqB;AAAEpB,+BAAmBC,GAAnB,EAAwBC,OAAxB,EAAiCC,MAAjC,EAAyCC,KAAzC,EAAgDC,MAAhD,EAAwD,OAAxD,EAAiEe,GAAjE;AAAwE,WAAChB,MAAMiB,SAAN;AAAmB,SAA9R,CAAP;AAAyS,OAAjW;AAAoW;AACrY,UAAMC,QAAQC,QAAQ,qBAAR,CAAd;AACA,UAAM;AACJC;AADI,QAEFD,QAAQ,cAAR,CAFJ;AAGA,UAAME,cAAcF,QAAQ,SAAR,CAApB;AACA,UAAMG,YAAYF,UAAUF,MAAMI,SAAhB,CAAlB;AACAC,WAAOC,OAAP,GAAiB,aAAa,YAAY;AACxC,UAAIC,OAAOf,kBAAkB,WAAWgB,MAAX,EAAmBC,OAAnB,EAA4B;AACvD,YAAIC,MAAJ;AACA,YAAI;AACFA,mBAAS,MAAMN,UAAUI,MAAV,EAAkBC,OAAlB,CAAf;AACD,SAFD,CAEE,OAAOX,GAAP,EAAY;AACZ,gBAAMA,IAAIa,OAAJ,IAAeb,IAAIc,SAAnB,GAA+B,IAAIT,WAAJ,CAAgBL,GAAhB,CAA/B,GAAsDA,GAA5D;AACD;AACD,YAAI,CAACY,MAAL,EAAa,OAAO,IAAP;;AAEb;AACA;AACA;AACA;AACA;AACA,cAAM;AACJG,aADI;AAEJC,cAFI;AAGJC,aAHI;AAIJC,kBAJI;AAKJC,oBALI;AAMJC;AANI,YAOFR,MAPJ;AAQA,YAAIK,QAAQ,CAACA,IAAII,cAAL,IAAuB,CAACJ,IAAII,cAAJ,CAAmBC,MAAnD,CAAJ,EAAgE;AAC9DL,cAAII,cAAJ,GAAqB,CAACX,MAAD,CAArB;AACD;AACD,eAAO;AACLK,aADK;AAELC,cAFK;AAGLC,aAHK;AAILC,kBAJK;AAKLC,oBALK;AAML;AACAC,gCAAsBG,MAAMC,IAAN,CAAWJ,wBAAwB,EAAnC;AAPjB,SAAP;AASD,OAlCU,CAAX;AAmCA,aAAO,UAAUK,EAAV,EAAcC,GAAd,EAAmB;AACxB,eAAOjB,KAAKV,KAAL,CAAW,IAAX,EAAiBD,SAAjB,CAAP;AACD,OAFD;AAGD,KAvC6B,EAA9B;AAwCAS,WAAOC,OAAP,CAAemB,OAAf,GAAyBzB,MAAMyB,OAA/B","file":"transform.js","sourcesContent":["\"use strict\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\nconst babel = require(\"@babel/core\");\nconst {\n  promisify\n} = require(\"util\");\nconst LoaderError = require(\"./Error\");\nconst transform = promisify(babel.transform);\nmodule.exports = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (source, options) {\n    let result;\n    try {\n      result = yield transform(source, options);\n    } catch (err) {\n      throw err.message && err.codeFrame ? new LoaderError(err) : err;\n    }\n    if (!result) return null;\n\n    // We don't return the full result here because some entries are not\n    // really serializable. For a full list of properties see here:\n    // https://github.com/babel/babel/blob/main/packages/babel-core/src/transformation/index.js\n    // For discussion on this topic see here:\n    // https://github.com/babel/babel-loader/pull/629\n    const {\n      ast,\n      code,\n      map,\n      metadata,\n      sourceType,\n      externalDependencies\n    } = result;\n    if (map && (!map.sourcesContent || !map.sourcesContent.length)) {\n      map.sourcesContent = [source];\n    }\n    return {\n      ast,\n      code,\n      map,\n      metadata,\n      sourceType,\n      // Convert it from a Set to an Array to make it JSON-serializable.\n      externalDependencies: Array.from(externalDependencies || [])\n    };\n  });\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nmodule.exports.version = babel.version;"]}